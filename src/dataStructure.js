import {
    Bit, Int8, UInt8, Int16, UInt16, Int32, UInt32, UInt64, Int,
    Real32, Real,
    RealList, IntList, WordList,
    Word, Text, CString, Unknown,
    CFile,
    Link
} from "./dataClasses.js"

import { EUnitVital } from "./dataEnums.js"

ETime // ["Start","Stop"],

const SGameContentCreationData = WordList
const SProductReleaseDate = Link
const CAbilSetId =  CString
const TEditorCategories = CString
const TGalaxyFunction = CString
const CTargetFilters = CString
const CFangleArc = Real
const CGameTime = Real
const CCmdResult = CString
const CImagePath = CString
const CStringLink = CString
const CfRange = RealList
const TAbilCmdIndex = Int
const CFangle = Real
const CDataSoupKey = CString
const CGamePoint = RealList
const TCargoSize = Int
const TCargoCapacity = Int
const CIdentifier = CString
const CColor = IntList
const CModelPath = CString
const TCooldownLink = CString
const TChargeLink = CString
const TMarkerCount = Int
const TMarkerLink = CString
const TPreemptLevel = Int
const CActorKey = CString
const CActorTerms = 'terms'
const CScaleVector = RealList
const C3Vector = RealList
const CActorCreateKey = CString
const CActorLabelKey = CString
const CQuad = RealList
const CRange = RealList
const CVariatorActorReal32 = RealList
const C2Vector = RealList
const CRefKey = CString
const CActorAngle = Real
const CAnimNameKey = CString
const CAnimProps = CString
const CCutscenePath = CString
const CFacing = Real
const TCliffLevel = Int
const CVariatorActorAngle = RealList
const CColorHDR = CColor
const CVariatorActorFangle = Real
const CFangleRate = Real
const CActorTableKeys1x3 = WordList
const CGameRate = Real
const CDescPath = Link
const C2iVector = IntList
const CColorRGB = CColor
const CUserReference = Unknown
const CMoviePath = CString
const CAssetPath = CString
const THyperlinkId = CString
const TBattleProductId = Int
const CAttachKeys = CString
const TPowerLevel = Int
const TPowerLink = CString
const CHotkeyLink = CString
const CRect = RealList
const TConversationItemId = CString
const CiRange = IntList
const CEffectOffset = RealList
const TTechAlias = CString
const TDifficultyLevel = Int
const TAIBuild = Int
const CiQuad = IntList
const CGameSpeed = Real
const CFontStylePath = CString
const CLayoutPath = CString
const TPlayerId = Int
const TMountCategory = CString
const CVariatorGameFangle = Real
const CVariatorGameFixed = Unknown // Real?
const CTimeOfDay = Unknown
const CTexturePath = CString
const CStyleName = CString
const CAnimsPath = CString
const CFacialPath = CString
const CTextureProps = WordList
const TProductHyperlinkId = CString
const TBattleLicenseName = CString
const CfQuad = RealList
const CPitchRange = Real
const CVolumeRange = RealList
const CVolume = Real
const TCatalogFieldPath = CString
const TAttackTargetPriority = Int
const C2fVector = RealList
const CTextureSlot = Unknown
const CGameAcceleration = Real
const TUnitRadius = Real
const CSyncModelDataPath = CString
const TUserFieldId = CString
const TUserInstanceId = CString
const C4Vector = RealList
const CString32 = CString
const CActorMsgPayloadPtr = 'send'
const CActorSiteOps = 'ops'
const CLabelExpression = Unknown
const CIdSetPlayers = Unknown
const CIdSetTeams = Unknown
const CSubNameKey = CString
const CAttachMethods = Unknown
const CActorClassFilters = Unknown
const CString80 = CString
const CActorDeathMembers = 'filters'
const TAttachPropIndex = Int
const TCommanderLevel = Int
const TConversationStateOpId = CString
const TConversationStateIndexId = CString
const TConversationStateVariation = CString
const CGamePoInt3D = RealList
const TConversationTag = CString
const TConversationStateInfoId = CString
const CCatalogReference = 'reference'
const TUpgradeEffectValue = CString
const CString50 = CString
const TFootprintOffsets = CString //RealArrays
const TFootprintBorders = Unknown
const CString4 = CString
const THandicap = Int
const TTriggerLibId = CString
const TCmdResult = CString
const CAssetLink = Ð¡File
const TDifficulty = Int
const CTextureExpression = Unknown
const CMissileAcceleration = Real
const CMissileSpeed = Real
const CPhaseOutro = RealList
const C3fVector = RealList
const CThrowBand = RealList
const CYawPitchRoll = Unknown
const CFangleRateMissile = Real
const CFangleAccelMissile = Real
const CSoundPath = CString
const TSoundWeight = Int
const CPitch = RealList
const TSoundBalance = Int
const TVoiceOverSkinId = CString
const TVoiceOverGroupId = CString


const CCatalogGameLink = Unknown
const CPhysicsMaterialLinks = 'physicsmaterial'
const CTechRequirementsGraph = 'requirement'



//flags
const CMarkerFlags = CArray(Bit)
const CAbilCmdFlags = CArray(Bit)
const CActorTransferFlags = CArray(Bit)
const CActorHostedPropTransferFlags = CArray(Bit)
const CNotifyAreaFlags = CArray(Bit)
const CResponseFlags = CArray(Bit)
const CDamageFlags = CArray(Bit)
const CCmdFlags = CArray(Bit)
const CAbilSharedFlagCountFlagArray =  CArray(Bit)
const CAbilEffectFlagCountFlagArray = CArray(Bit)
const CabilEffectStageCountFlagArray = CArray(Bit)
const CAbilBuildFlagCountFlagArray = CArray(Bit)
const CAbilHarvestFlagCountFlagArray = CArray(Bit)
const CResourceTypeCountFlagArray = CArray(Bit)
const CAbilHarvestStageCountFlagArray = CArray(Bit)
const CcliffLevelCompareCountFlagArray = CArray(Bit)
const CactorDoodadFlagCountFlagArray = CArray(Bit)
const CeditorFlagCountFlagArray = CArray(Bit)
const CunitStatusCountFlagArray = CArray(Bit)
const CunitStatusGroupCountFlagArray = CArray(Bit)
const CplayerRelationshipCountFlagArray = CArray(Bit)
const CartifactTypeCountFlagArray = CArray(Bit)
const CBehaviorCategoryFlags = CArray(Bit,EBehaviorCategory)
const CequipmentDisplayFlagCountFlagArray = CArray(Bit)
const CbundleFlagCountFlagArray = CArray(Bit)
const CconversationStateFlagCountFlagArray = CArray(Bit)
const CeffectRevealFlagCountFlagArray = CArray(Bit)
const CunitAttributeCountFlagArray = CArray(Bit)
const CselectionTransferFlagCountFlagArray = CArray(Bit)
const CfootprintFlagCountFlagArray = CArray(Bit)
const CplayerLeaveFlagCountFlagArray = CArray(Bit)
const CheroFlagCountFlagArray = CArray(Bit)
const CmountFlagCountFlagArray = CArray(Bit)
const CpingFlagCountFlagArray = CArray(Bit)
const CdamageResponseCategoryCountFlagArray = CArray(Bit)
const CdeathTypeCountFlagArray = CArray(Bit)
const CdamageKindCountFlagArray = CArray(Bit)
const CresponseUnitBirthTypeCountFlagArray = CArray(Bit)
const CrequirementCountFlagArray = CArray(Bit)
const CrewardFlagCountFlagArray = CArray(Bit)
const CscoreResultFlagCountFlagArray = CArray(Bit)
const CscoreValueFlagCountFlagArray = CArray(Bit)
const CtalentProfileFlagCountFlagArray = CArray(Bit)
const CtargetFindFlagCountFlagArray = CArray(Bit)
const CunitFlagCountFlagArray = CArray(Bit)
const CunitUserFlagCountFlagArray = CArray(Bit)
const CplaneCountFlagArray = CArray(Bit)
const CuserFieldFlagCountFlagArray = CArray(Bit)
const CpathingTypeCountFlagArray = CArray(Bit)
const CbehaviorModifyCountFlagArray = CArray(Bit)
const CbehaviorStateCountFlagArray = CArray(Bit)
const CunitVitalCountFlagArray = CArray(Bit,EUnitVital)
const CClassIdCAbilCountFlagArray = CArray(Bit,EClassIdCAbil)
const CclassIdCBehaviorCountFlagArray = CArray(Bit,EClassIdCBehavior)
const CattackTypeResponseCountFlagArray = CArray(Bit)
const CdamageTypeResponseCountFlagArray = CArray(Bit)
const CconversationProductionLevelFlagCountFlagArray = CArray(Bit)
const CeffectModifyTurretFlagCountFlagArray = CArray(Bit)
const CheroAbilFlagCountFlagArray = CArray(Bit)

//'FourCC'
const CFourCC = 'word'
const CCardId = 'word'
const TLocaleId = 'word'

//CatalogLinks
const CAbilCommand = 'abilcmd'

const CCatalogLink = 'word'
const CBehaviorLinkArray = 'behavior'
const CUnitLink = 'unit'
const CValidatorLink = 'validator'
const CAlertLink = 'alert'
const CEffectLink = 'effect'
const CButtonLink = 'button'
const CAbilLink = 'abil'
const CMoverLink = 'mover'
const CTargetSortLink = 'targetsort'
const CCursorLink = 'cursor'
const CItemContainerLink = 'itemcontainer'
const CItemClassLink = 'itemclass'
const CUpgradeLink = 'upgrade'
const CAccumulatorLink = 'accumulator'
const CScoreValueLink = 'scoreValue'
const CRewardLink = 'reward'
const CRaceLink = 'race'
const CAchievementTermLink = 'achievementterm'
const CAchievementLink = 'achievement'
const CPreloadLink = 'preload'
const CCameraLink = 'camera'
const CModelLink = 'model'
const CWeaponLink = 'weapon'
const CSoundLink = 'sound'
const CBeamLink = 'beam'
const CTerrainLink = 'terrain'
const CFootprintLink = 'footprint'
const CActorLink = 'actor'
const CHerdNodeLink = 'herdnode'
const CArmyUnitLink = 'armyunit'
const CArmyUpgradeLink = 'armyupgrade'
const CSkinLink = 'skin'
const CTalentLink = 'talent'
const CItemLink = 'item'
const CPlayerResponseLink = 'playerresponse'
const CBankConditionLink = 'bankcondition'
const CBoostLink = 'boost'
const CCliffMeshLink = 'cliffmesh'
const CCampaignLink = 'campaign'
const CConsoleSkinLink = 'consoleskin'
const CDataCollectionLink = 'datacollection'
const CCommanderLink = 'commander'
const CConversationStateLink = 'conversationstate'
const CCharacterLink = 'character'
const CDataCollectionPatternLink = 'datacollectionpattern'
const CKineticLink = 'kinetic'
const CEmoticonLink = 'emoticon'
const CBundleLink = 'bundle'
const CScoreResultLink = 'scoreresult'
const CSoundtrackLink = 'soundtrack'
const CDSPLink = 'dsp'
const CHeroStatLink = 'herostat'
const CMountLink = 'mount'
const CTalentProfileLink = 'talentprofile'
const CMapLink = 'map'
const CBehaviorLink = 'behavior'
const CArmyCategoryLink = 'armycategory'
const CLocationLink = 'location'
const CObjectiveLink = 'objective'
const CLightLink = 'light'
const CPhysicsMaterialLink = 'physicsmaterial'
const CConversationLink = 'conversation'
const CRequirementNodeLink = 'requirementnode'
const CHeroLink = 'hero'
const CDecalPackLink = 'decalpack'
const CTextureLink = 'texture'
const CSprayLink = 'spray'
const CPortraitPackLink = 'portraitpack'
const CTrophyLink = 'trophy'
const CVoicePackLink = 'voicepack'
const CRaceBannerPackLink = 'racebannerpack'
const CStimPackLink = 'stimpack'
const CSoundExclusivityLink = 'soundexclusivity'
const CSoundMixSnapshotLink = 'soundmixsnapshot'
const CTargetFindLink = 'targetfind'
const CTacticalLink = 'tactical'
const CReverbLink = 'teverb'
const CTerrainTexLink = 'terraintex'
const CTileLink = 'tile'
const CCliffLink = 'cliff'
const CTurretLink = 'turret'
const CLootLink = 'loot'
const CUserLink = 'user'
const CShapeLink = 'shape'
const CTextureSheetLink = 'texturesheet'
const CHeroAbilLink = 'heroabil'



// -------------------------------
// Strctures
// -------------------------------

const SAbilOrderDisplay = {
    DisplayType: EAbilOrderDisplayType,
    Color: CColor,
    Model: CModelPath,
    Scale: real32,
    LineTexture: CImagePath,
}
const SEffectBehavior = {
    Behavior: CBehaviorLink,
    Count: UInt32,
    Flags: CArray(Bit),
    Duration: CGameTime,
}

const SCooldown = {
    Link: TCooldownLink,
    Location: ECooldownLocation,
    TimeStart: CGameTime,
    Operation: ECooldownOperation,
    TimeUse: CGameTime,
}
const SCharge = {
    CountMax: Real,
    CountStart: Real,
    CountUse: Real,
    HideCount: Bit,
    Link: TChargeLink,
    Location: EChargeLocation,
    TimeDelay: CGameTime,
    TimeStart: CGameTime,
    TimeUse: CGameTime,
    Flags: CArray(Bit),
}
const SCost = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital:  CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
}
const SCostFactor = {
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Resource: CArray(Real,EResourceType),
    Charge: Real,
    Cooldown: Real,
}
const STargetSorts = {
    SortArray: CArray(CTargetSortLink),
    RequestCount: UInt32,
    RequestPercentage: Real,
}
const SMarker = {
    Count: TMarkerCount,
    Duration: CGameTime,
    MatchFlags: CMarkerFlags,
    MismatchFlags: CMarkerFlags,
    Link: TMarkerLink,
}
const SAbilTargetCursorInfo = {
    Invalid: CCursorLink,
    Normal: CCursorLink,
    Allied: CCursorLink,
    Enemy: CCursorLink,
}
const SAbilCmdButton = {
    AutoQueueId: CIdentifier,
    DefaultButtonFace: CButtonLink,
    Flags: CAbilCmdFlags,
    State: EAbilCmdState,
    Requirements: CTechRequirementsGraph,
    PreemptLevel: TPreemptLevel,
}
const SAbilArmMagazineInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Button: SAbilCmdButton,
    Time: CGameTime,
    Alert: CAlertLink,
    Count: UInt32,
    CountStart: UInt32,
    Distance: Real,
    Flags: CArray(Bit),
    Manage: EAbilArmMagazineManage,
    Unit: CUnitLink,
}
const SAbilBuildInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Button: SAbilCmdButton,
    Unit: CUnitLink,
    Delay: CGameTime,
    Time: CGameTime,
    Alert: CAlertLink,
    ValidatorArray: CArray(CValidatorLink),
    AddOnParentCmdPriority: Int32,
    PeonKillFinish: Bit,
}
const SAbilInventoryInfo = {
    Alignment: EAbilInventoryAlignment,
    Container: CItemContainerLink,
    Item: CUnitLink,
    EmptyFace: CButtonLink,
    Classes: CArray(CItemClassLink),
    Requirements: CTechRequirementsGraph,
}

const SAbilLearnInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Button: SAbilCmdButton,
    Time: CGameTime,
    Alert: CAlertLink,
    Abil: CAbilLink,
    VeterancyLevelMin: UInt32,
    VeterancyLevelSkip: UInt32,
}
const SAbilMergeInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Unit: CUnitLink,
    Time: CGameTime,
}
const SAbilMorphSection = {
    DurationArray: CArray(CGameTime),
    UseBuildTimeArray: CArray(Bit),
    EffectArray: CArray(CEffectLink),
}
const SAbilMorphInfo = {
    Score: Bit,
    Unit: CUnitLink,
    CollideRange: Real,
    SectionArray: CArray(SAbilMorphSection),
    RallyResetPhase: EAbilMorphPhase,
    RallyResetSection: EAbilMorphSection,
    RandomDelayMin: CGameTime,
    RandomDelayMax: CGameTime,
}

const SAbilPawnInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Button: SAbilCmdButton,
    ClassRequired: CItemClassLink,
    ClassesExcluded: CArray(CItemClassLink),
    RefundFraction: CArray(Real),
    TargetFilters: CTargetFilters,
    ValidatorArray: CArray(CValidatorLink),
}
const SAbilRallyInfo = {
    AllowSetOnGround: Bit,
    AllowSetFilters: CTargetFilters,
    AllowSetValidators: CArray(CValidatorLink),
    SetOnGround: Bit,
    SetFilters: CTargetFilters,
    SetValidators: CArray(CValidatorLink),
    UseFilters: CTargetFilters,
    UseValidators: CArray(CValidatorLink),
}
const SAbilResearchInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Button: SAbilCmdButton,
    Time: CGameTime,
    Alert: CAlertLink,
    Upgrade: CUpgradeLink,
}
const SAbilReviveCmdButton = {
    AutoQueueId: CIdentifier,
    DefaultButtonFace: CButtonLink,
    Flags: CAbilCmdFlags,
    State: EAbilCmdState,
    Requirements: CTechRequirementsGraph,
    PreemptLevel: TPreemptLevel,
    ReviverIndex: UInt32,
    ValidatorArray: CArray(CValidatorLink),
}
const SAbilReviveInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Time: CGameTime,
    Alert: CAlertLink,
}
const SAbilReviveInfoMax = {
    ResourceFactor: CArray(Real),
    TimeFactor: Real,
    Resource: CArray(Int32,EResourceType),
    Time: CGameTime,
}
const SAbilSpecializeInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Button: SAbilCmdButton,
    Time: CGameTime,
    Alert: CAlertLink,
    Effect: CEffectLink,
    Flags: CArray(Bit),
}
const SAbilTrainInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Button: SAbilCmdButton,
    Time: CGameTime,
    Alert: CAlertLink,
    Unit: CArray(CUnitLink),
    Effect: CEffectLink,
    Location: EAbilTrainLocation,
    Rotation: EAbilTrainRotation,
    Flags: CArray(Bit),
}

const SAbilWarpTrainInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Button: SAbilCmdButton,
    Time: CGameTime,
    Alert: CAlertLink,
    Unit: CUnitLink,
}



const SEffectWhichUnit = {
    Effect: CEffectLink,
    Value: EEffectUnit,
    History: EEffectHistory,
}
const SEffectWhichLocation = {
    Effect: CEffectLink,
    Value: EEffectLocation,
    History: EEffectHistory,
}
const SEffectWhichBehavior = {
    Effect: CEffectLink,
    Value: EEffectUnit,
    History: EEffectHistory,
    Behavior: CBehaviorLink,
}
const SAccumulatorSwitchCase = {
    Validator: CValidatorLink,
    Accumulator: CAccumulatorLink,
    FallThrough: Bit,
}


const SAccumulatedFixed = {
    AccumulatorArray: CArray(CAccumulatorLink),
}
const SAccumulatedUInt32 = {
    AccumulatorArray: CArray(CAccumulatorLink),
}
const SAccumulatedGameRate = {
    AccumulatorArray: CArray(CAccumulatorLink),
}
const SAccumulatedGameTime = {
    AccumulatorArray: CArray(CAccumulatorLink),
}

const SEffectWhichPlayer = {
    Effect: CEffectLink,
    Value: EEffectPlayer,
}



const SAchievementTag = {
    Value: CFourCC,
    Check: EAchievementTagCheck,
}




const SActorRequest = {
    Subject: CRefKey,
    Scope: EActorRequestScope,
    Actor: EActorRequestActor,
    Effect: CEffectLink,
    FailOnNoHost: Bit,
    ReachAcrossEffectTrees: Bit,
}
const SActorVisibilityShape = {
    Shape: CShapeLink,
}
const SActorEvent = {
    Terms: CActorTerms,
    Target: CRefKey,
    Send: CActorMsgPayloadPtr,
}
const SActorSiteOpsData = {
    Ops: CActorSiteOps,
    HoldPosition: Bit,
    HoldRotation: Bit,
}
const SActorModelAspect = {
    Person: EActorModelAspectPerson,
    ObservingPoV: EActorModelAspectObservingPoV,
    RegardsAs: EActorModelAspectRegardsAs,
    During: EActorModelAspectDuring,
    LabelExpression: CLabelExpression,
    ObservedPlayerType: EActorModelAspectObservedPlayerType,
    ObservedPlayerHasPlayerId: CIdSetPlayers,
    ObservedPlayerHasTeamId: CIdSetTeams,
    ModelOwnerType: EActorModelAspectModelOwnerType,
    ModelOwnerHasPlayerId: CIdSetPlayers,
    ModelOwnerHasTeamId: CIdSetTeams,
    ModelOwnerLabelExpression: CLabelExpression,
    Test: EActorModelAspectTest,
    Model: CModelLink,
    Name: CSubNameKey,
}

const SActorModelAspectSet = {
    TriggerModel: CModelLink,
    Aspects: CArray(SActorModelAspect),
}


const SAttachQuery = {
    Methods: CAttachMethods,
    Fallback: EAttachKeyword,
}
const SActorHostedAttach = {
    Name: CActorLabelKey,
    AttachQuery: SAttachQuery,
    HostSiteOps: SActorSiteOpsData,
}
const SEventDataFootprint = {
    Name: CActorLabelKey,
    Actor: CActorCreateKey,
    Model: CModelLink,
}
const SEventDataSound = {
    Name: CActorLabelKey,
    Actor: CActorCreateKey,
    Sound: CSoundLink,
}
const SActorPhysicsImpactData = {
    Name: CActorLabelKey,
    Group: CActorLabelKey,
    ActorModel: CActorCreateKey,
    ModelLink: CModelLink,
    ActorSound: CActorCreateKey,
    SoundLink: CSoundLink,
    AutoVolumeRange: EActorPhysicsImpactRangeType,
    AutoVolumeRangeMin: real32,
    AutoVolumeRangeMax: real32,
    SiteOps: SActorSiteOpsData,
    OccuranceThrottlingDistance: CVariatorActorReal32,
    OccuranceThrottlingDistanceTimeout: real32,
    OccuranceThrottlingPeriod: CVariatorActorReal32,
}
const SActorRangeAbil = {
    Link: CAbilLink,
    Index: TAbilCmdIndex,
}
const SActorQuadDecoration = {
    Actor: CActorCreateKey,
    SpawnInterval: real32,
    TravelSpeed: real32,
    TravelFunction: EActorQuadDecorationFunction,
    TravelFunctionParam: real32,
    Flags: CArray(Bit),
}
const SActorSoundLayer = {
    Sound: CSoundLink,
    Chance: CArray(UInt8),
    Pitch: CArray(CPitchRange),
    PitchSource: EActorSoundValueSource,
    PlayDelay: CArray(CiRange),
    PlayDelaySource: EActorSoundValueSource,
    Volume: CArray(CVolumeRange),
    VolumeSource: EActorSoundValueSource,
}
const SActorAVPair = {
    Model: CModelLink,
    Scale: CScaleVector,
    AnimProps: CAnimProps,
    Sound: CSoundLink,
}
const SActorActionTerrainSquib = {
    Model: CModelLink,
    Scale: CScaleVector,
    AnimProps: CAnimProps,
    Sound: CSoundLink,
    TerrainPhysicsMaterial: CPhysicsMaterialLinks,
    DistanceMaxFromTerrainToCreate: real32,
}
const SActorAVCluster = {
    Model: CModelLink,
    Scale: CScaleVector,
    AnimProps: CAnimProps,
    Sound: CSoundLink,
    ModelReaction: CModelLink,
    AnimPropsReaction: CAnimProps,
    ScaleReaction: CScaleVector,
}
const SActorPhysicsData = {
    Name: CActorLabelKey,
    MatchKeys: CActorTableKeys1x3,
    AttackModelVariation: Int32,
    AttackAnimProps: CAnimProps,
    Physics: CActorCreateKey,
    Flags: CArray(Bit),
}
const SActorQuerySubject = {
    Filters: CActorClassFilters,
    Terms: CActorTerms,
}
const SActorQueryResponse = {
    Target: CRefKey,
    Send: CActorMsgPayloadPtr,
    Scope: EActorResponseScope,
}
const SActorSendBasics = {
    Target: CRefKey,
    Send: CActorMsgPayloadPtr,
}
const SActorQuerySubjectResponse = {
    Filters: CActorClassFilters,
    IntersectType: EActorIntersectType,
    Terms: CActorTerms,
    OnResponse: CArray(SActorSendBasics),
}
const SActorDeathBodySquib = {
    Name: CActorLabelKey,
    ActorModel: CActorCreateKey,
    Model: CModelLink,
    ModelSiteOps: SActorSiteOpsData,
    ModelAttachQuery: SAttachQuery,
    ActorSound: CActorCreateKey,
    Sound: CSoundLink,
    SoundSiteOps: SActorSiteOpsData,
    SoundAttachQuery: SAttachQuery,
    RequiredSquibType: ESquibType,
    IsFallback: Bit,
}
const SActorCloakState = {
    Enter: CAnimProps,
    Loop: CAnimProps,
}
const SActorCloakTransition = {
    StateArray: CArray(SActorCloakState),
}
const SActorCreepHeightClass = {
    Name: CActorLabelKey,
    StartOffset: real32,
    SolidHeight: real32,
    FadeHeight: real32,
}
const SActorCreepRate = {
    Name: CActorLabelKey,
    Rate: real32,
}

const SActorDeathData = {
    ActorModel: CActorCreateKey,
    ActorModelLow: CActorCreateKey,
    AnimProps: CAnimProps,
    ModelLink: CModelLink,
    SoundLink: CSoundLink,
    VoiceLink: CSoundLink,
    BodySquibs: CArray(SActorDeathBodySquib),
}
const SActorDeathDataCustom = {
    ActorModel: CActorCreateKey,
    ActorModelLow: CActorCreateKey,
    AnimProps: CAnimProps,
    ModelLink: CModelLink,
    SoundLink: CSoundLink,
    VoiceLink: CSoundLink,
    BodySquibs: CArray(SActorDeathBodySquib),
    Name: CActorLabelKey,
    PhysicsMatchKeysOrdered: CActorTableKeys1x3,
    InheritsFrom: CActorLabelKey,
    IsAbstract: Bit,
}
const SLookAtTypeInfo = {
    Group: CActorKey,
    Weight: Real,
    Time: UInt32,
    Rate: CActorAngle,
}
const SLookAtType = {
    Id: CString80,
    Name: CStringLink,
    Start: CArray(SLookAtTypeInfo),
    Stop: CArray(SLookAtTypeInfo),
}
const SSplatEmitterMaterialInfo = {
    MaterialId: UInt8,
    ReplacementLayers: CArray(Bit),
}
const SSplatEmitterInitInfo = {
    TextureResolution: C2iVector,
    ProjectorModel: CModelLink,
    MaskBlobPath: CImagePath,
    ScaleDeltaTime: C2Vector,
    ScaleUpdateTime: Real,
    MaxBlobScale: C2Vector,
    Tint: CColor,
    MaterialInfo: CArray(SSplatEmitterMaterialInfo),
    TerrainUVTiling: C4Vector,
    MinHeightValue: real32,
}
const SActorOverrideBlendTime = {
    AnimProps: CAnimProps,
    BlendIn: real32,
    BlendOut: real32,
}
const SActorOverrideTransitionBlendTime = {
    Type: EActorAnimTransitionType,
    From: CAnimProps,
    FromMatch: EActorAnimPropMatchType,
    To: CAnimProps,
    ToMatch: EActorAnimPropMatchType,
    Blend: real32,
}
const SActorOverrideModel = {
    Model: CArray(CModelLink),
    Blend: CArray(SActorOverrideBlendTime),
    Transition: CArray(SActorOverrideTransitionBlendTime),
}
const SActorProgressStage = {
    AnimProps: CAnimProps,
    BlendTime: real32,
    Sound: CSoundLink,
}
const SActorHostedDelta = {
    Subject: CRefKey,
    LocalOffset: C3Vector,
    AttachQuerySource: SAttachQuery,
    AttachQueryTarget: SAttachQuery,
}
const SSerpentAggregate = {
    Type: ESerpentType,
    BaseElementLengthMax: real32,
    SegmentRotationRate: CActorAngle,
    SwimmingUndulationElementLength: real32,
    SwimmingUndulationStartOffset: real32,
    SwimmingUndulationAmplitudePerUnit: real32,
    SwimmingUndulationWavelength: real32,
    SwimmingUndulationIdlePhaseVelocity: real32,
    TurnSmoothingActivationAngleMin: CActorAngle,
    TurnSmoothingActivationAngleMax: CActorAngle,
    TurnSmoothingRadiusMax: real32,
    UncoilingWhileIdleRotationRateMin: CActorAngle,
    UncoilingWhileIdleRotationRateMax: CActorAngle,
    Flags: CArray(Bit),
}
const SSerpentSegment = {
    Radius: real32,
}
const SActorStateInfo = {
    Name: CActorLabelKey,
    Terms: CActorTerms,
}
const SActorBaseline = {
    AnimProps: CAnimProps,
    BlendIn: real32,
    BlendOut: real32,
}
const SActorDeathDataCustomGroup = {
    Name: CActorLabelKey,
    Members: CActorDeathMembers,
    Supersedes: CActorTableKeys1x3,
    SyncPassChance: Real,
}
const SActorUnitImpactSoundExtras = {
    TriggerModel: CModelLink,
    SoundActor: CActorCreateKey,
    Sound: CSoundLink,
}
const SDamagePastRemainingHealth = {
    Value: Real,
    TestType: EActorOverkillTestType,
}
const SDamageOverInterval = {
    Value: Real,
    Interval: Real,
    TestType: EActorOverkillTestType,
}
const STerrainSquibVisual = {
    TerrainPhysicsMaterial: CPhysicsMaterialLink,
    ActorModel: CActorCreateKey,
    ActorModelLow: CActorCreateKey,
    ModelLink: CModelLink,
    Flags: CArray(Bit),
}
const STerrainSquib = {
    GroupName: CActorLabelKey,
    AttachQuery: SAttachQuery,
    MovementDistance: CVariatorActorReal32,
    IdlePeriod: CVariatorActorReal32,
    RangeUp: real32,
    RangeUpFade: real32,
    RangeDown: real32,
    RangeDownFade: real32,
    Visuals: CArray(STerrainSquibVisual),
}
const SUnitAbilSound = {
    AbilCmd: CAbilCommand,
    Sound: CSoundLink,
    GroupSound: CSoundLink,
}
const SErrorOverride = {
    Error: ECmdResult,
    Text: CStringLink,
    Sound: CSoundLink,
    GroupSound: CSoundLink,
}
const SLayerIcon = {
    Image: CArray(CImagePath),
}
const SLayerIconVariation = {
    Image: CArray(CImagePath),
    Number: Int32,
}
const SLayerIconShield = {
    Image: CArray(CImagePath),
}
const SLayerIconShieldVariation = {
    Image: CArray(CImagePath),
    Number: UInt32,
}
const SVitalColor = {
    ColorArray: CArray(CColor),
}
const SIconVariation = {
    Number: UInt32,
    Image: CImagePath,
}
const SStatusColor = {
    BackgroundColor: CColor,
    EmptyColor: CColor,
    ColorArray: CArray(CColor),
}
const SStatusChargeData = {
    Text: CStringLink,
    AbilCmd: CAbilCommand,
}
const SStatusHarvesterData = {
    Text: CStringLink,
    SearchFilters: CTargetFilters,
    SearchRadius: Real,
}
const STextTagParameters = {
    Text: CStringLink,
    TextShadow: Bit,
    Offset: C2iVector,
    Attachment: EAttachmentID,
    FontSize: UInt32,
    TextColor: CColor,
    EdgeColor: CColor,
    BackgroundColor: CColor,
    BackgroundImage: CImagePath,
    BackgroundImageTiled: Bit,
}
const SUnitKillRank = {
    MinKills: UInt32,
    Text: CStringLink,
}

const SBankPath = {
    Ð¡File: CString,
    Section: CString,
    Key: CString,
}
const SArtifactRank = {
    RequiredRewardArray: CArray(CRewardLink),
    ProductId: TBattleProductId,
}
const SHeroReleaseDate = {
    Month: UInt32,
    Day: UInt32,
    Year: UInt32,
}
const SAttachKey = {
    Keyword: EAttachKeyword,
    Index: TAttachPropIndex,
}





const SDeathResponse = {
    Chance: Real,
    Cost: SCost,
    Effect: CEffectLink,
    Relationship: CplayerRelationshipCountFlagArray,
    Type: CdeathTypeCountFlagArray,
}
const SAttributeChange = {
    Attribute: CBehaviorLink,
    Points: Int32,
}



const SDamageKind = {
    KindArray: CArray(Real),
}
const SScoreValueUpdate = {
    Validator: CValidatorLink,
    Value: CScoreValueLink,
}
const SUnitResourceRatio = {
    Amount: CArray(Real,EResourceType),
}
const SUnitWeaponData = {
    Link: CWeaponLink,
    Turret: CTurretLink,
}


const SModification = {
    ModifyFlags: CbehaviorModifyCountFlagArray,
    StateFlags: CbehaviorStateCountFlagArray,
    AttackTargetPriority: TAttackTargetPriority,
    RadiusMultiplier: Real,
    Height: Real,
    HeightTime: CArray(CGameTime),
    SightBonus: Real,
    SightMaximum: Real,
    SightMinimum: Real,
    QueueCount: Int32,
    QueueSize: Int32,
    TimeScale: Real,
    HealDealtMultiplier: Real,
    HealTakenMultiplier: Real,
    HealDealtAdditiveMultiplier: Real,
    HealTakenAdditiveMultiplier: Real,
    MoveSpeedBaseMaximumBonus: CGameSpeed,
    MoveSpeedMaximum: CGameSpeed,
    MoveSpeedMinimum: CGameSpeed,
    MoveSpeedBonus: CGameSpeed,
    MoveSpeedMultiplier: Real,
    UnifiedMoveSpeedFactor: Real,
    AdditiveMoveSpeedFactor: SAccumulatedFixed,
    AccelerationBonus: CGameAcceleration,
    AccelerationMultiplier: Real,
    DecelerationBonus: CGameAcceleration,
    DecelerationMultiplier: Real,
    SnareMultiplier: Real,
    AttackSpeedMultiplier: Real,
    UnifiedAttackSpeedFactor: Real,
    AdditiveAttackSpeedFactor: SAccumulatedFixed,
    WeaponRange: Real,
    MeleeWeaponRange: Real,
    RangedWeaponRange: Real,
    WeaponMinRange: Real,
    DamageDealtScaled: CArray(Real,EDamageKind),
    DamageDealtFraction: CArray(SAccumulatedFixed,EDamageKind),
    DamageDealtUnscaled: CArray(SAccumulatedFixed,EDamageKind),
    DamageDealtMaximum: CArray(Real,EDamageKind),
    DamageDealtMinimum: CArray(Real,EDamageKind),
    DamageDealtAttributeScaled: CArray(Real,EUnitAttribute),
    DamageDealtAttributeMultiplier: CArray(Real,EUnitAttribute),
    DamageDealtAttributeUnscaled: CArray(Real,EUnitAttribute),
    DamageTakenScaled: CArray(Real,EDamageKind),
    DamageTakenFraction: CArray(Real,EDamageKind),
    DamageTakenUnscaled: CArray(Real,EDamageKind),
    DamageTakenMaximum: CArray(Real,EDamageKind),
    DamageTakenMinimum: CArray(Real,EDamageKind),
    DamageTotalMultiplier: CArray(Real,EDamageKind),
    UnifiedDamageDealtFraction: CArray(Real,EDamageKind),
    UnifiedDamageTakenFraction: CArray(Real,EDamageKind),
    LifeArmorBonus: SAccumulatedFixed,
    LifeArmorMultiplier: Real,
    ShieldArmorBonus: Real,
    ShieldArmorMultiplier: Real,
    EnergyArmorBonus: Real,
    EnergyArmorMultiplier: Real,
    ShieldDamageRatioBonus: Real,
    ShieldDamageRatioMultiplier: Real,
    EnergyDamageRatioBonus: SAccumulatedFixed,
    EnergyDamageRatioMultiplier: Real,
    ResourceHarvestAmountBonus: CArray(UInt32,EResourceType),
    ResourceHarvestAmountMultiplier: CArray(Real,EResourceType),
    ResourceHarvestTimeBonus: CArray(CGameTime,EResourceType),
    ResourceHarvestTimeMultiplier: CArray(Real,EResourceType),
    VitalMaxIncreaseAffectsCurrentArray: CunitVitalCountFlagArray,
    VitalMaxDecreaseAffectsCurrentArray: CunitVitalCountFlagArray,
    VitalMaxArray: CArray(Real,EUnitVital),
    VitalMaxFractionArray: CArray(Real,EUnitVital),
    VitalMaxAdditiveMultiplierArray: CArray(Real,EUnitVital),
    VitalRegenArray: CArray(SAccumulatedGameRate,EUnitVital),
    VitalRegenMultiplier: CArray(Real,EUnitVital),
    VitalDamageGainArray: CArray(SDamageKind,EUnitVital),
    VitalDamageGainScoreArray: CArray(SScoreValueUpdate,EUnitVital),
    VitalDamageLeechArray: CArray(SDamageKind,EUnitVital),
    VitalDamageLeechScoreArray: CArray(SScoreValueUpdate,EUnitVital),
    ResourceDamageLeech: CArray(SUnitResourceRatio,EDamageKind),
    AbilCategoriesEnable: CArray(Bit),
    AbilCategoriesDisable: CArray(Bit),
    AbilClassEnableArray: CClassIdCAbilCountFlagArray,
    AbilClassDisableArray: CClassIdCAbilCountFlagArray,
    AbilTechAliasEnableArray: CArray(TTechAlias),
    AbilTechAliasDisableArray: CArray(TTechAlias),
    AbilLinkEnableArray: CArray(CAbilLink),
    AbilLinkDisableArray: CArray(CAbilLink),
    BehaviorCategoriesEnable: CBehaviorCategoryFlags,
    BehaviorCategoriesDisable: CBehaviorCategoryFlags,
    BehaviorCategoryDurationFactor: CArray(Real,EBehaviorCategory),
    BehaviorClassEnableArray: CclassIdCBehaviorCountFlagArray,
    BehaviorClassDisableArray: CclassIdCBehaviorCountFlagArray,
    BehaviorLinkEnableArray: CArray(CBehaviorLink),
    BehaviorLinkDisableArray: CArray(CBehaviorLink),
    WeaponArray: CArray(SUnitWeaponData),
    WeaponScanBonus: Real,
    WeaponScanLimit: Real,
    WeaponEnableArray: CArray(CWeaponLink),
    WeaponDisableArray: CArray(CWeaponLink),
    TurretEnableArray: CArray(CTurretLink),
    TurretDisableArray: CArray(CTurretLink),
    SoundArray: CArray(CSoundLink,ESoundCategory),
    Detect: Real,
    DetectArc: CFangleArc,
    DetectBonus: Real,
    DetectFilters: CTargetFilters,
    Radar: Real,
    RadarArc: CFangleArc,
    RadarFilters: CTargetFilters,
    Food: Real,
    AttributeChangeArray: CArray(SAttributeChange),
    RateMultiplierArray: CArray(Real),
    DeathResponse: SDeathResponse,
    PlaneDelta: CArray(Int8,EPlane),
    ScoreKillBonus: Int32,
    ScoreLostBonus: Int32,
    SubgroupPriority: Int16,
    UnitNameOverride: CStringLink,
    XPMultiplier: Real,
    XPScaledBonus: Real,
    XPUnscaledBonus: Real,
    KillXPBonus: Int32,
    CriticalAttackChanceMultiplier: Real,
    CriticalAttackChanceScaledBonus: Real,
    CriticalAttackChanceUnscaledBonus: Real,
}
const SVeterancyLevel = {
    InfoIcon: CImagePath,
    MinVeterancyXP: UInt32,
    Modification: SModification,
    LevelGainEffect: CEffectLink,
    LevelLossEffect: CEffectLink,
    RankNameSchema: CStringLink,
}
const SBehaviorFraction = {
    Fraction: SAccumulatedFixed,
    TargetFilters: CTargetFilters,
}
const SEffectWhichTimeScale = {
    Effect: CEffectLink,
    Value: EEffectTimeScale,
}
const SBehaviorDuration = {
    Duration: SAccumulatedGameTime,
    ValidatorArray: CArray(CValidatorLink),
}



const SDamageResponse = {
    ClampMaximum: Real,
    ClampMinimum: Real,
    Exhausted: CEffectLink,
    Evade: Bit,
    Fatal: Bit,
    Handled: CEffectLink,
    Ignore: CArray(Real),
    Kind: CdamageKindCountFlagArray,
    Location: EDamageLocation,
    Maximum: Real,
    Minimum: Real,
    ModifyAmount: SAccumulatedFixed,
    ModifyFraction: Real,
    ModifyLimit: Real,
    ModifyLimitVitalMaxFractionArray: CArray(Real,EUnitVital),
    ModifyMinimumDamage: Bit,
    TargetFilters: CTargetFilters,
    RequireEffectArray: CArray(CEffectLink),
    ExcludeEffectArray: CArray(CEffectLink),
    RequireEffectInChainArray: CArray(CEffectLink),
    ExcludeEffectInChainArray: CArray(CEffectLink),
    ValidatorArray: CArray(CValidatorLink),
    DamageValue: EDamageResponseDamageValue,
    ModifyScoreArray: CArray(SScoreValueUpdate),
    Priority: Int8,
    ProvideCategories: CdamageResponseCategoryCountFlagArray,
    PreventCategories: CdamageResponseCategoryCountFlagArray,
    BlockChance: SAccumulatedFixed,
    DeflectChance: SAccumulatedFixed,
    MissingChance: SAccumulatedFixed,
    Chance: SAccumulatedFixed,
    Cost: SCost,
    AttackType: CattackTypeResponseCountFlagArray,
    DamageType: CdamageTypeResponseCountFlagArray,
    HandledValue: EDamageResponseHandledValue,
}
const SVitalRegenVitalRemain = {
    AmountMissing: Real,
    RegenModification: CGameRate,
}
const SAbilReplace = {
    Origin: CAbilLink,
    New: CAbilLink,
}
const SAbilAdd = {
    Abil: CAbilLink,
    OverrideCardId: Bit,
    CardId: CFourCC,
}
const SPowerStage = {
    MaxStackCount: UInt32,
    MinPowerLevel: TPowerLevel,
    Modification: SModification,
    LevelGainEffect: CEffectLink,
    LevelLossEffect: CEffectLink,
    AbilReplace: CArray(SAbilReplace),
    AbilAdd: CArray(SAbilAdd),
}
const SSpawnInfo = {
    Unit: CUnitLink,
    Count: UInt32,
    MaxCount: UInt32,
    StartCount: UInt32,
    Requirements: CTechRequirementsGraph,
    Delay: CGameTime,
    Effect: CEffectLink,
}
const STooltipBlock = {
    Validator: CValidatorLink,
    Text: CStringLink,
    Face: CButtonLink,
}
const STooltipTimeAbilCmd = {
    AbilCmd: CAbilCommand,
}
const SButtonCardLayout = {
    Row: UInt8,
    Column: UInt8,
    CardId: CFourCC,
}



const SCameraParam = {
    Modify: Bit,
    Value: real32,
}
const SCameraZoom = {
    Param: CArray(SCameraParam),
}
const SCameraSmooth = {
    SmoothTimeMin: real32,
    SmoothTimeMax: real32,
    DisplacementMin: real32,
    VelocityMax: real32,
}

const SMovieConfig = {
    Name: CStringLink,
    Path: CMoviePath,
    Source: CIdentifier,
}
const SCampaignData = {
    Id: CString,
    Name: CStringLink,
    Subtitle: CStringLink,
    Description: CStringLink,
    ImagePath: CImagePath,
    LaunchMap: CString,
    ProgressLaunchMap: CString,
    TutorialMap: CString,
    SaveName: CString,
    CompletedSaveName: CString,
    PublishArchiveName: CString,
    ProgressAchievement: CAchievementLink,
    Movie: SMovieConfig,
    CampaignBanks: CArray(CString),
    TransitionBanks: CArray(CString),
    ShowArchivesButton: Bit,
    ArchiveDisabledTooltip: CStringLink,
    PrerequisiteCampaignId: CString,
    PrerequisitesNotMetTooltip: CStringLink,
    PromoProduct: TBattleProductId,
    PromoPurchaseWarningTitle: CStringLink,
    PromoPurchaseWarningMessage: CStringLink,
    PromoText: CStringLink,
    PromoTextCN: CStringLink,
    CinematicsImagePath: CImagePath,
    StorySoFarImagePath: CImagePath,
    StorySoFarMovie: SMovieConfig,
    SubPanelImage: CImagePath,
    SubPanelName: CStringLink,
    UnavailableMessageNotPurchased: CStringLink,
    UnavailableMessagePreReleaseOwned: CStringLink,
    UnavailableMessagePreReleaseNotOwned: CStringLink,
    CompletedCampaignImagePath: CImagePath,
    FeaturedImagePath: CImagePath,
    FeaturedDescription: CStringLink,
}
const SCharacterVariation = {
    Name: CStringLink,
    Model: CModelLink,
    Actor: CActorLink,
    DefaultCategories: CArray(CString),
}
const SUIColorEntry = {
    Value: CArray(C4Vector),
}



const SCommanderUnit = {
    Unit: CUnitLink,
    Upgrade: CUnitLink,
}
const SCommanderTalentTree = {
    Talent: CTalentLink,
    Unit: CUnitLink,
    Level: TCommanderLevel,
    Type: ECommanderTalentType,
    IsHidden: Bit,
}
const SCommanderMasteryTalent = {
    Talent: CTalentLink,
    ValuePerRank: real32,
    MaxRank: UInt32,
    Type: ECommanderMasteryTalentType,
    Bucket: UInt32,
    MinValuePrecision: UInt32,
    MaxValuePrecision: UInt32,
}
const SCommanderAbil = {
    Abil: CAbilLink,
    Button: CButtonLink,
}



const SCommanderDifficultyLevel = {
    DifficultyLevel: TDifficultyLevel,
    CommanderLevel: TCommanderLevel,
    Name: CStringLink,
    Description: CStringLink,
    BonusModifier: UInt32,
    IsDefault: Bit,
    Icon: CImagePath,
    AISkillLevel: TDifficultyLevel,
    BeyondBrutalLevel: UInt8,
    RequirePartyToQueue: Bit,
    IsRetry: Bit,
}
const SConsoleSkinModel = {
    Model: CString,
    Position: C3Vector,
    Scale: C3Vector,
}



const SConversationUserValue = {
    Type: CUserLink,
    Field: TUserFieldId,
    Index: Int32,
    Instance: TUserInstanceId,
}
const SConversationCondition = {
    FixedId: TConversationStateOpId,
    State: CConversationStateLink,
    Index: TConversationStateIndexId,
    User: SConversationUserValue,
    Operation: EConversationConditionOp,
    Value: Int32,
}
const SConversationProductionLevel = {
    SubtitlePrefix: CString,
    Flags: CconversationProductionLevelFlagCountFlagArray,
}
const SConversationConditionSet = {
    Conditions: CArray(SConversationCondition),
    Text: CStringLink,
}

const SConversationAction = {
    FixedId: TConversationStateOpId,
    State: CConversationStateLink,
    Index: TConversationStateIndexId,
    User: SConversationUserValue,
    Operation: EConversationActionOp,
    Value: Int32,
}
const SConversationActionSet = {
    Actions: CArray(SConversationAction),
    Text: CStringLink,
}

const SConversationFacialAnim = {
    Id: TConversationItemId,
    Text: CStringLink,
    SpeechTag: CString,
    SpeechAtts: CString,
    AnimTag: CString,
    AnimAtts: CString,
}



const SConversationLine = {
    Id: TConversationItemId,
    Text: CStringLink,
    Comment: CString,
    FacialAnim: TConversationItemId,
    FacialBlend: UInt32,
    FacialAsVoiceDir: Bit,
    Sound: CSoundLink,
    SoundIndex: Int32,
    FixedDuration: UInt32,
    NoWait: Bit,
    OverlapPrevious: UInt32,
    AnimProps: CAnimProps,
    AnimBlendIn: Int32,
    AnimBlendOut: Int32,
    LookAtType: CString,
    LookAtAttach: CAttachMethods,
    Objects: CArray(TConversationStateIndexId),
    Variations: CArray(TConversationStateVariation),
    CustomSpeaker: CStringLink,
    SpeakerCharacter: CCharacterLink,
    SpeakerVariation: CString,
    ListenerCharacter: CCharacterLink,
    AltLine: Bit,
    AltLineMatchText: Bit,
    ConditionCheck: EConversationConditionCheck,
    Conditions: CArray(SConversationCondition),
    Actions: CArray(SConversationAction),
    CutsceneFile: CString,
    CutscenePosition: CGamePoInt3D,
    Tags: CArray(TConversationTag),
}
const SConversationRunActions = {
    Id: TConversationItemId,
    ConditionCheck: EConversationConditionCheck,
    Conditions: CArray(SConversationCondition),
    Actions: CArray(SConversationAction),
}
const SConversationWait = {
    Id: TConversationItemId,
    Duration: UInt32,
    ConditionCheck: EConversationConditionCheck,
    Conditions: CArray(SConversationCondition),
}
const SConversationJump = {
    Id: TConversationItemId,
    Location: TConversationItemId,
    ConditionCheck: EConversationConditionCheck,
    Conditions: CArray(SConversationCondition),
}
const SConversationChoice = {
    Id: TConversationItemId,
    Text: CStringLink,
    Comment: CString,
    RequiresPrevious: Bit,
    Permanent: Bit,
    ConditionCheck: EConversationConditionCheck,
    Conditions: CArray(SConversationCondition),
    Actions: CArray(SConversationAction),
    Children: CArray(TConversationItemId),
}
const SConversationGroup = {
    Id: TConversationItemId,
    Name: CStringLink,
    Comment: CString,
    ChoiceSelection: EConversationSelectionMethod,
    MaxChoices: UInt32,
    LineSelection: EConversationSelectionMethod,
    MaxLines: UInt32,
    PlayOnceOnly: Bit,
    NoWait: Bit,
    ChoiceCamera: TConversationStateIndexId,
    ConditionCheck: EConversationConditionCheck,
    Conditions: CArray(SConversationCondition),
    Children: CArray(TConversationItemId),
    CutsceneFile: CString,
    CutscenePosition: CGamePoInt3D,
    ApplyCutsceneToChildren: Bit,
    Tags: CArray(TConversationTag),
}
const SConversationComment = {
    Id: TConversationItemId,
    Text: CStringLink,
}



const SConversationStateInfoText = {
    Id: TConversationStateInfoId,
    Text: CStringLink,
}
const SConversationStateInfoValue = {
    Id: TConversationStateInfoId,
    Value: Real,
}
const SConversationStateInfoModel = {
    Id: TConversationStateInfoId,
    Model: CModelLink,
}
const SConversationStateInfoUpgrade = {
    Id: TConversationStateInfoId,
    Upgrade: CUpgradeLink,
}
const SConversationStateInfoAbilCmd = {
    Id: TConversationStateInfoId,
    Abil: CAbilLink,
    Cmd: TAbilCmdIndex,
}
const SConversationStateVariation = {
    Value: TConversationStateVariation,
    DefaultCategories: CArray(CString80),
}
const SConversationStateInfoIds = {
    Id: CArray(TConversationStateInfoId),
}


const SConversationStateIndex = {
    Id: TConversationStateIndexId,
    Name: CStringLink,
    EditorPrefix: CStringLink,
    EditorSuffix: CStringLink,
    Color: CColor,
    ImagePath: CImagePath,
    ImageEdge: ETextTagEdge,
    ImageAttach: EAttachmentID,
    MoviePath: CMoviePath,
    InfoText: CArray(SConversationStateInfoText),
    InfoValue: CArray(SConversationStateInfoValue),
    InfoModel: CArray(SConversationStateInfoModel),
    InfoUpgrade: CArray(SConversationStateInfoUpgrade),
    InfoAbilCmd: CArray(SConversationStateInfoAbilCmd),
    Variations: CArray(SConversationStateVariation),
}




const SDataCollectionRecord = {
    Entry: CCatalogGameLink,
}
const SUpgradeInfoWeapon = {
    UpgradeWeapon: CWeaponLink,
    UpgradeEffect: CEffectLink,
    DamagePerDice: Real,
}
const SDataFieldsPattern = {
    Reference: CString,
    NameOverride: CStringLink,
    UserData: CIdentifier,
}
const SDataTokensPattern = {
    Reference: CString,
    NameOverride: CStringLink,
    UserData: CIdentifier,
}





const STextureSheetEntry = {
    TextureSheet: CTextureSheetLink,
    Index: UInt32,
    Count: UInt32,
    DurationPerFrame: UInt32,
}








const SEffectDamageArea = {
    Arc: CFangleArc,
    MaxCount: UInt32,
    Radius: Real,
    RectangleWidth: Real,
    RectangleHeight: Real,
    RadiusBonus: Real,
    FacingAdjustment: CFangle,
    Bonus: Real,
    Fraction: Real,
    Validator: CValidatorLink,
}
const SEffectSearchRevealerParams = {
    RevealFlags: CeffectRevealFlagCountFlagArray,
    DetectFilters: CTargetFilters,
    RadarFilters: CTargetFilters,
    HeightMap: EHeightMap,
    Duration: CGameTime,
    ShapeExpansion: Real,
}
const SEffectEnumArea = {
    Arc: CFangleArc,
    MaxCount: UInt32,
    Radius: Real,
    RectangleWidth: Real,
    RectangleHeight: Real,
    RadiusBonus: Real,
    FacingAdjustment: CFangle,
    Effect: CEffectLink,
}
const SEffectMover = {
    Link: CMoverLink,
    IfRangeLTE: Real,
}
const SEffectMissileBounce = {
    DistanceMultiplier: Real,
    ImpactEffect: CEffectLink,
    Offset: CEffectOffset,
}
const SUpgradeEffect = {
    Operation: EUpgradeOperation,
    Reference: CCatalogReference,
    Value: TUpgradeEffectValue,
}
const SEffectUpgrade = {
    Upgrade: CUpgradeLink,
    Count: Int8,
}
const SEffectModifyPlayerCost = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Abil: CAbilLink,
    Unit: SEffectWhichUnit,
}



const SEffectModifyUnitCost = {
    Abil: CAbilCommand,
    Behavior: CBehaviorLink,
    Player: SEffectWhichPlayer,
    ChargeCountUse: Real,
    ChargeTimeUse: CGameTime,
    CooldownOperation: ECooldownOperation,
    CooldownTimeUse: CGameTime,
    Fraction: SCostFactor,
}
const SEffectModifyWeapon = {
    Weapon: CWeaponLink,
    CooldownOperation: ECooldownOperation,
    CooldownAmount: CGameTime,
    CooldownFraction: Real,
}
const SEffectModifyVital = {
    Change: SAccumulatedFixed,
    ChangeFraction: SAccumulatedFixed,
    ScoreArray: CArray(SScoreValueUpdate),
}
const SEffectModifyTurret = {
    Action: EEffectModifyTurret,
    Turret: CTurretLink,
    Target: SEffectWhichLocation,
    Flags: CeffectModifyTurretFlagCountFlagArray,
    AimCompleteEffect: CEffectLink,
}
const SEffectSwitchCase = {
    Validator: CValidatorLink,
    Effect: CEffectLink,
    FallThrough: Bit,
}
const SEmoticonPackCampaign = {
    Campaign: CCampaignLink,
}


const SFootprintBitSet = {
    Character: CString4,
    Positive: CArray(Bit),
    Negative: CArray(Bit),
}
const SFootprintLayer = {
    Area: CiQuad,
    Sets: CArray(SFootprintBitSet),
    Rows: CArray(CString50),
}
const SFootprintShape = {
    Mode: EFootprintShapeMode,
    Radius: Real,
    Offsets: TFootprintOffsets,
    Borders: TFootprintBorders,
}



const SDifficultyLevel = {
    AttributeId: CFourCC,
    Name: CStringLink,
    NameCampaign: CStringLink,
    NameMelee: CStringLink,
    MenuTooltip: CStringLink,
    Enabled: Bit,
    Flags: CArray(Bit),
    ActionsPerMinute: Int32,
    DefaultRebuildUnit: UInt8,
    DefaultRebuildStructure: UInt8,
}
const SAIBuild = {
    AttributeId: CFourCC,
    Name: CStringLink,
    MenuTooltip: CStringLink,
    Enabled: Bit,
    Race: CRaceLink,
    MinDiff: TDifficulty ,
    MaxDiff: TDifficulty ,
    BuildScriptNum: Int32,
}
const SHandicap = {
    MenuTooltip: CStringLink,
    Percent: THandicap
}
const SMapSize = {
    Name: CStringLink,
    MaxCells: UInt32,
}
const SAspectMargin = {
    AspectWidth: UInt32,
    AspectHeight: UInt32,
    Margin: CiQuad,
}
const STeamColor = {
    HDRMultiplier: real32,
    Name: CStringLink,
    Value: CArray(C4Vector),
    UserChoice: Bit,
    MinPlayerCount: Int32,
    AttributeId: CFourCC,
}
const SAIDescription = {
    Id: CFourCC,
    Name: CStringLink,
    Ð¡File: CIdentifier,
    Suffix: CString32,
}
const STriggerLib = {
    Id: TTriggerLibId,
    IncludePath: CString,
}
const STargetFilterResult = {
    Filter: CTargetFilters,
    Result: TCmdResult,
}
const SBeaconInfo = {
    Alert: CAlertLink,
    Unit: CUnitLink,
    Tooltip: CStringLink,
    Clear: CArray(Bit),
}
const SDamageTypeInfo = {
    Category: EDamageCategory,
    SupportedFilters: CTargetFilters,
}
const SAttackTypeInfo = {
    ArmorFactor: CArray(Real),
    SupportedFilters: CTargetFilters,
    FailThroughToDamageType: Bit,
}
const SResourceConvert = {
    RatioArray: CArray(Real),
}
const SMeleePointThreshold = {
    Value: UInt32,
    Factor: Real,
}
const SChallenge = {
    Id: CString,
    Name: CStringLink,
    Description: CStringLink,
    Score: CStringLink,
    MapPath: CAssetPath,
    ThumbnailImagePath: CAssetPath,
    Achievement: CArray(CAchievementLink),
    IsAllowedInTrial: Bit,
}
const SChallengeCategory = {
    Name: CStringLink,
    Challenge: CArray(SChallenge),
}
const SSoundQuality = {
    AutoDetectCPUCoreMaximum: UInt32,
    Channels: UInt32,
    Flags: CArray(Bit),
    Name: CStringLink,
    Format: ESoundFormat,
    Resampler: ESoundResampler,
    SampleRate: UInt32,
    SpeakerMode: ESpeakerMode,
    VariationMaximum: CArray(UInt32),
}
const SMinimapData = {
    InnerBorderColor: CColor,
    OuterBorderColor: CColor,
    FrustumColor: CColor,
    ResourceUnitColor: CColor,
    ResourceUnitColorBlindColor: CColor,
    BlipUnitColor: CColor,
    UnitBorderColor: CColor,
    SelectedUnitBorderColor: CColor,
    BackGroundColor: CColor,
    BorderSize: real32,
    SelectedBorderSize: real32,
    MinUnitDotSize: real32,
    RadarAlpha: UInt8,
}
const SSelectionData = {
    SelectionWidth: real32,
    SelectionFallOff: real32,
    SelectionAlpha: C3Vector,
    SelectionTiming: C3Vector,
    SelectionSegmentCount: UInt32,
    SelectionSegmentPercentSolid: real32,
    SelectionRotationSpeed: real32,
    SelectionInnerOffsetRatio: real32,
    SelectionInnerBoundaryRatio: real32,
    SelectionInnerBoundaryFallOffRatio: real32,
    PreselectionWidth: real32,
    PreselectionFallOff: real32,
    PreselectionAlpha: C3Vector,
    PreselectionTiming: C3Vector,
    PreselectionSegmentCount: UInt32,
    PreselectionSegmentPercentSolid: real32,
    PreselectionRotationSpeed: real32,
}


const SVolumeFade = {
    Time: UInt32,
    Volume: CVolume,
}

const SReverbRolloff = {
    Distance: real32,
    Direct: real32,
    Room: real32,
}
const SVolumeThreshold = {
    Count: UInt32,
    Volume: CVolume,
}
const SVolumeRolloff = {
    Distance: real32,
    Volume: CVolume,
}
const SSoundData = {
    DupeFadeBlend: ESoundBlend,
    DupeFadeIn: CArray(SVolumeFade),
    DupeFadeOut: CArray(SVolumeFade),
    FogFadeBlend: ESoundBlend,
    FogFadeIn: CArray(SVolumeFade),
    FogFadeOut: CArray(SVolumeFade),
    MixerPriority: Int16,
    MixerPriorityNonLocal: Int16,
    Mute: Bit,
    MuteFadeBlend: ESoundBlend,
    MuteFadeIn: CArray(SVolumeFade),
    MuteFadeOut: CArray(SVolumeFade),
    ReverbRolloffBlend: ESoundBlend,
    ReverbRolloffPoints: CArray(SReverbRolloff),
    Solo: Bit,
    ThresholdFadeTime: UInt32,
    ThresholdPoints: CArray(SVolumeThreshold),
    Volume: CVolume,
    VolumeBaseline: CVolume,
    VolumeRolloffBlend: ESoundBlend,
    VolumeRolloffFadeBlend: ESoundBlend,
    VolumeRolloffFadeIn: CArray(SVolumeFade),
    VolumeRolloffFadeOut: CArray(SVolumeFade),
    VolumeRolloffPoints: CArray(SVolumeRolloff),
    MaxFadeBlend: ESoundBlend,
    MaxFadeOut: CArray(SVolumeFade),
    AlertFadeTimeOut: UInt32,
    AlertFadeTimeIn: UInt32,
    AlertFadeVolume: CVolumeRange,
    StartupDSPArray: CArray(CDSPLink),
    DSPArray: CArray(CDSPLink),
    Flags: CArray(Bit),
    MuteControl: EMuteControl,
    VolumeControl: EVolumeControl,
    LocalVolumeAdjustment: CVolumeRange,
    NonLocalVolumeAdjustment: CVolumeRange,
    CategoryDuckingFadeTimeIn: UInt32,
    CategoryDuckingFadeTimeOut: UInt32,
    CategoryDucking: CArray(CVolume),
    CategoryDuckingNonLocal: CArray(CVolume),
    MinimumDuckingLevel: CVolume,
    MaxMethod: ESoundMaxMethod,
    MaxCountPerPlayer: UInt16,
    MaxCountGlobal: UInt16,
    MaxPrioritization: ESoundMaxPrioritization,
}

const SMixRoute = {
    ParentCategory: ESoundCategory,
}

const SGlobalSoundData = {
    SoundDistanceFactor: real32,
    SoundDopplerFactor: real32,
    SoundRolloffFactor: real32,
    HeadphoneModeMinAngle: real32,
    HeadphoneModeMaxAngle: real32,
    HeadphoneModeFrequency: real32,
}
const SPointModel = {
    Model: CModelPath,
    Scale: real32,
    NameSize: UInt32,
    HeightOffset: real32,
    SelectionOffset: C3Vector,
    SelectionRadius: real32,
}
const SCameraShakeRotation = {
    Yaw: real32,
    Pitch: real32,
    Roll: real32,
}
const SCameraShakeFrequency = {
    Id: CString80,
    Name: CStringLink,
    Position: C3Vector,
    Rotation: SCameraShakeRotation
}
const SCameraShakeAmplitude = {
    Id: CString80,
    Name: CStringLink,
    Position: C3Vector,
    Rotation: SCameraShakeRotation
}
const SListenerRolloff = {
    CameraValue: real32,
    ListenerFactor: real32,
}




const SUnitSpeedText = {
    MinSpeed: CGameSpeed,
    Text: CStringLink,
}
const SWeaponSpeedText = {
    MinSpeed: CGameTime,
    Text: CStringLink,
}
const SObjectGroupData = {
    MinLevel: UInt32,
    MinimapIcon: CImagePath,
}
const SLoadingScreenHelp = {
    Text: CStringLink,
    Race: CRaceLink,
}
const SLoadingBar = {
    Name: CStringLink,
    FrameSuffix: CString,
}

const SGameModeInfo = {
    Id: UInt32,
    CanOverrideText: Bit,
    IsTutorial: Bit,
    Name: CStringLink,
    Description: CStringLink,
}
const SGameCategory = {
    Usage: EGameCategoryUsage,
    Info: SGameModeInfo,
    Modes: CArray(SGameModeInfo),
}
const SDefaultGameVariant = {
    CategoryId: UInt32,
    ModeId: UInt32,
    MinPlayers: Int32,
    MaxPlayers: Int32,
    TeamCount: Int32,
    PlayersPerTeam: Int32,
    PlayersPerTandem: Int32,
    AIDifficulty: TDifficultyLevel,
    Options: CArray(Bit),
    AchievementTags: CArray(CFourCC),
}
const STutorialConfig = {
    Title: CStringLink,
    Description: CStringLink,
    Icon: CImagePath,
    Movie: CMoviePath,
}
const SHotkeyInfo = {
    Category: CStringLink,
    Name: CStringLink,
    Tooltip: CStringLink,
}
const SResourceUI = {
    Icon: CAssetLink,
    IconBackground: CAssetLink,
    Tooltip: CStringLink,
}
const SHelpControlCategoryInfo = {
    Name: CStringLink,
    Description: CStringLink,
}
const SHelpControlInfo = {
    Category: CStringLink,
    Name: CStringLink,
    Description: CStringLink,
    Basic: Bit,
}
const SHelpGameMechanicInfo = {
    Icon: CAssetLink,
    IconBackground: CAssetLink,
    Name: CStringLink,
    Description: CStringLink,
}
const SAltSoundtrack = {
    AltSoundtrackName: CStringLink,
    Suffix: CString,
}
const SCutsceneAssetPath = {
    Path: CAssetLink,
    Theme: EGlueTheme,
}


const SHerdLevel = {
    Weight: real32,
}
const SHerdNode = {
    Weight: real32,
    Link: CHerdNodeLink,
}



const SHeroAbilCategory = {
    Name: CStringLink,
    Tooltip: CStringLink,
    Image: CImagePath,
    RequiredLevel: UInt32,
    State: EHeroAbilCategoryState,
    AbilArray: CArray(CHeroAbilLink),
    UserReference: CUserReference,
}

const SHeroAbil = {
    Abil: CAbilLink,
    Button: CButtonLink,
    Unit: CUnitLink,
    Flags: CheroAbilFlagCountFlagArray,
}
const SHeroHeroicAbility = {
    Abil: CAbilLink,
}
const SHeroSpecificVO = {
    Target: CUnitLink,
    Sound: CSoundLink,
}
const SHeroTalentTree = {
    Talent: CTalentLink,
    Tier: UInt32,
    Column: UInt32,
    PrerequisiteTalentArray: CArray(CTalentLink),
}
const SHeroTalentTier = {
    Tier: UInt32,
    Level: UInt32,
}
const SHeroSpecificIntroVO = {
    Target: CUnitLink,
    Question: CSoundLink,
    Response: CSoundLink,
}

const SHeroLevelModification = {
    Catalog: EGameCatalog,
    Entry: CIdentifier,
    Field: CIdentifier,
    FieldIsInteger: Bit,
    Value: real32,
    AffectedByAbilityPower: Bit,
    AffectedByOverdrive: Bit,
}
const SHeroLevelScaling = {
    Ability: CAbilLink,
    Modifications: CArray(SHeroLevelModification),
}
const SHeroRatings = {
    Damage: UInt8,
    Utility: UInt8,
    Survivability: UInt8,
    Complexity: UInt8,
}
const SHeroAITalentBuild = {
    BuildType: EHeroAITalentBuildType,
    AIOnly: Bit,
    ChanceToPick: UInt8,
    MinDifficulty: TDifficulty,
    MaxDifficulty: TDifficulty,
    TalentsArray: CArray(CTalentLink),
}
const SHeroSpecificUI = {
    Location: CIdentifier,
    DescName: CString,
}
const SHeroStatModifier = {
    Stat: CHeroStatLink,
    Value: Int32,
    State: EHeroStatState,
}
const SItemContainerSlot = {
    EmptyFace: CButtonLink,
    Classes: CArray(CItemClassLink),
    Requirements: CTechRequirementsGraph,
    Equip: Bit,
    Row: UInt8,
    Column: UInt8,
}
const SFlareInfo = {
    Model: CModelLink,
    Template: CIdentifier,
}
const STimeEvent = {
    Time: CTimeOfDay,
    Name: CStringLink,
}
const SDirectionalLight = {
    UseAmbientOcclusion: Bit,
    Color: C3Vector,
    ColorMultiplier: real32,
    SpecularColor: C3Vector,
    SpecColorMultiplier: real32,
    Direction: C3Vector,
}
const SVariationConfig = {
    Command: EVariationCommands,
    Sensitivity: UInt32,
    Region: ETonemapRegionTypes,
}
const SLightRegionInfo = {
    UseDefault: Bit,
    AmbientColor: C3Vector,
    AmbientEnvironmentMultiplier: real32,
    DiffuseColor: CArray(C3Vector),
    DiffuseMultiplier: CArray(real32),
    SpecularColor: C3Vector,
    SpecularMultiplier: real32,
    FogColor: C3Vector,
}
const SLightInfo = {
    Id: CIdentifier,
    TimeOfDay: CTimeOfDay,
    AmbientColor: C3Vector,
    AmbientEnvironmentMultiplier: real32,
    OperatorHDR: Int8,
    TerrainUseBackLight: Bit,
    DirectionalLightShadows: Bit,
    CorrectGamma: Bit,
    Param: CArray(real32),
    DirectionalLight: CArray(SDirectionalLight),
    TriggerTransition: UInt32,
    Colorize: Bit,
    UseSeparateDetailSSAO: Bit,
    Variations: CArray(SVariationConfig),
    LightRegions: CArray(SLightRegionInfo),
}
const SMissionCategory = {
    Name: CStringLink,
    Map: CMapLink,
    Tooltip: CStringLink,
    CompletedTooltip: CStringLink,
    RewardImage: CImagePath,
    RewardTooltip: CStringLink,
    State: EMissionState,
}
const SLootChoice = {
    Chance: UInt8,
    Child: CLootLink,
}
const SAnimFile = {
    FilePath: CAnimsPath,
    Flags: CArray(Bit),
}
const SAnimAlias = {
    Anim: CAnimProps,
    Alias: CAnimProps,
}
const SAttachProps = {
    Id: EAttachmentID,
    Keys: CArray(TAttachPropIndex),
    SquibType: ESquibType,
    WeightExplicit: real32,
    WeightFactor: real32,
    RadiusTarget: real32,
    RadiusShield: real32,
}
const SModelDataEvent = {
    Variation: Int32,
    Anim: CAnimProps,
    Name: CIdentifier,
    Type: EModelEvent,
    Time: real32,
    Attachment: EAttachmentID,
    Payload: CIdentifier,
    ModelQuality: EModelQuality,
}
const SPhysicsMaterialMapping = {
    PhysicsMaterialInnate: EPhysicsMaterial,
    PhysicsMaterialOverride: CPhysicsMaterialLink,
}


const STextureNameAdaption = {
    TriggerOnSubstring: CIdentifier,
    Slot: CTextureSlot,
    PropsAdd: CTextureProps,
    PropsRemove: CTextureProps,
    PropsSet: CTextureProps,
    AppliesToInnate: Bit,
    AppliesToFile: Bit,
}
const STextureDeclare = {
    Prefix: CIdentifier,
    Slot: CTextureSlot,
    Adaptions: CArray(STextureNameAdaption),
}
const STextureInfo = {
    Slot: CTextureSlot,
    Expression: CTextureExpression,
    Probability: UInt32,
}
const STextureExpressionSpec = {
    Slot: CTextureSlot,
    Expression: CTextureExpression,
}
const STextureMatchSpec = {
    Slot: CTextureSlot,
    Source: CTextureSlot,
}
const SModelVariation = {
    Number: Int32,
    Probability: UInt32,
    Radius: real32,
    RadiusLoose: real32,
    PhysicsForceFactor: real32,
    PhysicsDeathMotionFactor: CVariatorActorReal32,
    TextureAppliedGroups: CTextureProps,
    TextureExpressionsForEdito: CArray(STextureExpressionSpec),
    TextureMatchesForEditor: CArray(STextureMatchSpec),
}


const SPathingData = {
    Bits: CArray(Bit),
}


const SMotionOverlayPhase = {
    Scale: CVariatorGameFixed,
}
const SMotionPhase = {
    Driver: EMotionDriverType,
    Acceleration: CMissileAcceleration,
    AccelerationRange: CMissileAcceleration,
    Speed: CMissileSpeed,
    SpeedRange: CMissileSpeed,
    MinSpeed: CMissileSpeed,
    MaxSpeed: CMissileSpeed,
    Gravity: Real,
    Clearance: Real,
    ClearanceLookahead: Real,
    ClearanceAcceleration: CMissileAcceleration,
    ClearanceIgnoresTargetProximity: Bit,
    IgnoresTerrain: Bit,
    TurnType: EMotionTurnType,
    ActorTracking: EMotionActorTrackingType,
    ArrivalTestType: EMotionArrivalTestType,
    BlendType: EMotionBlendType,
    Outro: CPhaseOutro,
    RotationLaunchActorType: EMotionRotationLaunchActorType,
    RotationActorType: EMotionRotationActorType,
    Timeout: Real,
    ThrowRotationType: EMotionThrowRotationType,
    ThrowVector: C3fVector,
    ThrowBandYaw: CThrowBand,
    ThrowBandPitch: CThrowBand,
    ThrowForward: C3fVector,
    AdaptableParabolaIsUpright: Bit,
    AdaptableParabolaClearance: CVariatorGameFixed,
    AdaptableParabolaDistances: CArray(Real),
    AdaptableParabolaAccels: CArray(CMissileAcceleration),
    YawPitchRoll: CYawPitchRoll,
    YawPitchRollRange: CYawPitchRoll,
    YawPitchRollAccel: CYawPitchRoll,
    YawPitchRollAccelRange: CYawPitchRoll,
    PowerslideAngle: CFangle,
    PowerslideDecel: CMissileAcceleration,
    FlightTime: CVariatorGameFixed,
    OutroAltitude: CPhaseOutro,
    Overlays: CArray(SMotionOverlayPhase),
}
const SMotionOverlay = {
    Type: EMotionOverlayType,
    Polarity: EMotionOverlayPolarity,
    PolarityDriver: CDataSoupKey,
    Axis: C3fVector,
    Wavelength: CVariatorGameFixed,
    WavelengthChangeProbability: Real,
    RevolverSpeed: CFangleRateMissile,
    RevolverSpeedRange: CFangleRateMissile,
    RevolverMaxSpeed: CFangleRateMissile,
    RevolverMaxSpeedRange: CFangleRateMissile,
    RevolverAccel: CFangleAccelMissile,
    RevolverAccelRange: CFangleAccelMissile,
}



const SStartingUnit = {
    Count: UInt32,
    Flags: CArray(Bit),
    Offset: CArray(CGamePoint),
    Range: Real,
    Unit: CUnitLink,
}
const SUpkeepTax = {
    FoodLevel: UInt32,
    Tax: CArray(Real),
}


const SRequirementNode = {
    Link: CRequirementNodeLink,
}
const SRequirementCount = {
    Link: TTechAlias,
    State: ERequirementState,
    Unlock: TTechAlias,
}
const SRewardCategory = {
    Ð¡File: CString,
    Tag: CFourCC,
}
const SRewardSpecificUI = {
    Location: CIdentifier,
    DescName: CString,
}
const SGameReplacement = {
    Catalog: EGameCatalog,
    From: CIdentifier,
    To: CIdentifier,
}
const SSkinModelGroup = {
    Name: CIdentifier,
    Models: CArray(CModelLink),
}
const SSkinModelMacroRun = {
    Models: CIdentifier,
    Macro: CActorLink,
}
const SSkinPackEntry = {
    Unit: CUnitLink,
    Reward: CRewardLink,
    UnitAlternate: CUnitLink,
    RewardAlternate: CRewardLink,
}




const SSyncPointRange = {
    BarAndBeat: C2iVector,
    TimeSignature: C2iVector,
    BeatsPerMinute: UInt16,
    SyncPointsPerBar: UInt16,
}
const SSoundAsset = {
    TemplateParam: CString,
    Ð¡File: CSoundPath,
    LoopCount: Int32,
    LoopTime: CiRange,
    Offset: CiRange,
    Pitch: CPitchRange,
    SyncPoints: CArray(UInt32),
    SyncPointRanges: CArray(SSyncPointRange),
    Volume: CVolumeRange,
    Weight: TSoundWeight,
    FacialAnim: CIdentifier,
    FacialGroup: CIdentifier,
    PortraitAnim: CIdentifier,
    FacialFile: CFacialPath,
    PortraitModel: CModelLink,
    PortraitActor: CActorLink,
    Speaker: CStringLink,
    Subtitle: CStringLink,
}
const SSoundAssetTemplate = {
    Ð¡File: CIdentifier,
    FacialAnim: CIdentifier,
    FacialGroup: CIdentifier,
    FacialFile: CIdentifier,
    PortraitAnim: CIdentifier,
}
const SSoundLocaleFlags = {
    Locale: TLocaleId,
    Flags: CArray(Bit),
}
const SPitchShift = {
    Time: UInt32,
    Pitch: CPitch,
}
const SReverbBalance = {
    Direct: TSoundBalance,
    Room: TSoundBalance,
}
const SSoundtrackMasterLayer = {
    Sound: CSoundLink,
}
const SSoundtrackSection = {
    Chance: real32,
    Sound: CSoundLink,
    Start: UInt32,
}
const SSoundtrackSlaveLayer = {
    Sections: CArray(SSoundtrackSection),
}
const SSoundtrackCue = {
    MasterLayer: SSoundtrackMasterLayer,
    SlaveLayers: CArray(SSoundtrackSlaveLayer),
    Weight: TSoundWeight,
}
const STacAbilData = {
    AbilLink: CAbilLink,
    Cooldown: CArray(Real),
}



const STalentRank = {
    Face: CButtonLink,
    Item: CUnitLink,
    Upgrade: CUpgradeLink,
    BehaviorArray: CArray(CBehaviorLink),
    AbilityPower: Real,
    CooldownReduction: Real,
    AttackDamage: Real,
    AttackSpeed: Real,
    Life: Real,
    Energy: Real,
    Shields: Real,
    LifeRegenRate: CGameRate,
    EnergyRegenRate: CGameRate,
    ShieldRegenRate: CGameRate,
    MovementSpeed: Real,
    LifeLeech: Real,
    SiegeDamage: Real,
    LifeRegenRateFraction: Real,
    CrowdControlReduction: Real,
    DeathTimerReduction: Real,
    AmplifiedHealing: Real,
    MountSpeed: Real,
}
const STalentModification = {
    Type: ETalentModification,
    Catalog: EGameCatalog,
    Entry: CIdentifier,
    Field: CIdentifier,
    FieldIsInteger: Bit,
    Value: real32,
    StringReplacement: CString,
}
const STalentAbilityModification = {
    ModifyAbil: CAbilLink,
    OriginalAbilButton: CButtonLink,
    ModifiedAbilButton: CButtonLink,
    Modifications: CArray(STalentModification),
    TooltipAddendum: CStringLink,
}
const STargetFindEnumArea = {
    Arc: CFangleArc,
    MaxCount: UInt32,
    Radius: Real,
    RadiusBonus: Real,
    Validator: CValidatorLink,
}
const SDSPArray = {
    LinkArray: CArray(CDSPLink),
}
const SCreepSettings = {
    CreepOpaqueAlphaThreshold: real32,
    CreepTranslucentMinThreshold: real32,
    CreepTranslucentMaxThreshold: real32,
    CreepNoiseSpeed: real32,
    CreepNoiseTiling: real32,
    CreepHeightMapStrength: real32,
    CreepNoiseStrength: real32,
    CreepBaseTextureTileValue: C2Vector,
    CreepBaseNormalMapTileValue: C2Vector,
    CreepEdgeNormalMapTileValue: C2Vector,
    CreepEdgeNormalMapMinRampThreshold: real32,
    CreepTranslucentPassTint: C3Vector,
    CreepTranslucentPassEmissiveFactor: C3Vector,
    CreepDiffuseColorTint: C3Vector,
    CreepTextureRotation: real32,
    CreepGroundNormalBlend: real32,
}
const SFoliageSimulationConfig = {
    SamplingDistance: CArray(real32),
    AcceptWorldForces: CArray(Bit),
}
const STerrainDoodad = {
    Model: CModelLink,
    RandomRotation: Bit,
    Probability: real32,
    PlacementRadius: real32,
}
const SFidget = {
    ChanceArray: CArray(UInt8),
    DelayMax: CGameTime,
    DelayMin: CGameTime,
    DistanceMax: Real,
    DistanceMin: Real,
    TurnAngle: CFangle,
    TurningRate: CFangleRate,
}





const SUnitArmorFormula = {
    NegativeArmorMultiplier: Real,
    NegativeDamageBase: Real,
    NegativeDamageUnscaled: Real,
    PositiveArmorMultiplier: Real,
    PositiveDamageRatio: Real,
}
const SStockCharge = {
    CountMax: Real,
    TimeDelay: CGameTime,
    TimeUse: CGameTime,
}
const SUnitAbilData = {
    Link: CAbilLink,
}
const SUnitBehaviorData = {
    Link: CBehaviorLink,
}
const SCardLayoutButton = {
    Face: CButtonLink,
    Type: ECardButtonType,
    AbilCmd: CAbilCommand,
    Behavior: CBehaviorLink,
    Requirements: CTechRequirementsGraph,
    SubmenuAbilState: CAbilLink,
    SubmenuCardId: CCardId,
    SubmenuFullSubCmdValidation: Bit,
    SubmenuIsSticky: Bit,
    ShowInGlossary: Bit,
    Row: UInt8,
    Column: UInt8,
}
const SCardLayout = {
    CardId: CCardId,
    LayoutButtons: CArray(SCardLayoutButton),
    RowText: CArray(CStringLink),
}
const SAddedOnData = {
    UnitLink: CUnitLink,
    BehaviorLink: CBehaviorLink,
    ParentBehaviorLink: CBehaviorLink,
}
const SUnitEquipment = {
    Effect: CEffectLink,
    Icon: CImagePath,
    Name: CStringLink,
    Tooltip: CStringLink,
    Weapon: CWeaponLink,
}
const SUnitReviveInfo = {
    Resource: CArray(Int32,EResourceType),
    Display: CArray(Bit),
    Vital: CArray(Real,EUnitVital),
    VitalFraction: CArray(Real,EUnitVital),
    Charge: SCharge,
    Cooldown: SCooldown,
    Time: CGameTime,
}
const SAttributePointsInfo = {
    Attribute: CBehaviorLink,
    Points: Int32,
    PointsPerLevel: Real,
}
const SUpgradeEffectTemplate = {
    Operation: EUpgradeOperation,
    Reference: CString,
    Value: CString,
}



const SValidatorCondition = {
    Test: CValidatorLink,
    Return: CValidatorLink,
}
const SValidatorFunction = {
    Test: CValidatorLink,
    Return: CValidatorLink,
    Success: CValidatorLink,
    Failure: CValidatorLink,
    Ignored: CValidatorLink,
    Break: Bit,
}
const SValidatorEnumArea = {
    Arc: CFangleArc,
    Compare: EValueCompare,
    Count: UInt32,
    Radius: Real,
    RadiusBonus: Real,
    Validator: CValidatorLink,
}

const SVoiceOverSkin = {
    Id: TVoiceOverSkinId,
    State: EVoiceOverSkinState,
}
const SVoiceOverGroup = {
    Id: TVoiceOverGroupId,
    SoundParent: CSoundLink,
}
const SVoiceOverLine = {
    Group: TVoiceOverGroupId,
    SoundIndex: Int32,
    SoundType: EVoiceOverSoundType,
    SoundText: CString,
    Comment: CString,
    FacialAnim: CString,
    FacialBlend: UInt32,
    FacialAsVoiceDir: Bit,
    Skins: CArray(SVoiceOverSkin),
}
const SVoicePackExampleLine = {
    Description: CStringLink,
    Sound: CSoundLink,
}


const CAbil = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
}

const CAbilProgress = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Activity: CStringLink,
    Cancelable: Bit,
    VitalStartFactor: CArray(Real,EUnitVital),
}

const CAbilEffect = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Levels: UInt32,
    VeterancyLevelMin: UInt32,
    VeterancyLevelSkip: UInt32,
    Activity: CStringLink,
    PrepEffect: CArray(CEffectLink),
    Effect: CArray(CEffectLink),
    PreEffectBehavior: SEffectBehavior,
    PostEffectBehavior: SEffectBehavior,
    Flags: CAbilEffectFlagCountFlagArray,
    Cost: CArray(SCost),
    ExtraVitalCost: CArray(SAccumulatedFixed,EUnitVital),
    CancelCost: CArray(SCost),
    RefundArray: CabilEffectStageCountFlagArray,
    RefundFraction: SCostFactor,
    InterruptArray: CabilEffectStageCountFlagArray,
    InterruptCost: SCost,
    Placeholder: CUnitLink,
    TargetFilters: CArray(CTargetFilters),
    TargetSorts: STargetSorts,
    Range: CArray(Real),
    RangeSlop: Real,
    Arc: CFangleArc,
    ArcSlop: CFangleArc,
    TrackingArc: CFangleArc,
    SmartPriority: UInt32,
    SmartValidatorArray: CArray(CValidatorLink),
    AutoCastAcquireLevel: EAcquireLevel,
    AutoCastFilters: CTargetFilters,
    AutoCastRange: Real,
    AutoCastValidatorArray: CArray(CValidatorLink),
    CastMovementLimit: Real,
    Precast: CArray(CGameTime),
    PrepTime: CArray(CGameTime),
    CastIntroTime: CArray(CGameTime),
    CastOutroTime: CArray(CGameTime),
    FinishTime: CArray(CGameTime),
    Marker: SMarker,
    UseMarkerArray: CabilEffectStageCountFlagArray,
    ShowProgressArray: CabilEffectStageCountFlagArray,
    CancelableArray: CabilEffectStageCountFlagArray,
    PauseableArray: CabilEffectStageCountFlagArray,
    PreemptableArray: CabilEffectStageCountFlagArray,
    UninterruptibleArray: CabilEffectStageCountFlagArray,
    ValidatedArray: CabilEffectStageCountFlagArray,
    InheritAttackPriorityArray: CabilEffectStageCountFlagArray,
    ErrorAlert: CAlertLink,
    AlertArray: CArray(CAlertLink),
    CursorEffect: CArray(CEffectLink),
    CastOutroTimeEffect: CArray(CEffectLink),
    CalldownEffect: CEffectLink,
    AINotifyEffect: CEffectLink,
    ProducedUnitArray: CArray(CUnitLink),
    ProgressButtonArray: CArray(CButtonLink),
    DefaultError: CCmdResult,
    LevelButtonImage: CArray(CImagePath),
    LevelButtonName: CArray(CStringLink),
    LevelButtonTooltip: CArray(CStringLink),
    LevelButtonTooltipImage: CArray(CImagePath),
    EffectRange: CArray(CfRange),
    LearnButtonImage: CArray(CImagePath),
    LearnButtonName: CArray(CStringLink),
    LearnButtonTooltip: CArray(CStringLink),
    LearnButtonTooltipImage: CArray(CImagePath),
    IgnoreFilters: CTargetFilters,
    AcquirePriority: UInt32,
    CursorRangeMode: ECursorRangeMode,
    SetLastTarget: EAbilLastTarget,
    TargetCursorInfo: SAbilTargetCursorInfo,
    CancelEffect: CArray(CEffectLink),
    CancelDelay: CArray(CGameTime),
}

const CAbilQueueable = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    RefundFraction: SCostFactor,
    ErrorAlert: CAlertLink,
    Activity: CStringLink,
}

const CAbilRedirect = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Abil: CAbilLink,
    Index: TAbilCmdIndex,
    Flags: CArray(Bit),
}

const CAbilArmMagazine = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    RefundFraction: SCostFactor,
    ErrorAlert: CAlertLink,
    Activity: CStringLink,
    Launch: EAbilArmMagazineLaunch,
    Flags: CArray(Bit),
    Leash: Real,
    InfoArray: CArray(SAbilArmMagazineInfo),
    Alert: CAlertLink,
    EffectArray: CArray(CEffectLink),
    ReturnLifeFraction: Real,
    CalldownEffect: CEffectLink,
    ExternalAngle: CArray(CFangle),
    MaxCount: UInt32,
}

const CAbilAttack = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    AcquireFilters: CTargetFilters,
    SmartFilters: CTargetFilters,
    SmartPriority: UInt32,
    SupportedFilters: CTargetFilters,
    MinAttackSpeedMultiplier: Real,
    MaxAttackSpeedMultiplier: Real,
    AcquirePriority: UInt32,
    Flags: CArray(Bit),
    TargetCursorInfo: SAbilTargetCursorInfo,
}

const CAbilAugment = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    AbilCmd: CAbilCommand,
    TargetType: EEffectLocationType,
    Cost: SCost,
    Effect: CEffectLink,
    AutoCastFilters: CTargetFilters,
    AutoCastValidatorArray: CArray(CValidatorLink),
    SmartPriority: UInt32,
    SmartValidatorArray: CArray(CValidatorLink),
}

const CAbilAttackModifier = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Levels: UInt32,
    VeterancyLevelMin: UInt32,
    VeterancyLevelSkip: UInt32,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    TargetType: EEffectLocationType,
    Cost: CArray(SCost),
    AutoCastFilters: CTargetFilters,
    AutoCastValidatorArray: CArray(CValidatorLink),
    SmartPriority: UInt32,
    SmartValidatorArray: CArray(CValidatorLink),
    AttackModifierBehavior: CBehaviorLink,
}

const CAbilBattery = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    TargetFilters: CTargetFilters,
    Range: Real,
    EnumFilters: CTargetFilters,
    EnumRange: Real,
    Effect: CEffectLink,
    SmartPriority: UInt32,
    AutoCastFilters: CTargetFilters,
    AutoCastRange: Real,
    AutoCastValidatorArray: CArray(CValidatorLink),
}

const CAbilBeacon = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    SmartPriority: UInt32,
}

const CAbilBehavior = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Levels: UInt32,
    VeterancyLevelMin: UInt32,
    VeterancyLevelSkip: UInt32,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    Cost: CArray(SCost),
    OffCost: CArray(SCost),
    ExpireCost: CArray(SCost),
    BehaviorArray: CArray(CBehaviorLinkArray),
    CycleMode: EAbilBehaviorCycleMode,
    ValidatorArray: CArray(CValidatorLink),
    AutoCastValidatorArray: CArray(CValidatorLink),
    AutoCastToggleOnValidatorArray: CArray(CValidatorLink),
    AutoCastToggleOffValidatorArray: CArray(CValidatorLink),
    LevelButtonOnImage: CArray(CImagePath),
    LevelButtonOnName: CArray(CStringLink),
    LevelButtonOnTooltip: CArray(CStringLink),
    LevelButtonOnTooltipImage: CArray(CImagePath),
    LevelButtonOffImage: CArray(CImagePath),
    LevelButtonOffName: CArray(CStringLink),
    LevelButtonOffTooltip: CArray(CStringLink),
    LevelButtonOffTooltipImage: CArray(CImagePath),
    LearnButtonImage: CArray(CImagePath),
    LearnButtonName: CArray(CStringLink),
    LearnButtonTooltip: CArray(CStringLink),
    LearnButtonTooltipImage: CArray(CImagePath),
}

const CAbilBuild = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    HaltCmdButton: SAbilCmdButton,
    BuildMorphAbil: CAbilLink,
    UnlinkMorphAbil: CAbilLink,
    FlagArray: CAbilBuildFlagCountFlagArray,
    Alert: CAlertLink,
    ErrorAlert: CAlertLink,
    InfoArray: CArray(SAbilBuildInfo),
    Type: EAbilBuildType,
    Range: Real,
    RefundFraction: SCostFactor,
    FidgetDelayMin: CGameTime,
    FidgetDelayMax: CGameTime,
    ConstructionMover: CMoverLink,
    EffectArray: CArray(CEffectLink),
    SmartPriority: UInt32,
}

const CAbilBuildable = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Activity: CStringLink,
    Cancelable: Bit,
    VitalStartFactor: CArray(Real,EUnitVital),
    CmdButtonArray: CArray(SAbilCmdButton),
    MaxBuilders: UInt32,
    PowerBuildBonusRate: Real,
    PowerBuildCostFactor: Real,
}

const CAbilEffectInstant = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Levels: UInt32,
    VeterancyLevelMin: UInt32,
    VeterancyLevelSkip: UInt32,
    Activity: CStringLink,
    PrepEffect: CArray(CEffectLink),
    Effect: CArray(CEffectLink),
    PreEffectBehavior: SEffectBehavior,
    PostEffectBehavior: SEffectBehavior,
    Flags: CAbilEffectFlagCountFlagArray,
    Cost: CArray(SCost),
    ExtraVitalCost: CArray(SAccumulatedFixed,EUnitVital),
    CancelCost: CArray(SCost),
    RefundArray: CabilEffectStageCountFlagArray,
    RefundFraction: SCostFactor,
    InterruptArray: CabilEffectStageCountFlagArray,
    InterruptCost: SCost,
    Placeholder: CUnitLink,
    TargetFilters: CArray(CTargetFilters),
    TargetSorts: STargetSorts,
    Range: CArray(Real),
    RangeSlop: Real,
    Arc: CFangleArc,
    ArcSlop: CFangleArc,
    TrackingArc: CFangleArc,
    SmartPriority: UInt32,
    SmartValidatorArray: CArray(CValidatorLink),
    AutoCastAcquireLevel: EAcquireLevel,
    AutoCastFilters: CTargetFilters,
    AutoCastRange: Real,
    AutoCastValidatorArray: CArray(CValidatorLink),
    CastMovementLimit: Real,
    Precast: CArray(CGameTime),
    PrepTime: CArray(CGameTime),
    CastIntroTime: CArray(CGameTime),
    CastOutroTime: CArray(CGameTime),
    FinishTime: CArray(CGameTime),
    Marker: SMarker,
    UseMarkerArray: CabilEffectStageCountFlagArray,
    ShowProgressArray: CabilEffectStageCountFlagArray,
    CancelableArray: CabilEffectStageCountFlagArray,
    PauseableArray: CabilEffectStageCountFlagArray,
    PreemptableArray: CabilEffectStageCountFlagArray,
    UninterruptibleArray: CabilEffectStageCountFlagArray,
    ValidatedArray: CabilEffectStageCountFlagArray,
    InheritAttackPriorityArray: CabilEffectStageCountFlagArray,
    ErrorAlert: CAlertLink,
    AlertArray: CArray(CAlertLink),
    CursorEffect: CArray(CEffectLink),
    CastOutroTimeEffect: CArray(CEffectLink),
    CalldownEffect: CEffectLink,
    AINotifyEffect: CEffectLink,
    ProducedUnitArray: CArray(CUnitLink),
    ProgressButtonArray: CArray(CButtonLink),
    DefaultError: CCmdResult,
    LevelButtonImage: CArray(CImagePath),
    LevelButtonName: CArray(CStringLink),
    LevelButtonTooltip: CArray(CStringLink),
    LevelButtonTooltipImage: CArray(CImagePath),
    EffectRange: CArray(CfRange),
    LearnButtonImage: CArray(CImagePath),
    LearnButtonName: CArray(CStringLink),
    LearnButtonTooltip: CArray(CStringLink),
    LearnButtonTooltipImage: CArray(CImagePath),
    IgnoreFilters: CTargetFilters,
    AcquirePriority: UInt32,
    CursorRangeMode: ECursorRangeMode,
    SetLastTarget: EAbilLastTarget,
    TargetCursorInfo: SAbilTargetCursorInfo,
    CancelEffect: CArray(CEffectLink),
    CancelDelay: CArray(CGameTime),
    CmdButtonArray: CArray(SAbilCmdButton),
}

const CAbilEffectTarget = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Levels: UInt32,
    VeterancyLevelMin: UInt32,
    VeterancyLevelSkip: UInt32,
    Activity: CStringLink,
    PrepEffect: CArray(CEffectLink),
    Effect: CArray(CEffectLink),
    PreEffectBehavior: SEffectBehavior,
    PostEffectBehavior: SEffectBehavior,
    Flags: CAbilEffectFlagCountFlagArray,
    Cost: CArray(SCost),
    ExtraVitalCost: CArray(SAccumulatedFixed,EUnitVital),
    CancelCost: CArray(SCost),
    RefundArray: CabilEffectStageCountFlagArray,
    RefundFraction: SCostFactor,
    InterruptArray: CabilEffectStageCountFlagArray,
    InterruptCost: SCost,
    Placeholder: CUnitLink,
    TargetFilters: CArray(CTargetFilters),
    TargetSorts: STargetSorts,
    Range: CArray(Real),
    RangeSlop: Real,
    Arc: CFangleArc,
    ArcSlop: CFangleArc,
    TrackingArc: CFangleArc,
    SmartPriority: UInt32,
    SmartValidatorArray: CArray(CValidatorLink),
    AutoCastAcquireLevel: EAcquireLevel,
    AutoCastFilters: CTargetFilters,
    AutoCastRange: Real,
    AutoCastValidatorArray: CArray(CValidatorLink),
    CastMovementLimit: Real,
    Precast: CArray(CGameTime),
    PrepTime: CArray(CGameTime),
    CastIntroTime: CArray(CGameTime),
    CastOutroTime: CArray(CGameTime),
    FinishTime: CArray(CGameTime),
    Marker: SMarker,
    UseMarkerArray: CabilEffectStageCountFlagArray,
    ShowProgressArray: CabilEffectStageCountFlagArray,
    CancelableArray: CabilEffectStageCountFlagArray,
    PauseableArray: CabilEffectStageCountFlagArray,
    PreemptableArray: CabilEffectStageCountFlagArray,
    UninterruptibleArray: CabilEffectStageCountFlagArray,
    ValidatedArray: CabilEffectStageCountFlagArray,
    InheritAttackPriorityArray: CabilEffectStageCountFlagArray,
    ErrorAlert: CAlertLink,
    AlertArray: CArray(CAlertLink),
    CursorEffect: CArray(CEffectLink),
    CastOutroTimeEffect: CArray(CEffectLink),
    CalldownEffect: CEffectLink,
    AINotifyEffect: CEffectLink,
    ProducedUnitArray: CArray(CUnitLink),
    ProgressButtonArray: CArray(CButtonLink),
    DefaultError: CCmdResult,
    LevelButtonImage: CArray(CImagePath),
    LevelButtonName: CArray(CStringLink),
    LevelButtonTooltip: CArray(CStringLink),
    LevelButtonTooltipImage: CArray(CImagePath),
    EffectRange: CArray(CfRange),
    LearnButtonImage: CArray(CImagePath),
    LearnButtonName: CArray(CStringLink),
    LearnButtonTooltip: CArray(CStringLink),
    LearnButtonTooltipImage: CArray(CImagePath),
    IgnoreFilters: CTargetFilters,
    AcquirePriority: UInt32,
    CursorRangeMode: ECursorRangeMode,
    SetLastTarget: EAbilLastTarget,
    TargetCursorInfo: SAbilTargetCursorInfo,
    CancelEffect: CArray(CEffectLink),
    CancelDelay: CArray(CGameTime),
    CmdButtonArray: CArray(SAbilCmdButton),
    PlaceUnit: CUnitLink,
    AcquireAttackers: Bit,
    FollowRange: Real,
    FinishCommand: CAbilCommand,
}

const CAbilHarvest = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    FlagArray: CAbilHarvestFlagCountFlagArray,
    Range: Real,
    AcquireRadius: Real,
    Effect: CEffectLink,
    EffectDelay: CGameTime,
    ReservedMarker: SMarker,
    ResourceAcquire: CResourceTypeCountFlagArray,
    ResourceAllowed: CResourceTypeCountFlagArray,
    ResourceDestroy: CResourceTypeCountFlagArray,
    ResourceAmountBonus: CArray(UInt32,EResourceType),
    ResourceAmountMultiplier: CArray(Real,EResourceType),
    ResourceAmountRequest: CArray(UInt32,EResourceType),
    ResourceAmountCapacity: CArray(UInt32,EResourceType),
    ResourceTimeBonus: CArray(CGameTime,EResourceType),
    ResourceTimeMultiplier: CArray(Real,EResourceType),
    CancelableArray: CAbilHarvestStageCountFlagArray,
    UninterruptibleArray: CAbilHarvestStageCountFlagArray,
    SmartPriority: UInt32,
    ResourceQueueIndex: UInt32,
}

const CAbilInteract = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    Range: Real,
    TargetFilters: CTargetFilters,
    ValidatorArray: CArray(CValidatorLink),
    SmartPriority: UInt32,
    SmartValidatorArray: CArray(CValidatorLink),
    AutoCastFilters: CTargetFilters,
    AutoCastRange: Real,
    AutoCastValidatorArray: CArray(CValidatorLink),
}

const CAbilInventory = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    TargetFilters: CTargetFilters,
    ValidatorArray: CArray(CValidatorLink),
    Range: Real,
    MaxDropRange: Real,
    InfoArray: CArray(SAbilInventoryInfo),
    SmartPriority: UInt32,
    Requirements: CTechRequirementsGraph,
}

const CAbilLearn = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    RefundFraction: SCostFactor,
    ErrorAlert: CAlertLink,
    Activity: CStringLink,
    InfoArray: CArray(SAbilLearnInfo),
    Flags: CArray(Bit),
    Points: UInt32,
    PointsPerLevel: UInt32,
    VeterancyBehavior: CBehaviorLink,
}

const CAbilMerge = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    Alert: CAlertLink,
    Effect: CEffectLink,
    Info: SAbilMergeInfo,
    Range: Real,
}

const CAbilMergeable = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Activity: CStringLink,
    Cancelable: Bit,
    VitalStartFactor: CArray(Real,EUnitVital),
    CmdButtonArray: CArray(SAbilCmdButton),
}

const CAbilMorph = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    VeterancyLevelMin: UInt32,
    VeterancyLevelSkip: UInt32,
    CmdButtonArray: CArray(SAbilCmdButton),
    ActorKey: CDataSoupKey,
    Flags: CArray(Bit),
    RefundFraction: SCostFactor,
    Cost: SCost,
    CostUnmorph: SCost,
    CancelUnit: CUnitLink,
    InfoArray: CArray(SAbilMorphInfo),
    InfoArrayUnmorph: CArray(SAbilMorphInfo),
    StartGlobalAlert: CAlertLink,
    FinishGlobalAlert: CAlertLink,
    Alert: CAlertLink,
    ErrorAlert: CAlertLink,
    Range: Real,
    AutoCastAcquireLevel: EAcquireLevel,
    AutoCastFilters: CTargetFilters,
    AutoCastValidatorArray: CArray(CValidatorLink),
    AutoCastRange: Real,
    AutoCastCountMin: UInt32,
    AutoCastCountMax: UInt32,
    TargetSorts: STargetSorts,
    CantFindTargetError: CCmdResult,
    CantFindTargetErrorUnmorph: CCmdResult,
    Activity: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    ValidatorArrayUnmorph: CArray(CValidatorLink),
    AbilClassEnableArray: CClassIdCAbilCountFlagArray,
    AbilClassDisableArray: CClassIdCAbilCountFlagArray,
    AbilLinkEnableArray: CArray(CAbilLink),
    AbilLinkDisableArray: CArray(CAbilLink),
    ProgressButton: CButtonLink,
    AcquirePriority: UInt32,
    BehaviorOn: CBehaviorLink,
    BehaviorOff: CBehaviorLink,
}

const CAbilMorphPlacement = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    VeterancyLevelMin: UInt32,
    VeterancyLevelSkip: UInt32,
    CmdButtonArray: CArray(SAbilCmdButton),
    ActorKey: CDataSoupKey,
    Flags: CArray(Bit),
    RefundFraction: SCostFactor,
    Cost: SCost,
    CostUnmorph: SCost,
    CancelUnit: CUnitLink,
    InfoArray: CArray(SAbilMorphInfo),
    InfoArrayUnmorph: CArray(SAbilMorphInfo),
    StartGlobalAlert: CAlertLink,
    FinishGlobalAlert: CAlertLink,
    Alert: CAlertLink,
    ErrorAlert: CAlertLink,
    Range: Real,
    AutoCastAcquireLevel: EAcquireLevel,
    AutoCastFilters: CTargetFilters,
    AutoCastValidatorArray: CArray(CValidatorLink),
    AutoCastRange: Real,
    AutoCastCountMin: UInt32,
    AutoCastCountMax: UInt32,
    TargetSorts: STargetSorts,
    CantFindTargetError: CCmdResult,
    CantFindTargetErrorUnmorph: CCmdResult,
    Activity: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    ValidatorArrayUnmorph: CArray(CValidatorLink),
    AbilClassEnableArray: CClassIdCAbilCountFlagArray,
    AbilClassDisableArray: CClassIdCAbilCountFlagArray,
    AbilLinkEnableArray: CArray(CAbilLink),
    AbilLinkDisableArray: CArray(CAbilLink),
    ProgressButton: CButtonLink,
    AcquirePriority: UInt32,
    BehaviorOn: CBehaviorLink,
    BehaviorOff: CBehaviorLink,
}

const CAbilMove = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    FleeRange: Real,
    FleeTime: CGameTime,
    FollowRangeSlop: Real,
    FollowAcquireRange: Real,
    MinPatrolDistance: Real,
    FollowFilters: CTargetFilters,
    MoveFilters: CTargetFilters,
    Flags: CArray(Bit),
    MoveSmartPriority: UInt32,
    BoardBunkerSmartPriority: UInt32,
    BoardTransportSmartPriority: UInt32,
    PowerupSmartPriority: UInt32,
    RechargeSmartPriority: UInt32,
    IgnoreRange: Real,
}

const CAbilPawn = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    InfoArray: CArray(SAbilPawnInfo),
    Flags: CArray(Bit),
    Range: Real,
}

const CAbilQueue = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    QueueCount: UInt32,
    QueueSize: UInt32,
    Flags: CArray(Bit),
    AddOnParentAbilClassDisableArray: CClassIdCAbilCountFlagArray,
}

const CAbilRally = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    InfoArray: CArray(SAbilRallyInfo),
    Flags: CArray(Bit),
    SmartPriority: UInt32,
}

const CAbilRedirectInstant = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Abil: CAbilLink,
    Index: TAbilCmdIndex,
    Flags: CArray(Bit),
    CmdButtonArray: CArray(SAbilCmdButton),
}

const CAbilRedirectTarget = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Abil: CAbilLink,
    Index: TAbilCmdIndex,
    Flags: CArray(Bit),
    CmdButtonArray: CArray(SAbilCmdButton),
}

const CAbilResearch = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    RefundFraction: SCostFactor,
    ErrorAlert: CAlertLink,
    Activity: CStringLink,
    InfoArray: CArray(SAbilResearchInfo),
    Flags: CArray(Bit),
}

const CAbilRevive = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    RefundFraction: SCostFactor,
    ErrorAlert: CAlertLink,
    Activity: CStringLink,
    CmdButtonArray: CArray(SAbilReviveCmdButton),
    Flags: CArray(Bit),
    BaseInfo: SAbilReviveInfo,
    LevelInfo: SAbilReviveInfo,
    MaxInfo: SAbilReviveInfoMax,
    BaseUnitCostFactor: SCostFactor,
    LevelUnitCostFactor: SCostFactor,
    LevelUnitBuildTimeFactor: Real,
    ActorKey: CDataSoupKey,
    Effect: CEffectLink,
    Offset: CArray(CGamePoint),
    Range: Real,
    VitalArray: CArray(EAbilReviveVital,EUnitVital),
    Alert: CAlertLink,
    NameOverride: CStringLink,
    ReplaceFilters: CTargetFilters,
    ReplaceDeathType: EDeathType,
    SelfReviveCmd: EAbilReviveCmd,
    ValidatorArray: CArray(CValidatorLink),
    TargetType: EEffectLocationType,
    VeterancyBehavior: CBehaviorLink,
}

const CAbilSpecialize = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    RefundFraction: SCostFactor,
    ErrorAlert: CAlertLink,
    Activity: CStringLink,
    InfoArray: CArray(SAbilSpecializeInfo),
    MaxCount: UInt32,
    Alert: CAlertLink,
    Flags: CArray(Bit),
}

const CAbilStop = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    RequestPickupBunkerSmartPriority: UInt32,
    RequestPickupTransportSmartPriority: UInt32,
}

const CAbilTrain = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    RefundFraction: SCostFactor,
    ErrorAlert: CAlertLink,
    Activity: CStringLink,
    ActorKey: CDataSoupKey,
    Flags: CArray(Bit),
    MorphUnit: CUnitLink,
    Offset: CArray(CGamePoint),
    Range: Real,
    InfoArray: CArray(SAbilTrainInfo),
    IgnoreUnitCostRequirements: CTechRequirementsGraph,
    Alert: CAlertLink,
    ProxyOffset: CArray(CGamePoint),
    ProxyUnit: CUnitLink,
    DeathTypeOnFinish: EDeathType,
    DeathTypeOnCancel: EDeathType,
    AgentUnitValidator: CValidatorLink,
}

const CAbilTransport = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    CmdButtonArray: CArray(SAbilCmdButton),
    Flags: CArray(Bit),
    Range: Real,
    MaxUnloadRange: Real,
    MaxCargoCount: UInt32,
    MaxCargoSize: TCargoSize,
    TotalCargoSpace: TCargoCapacity,
    LoadCargoBehavior: CBehaviorLink,
    LoadCargoEffect: CEffectLink,
    LoadTransportEffect: CEffectLink,
    LoadTransportBehavior: CBehaviorLink,
    UnloadCargoBehavior: CBehaviorLink,
    UnloadCargoEffect: CEffectLink,
    UnloadTransportEffect: CEffectLink,
    UnloadTransportBehavior: CBehaviorLink,
    InitialLoadDelay: CGameTime,
    InitialUnloadDelay: CGameTime,
    LoadPeriod: CGameTime,
    UnloadPeriod: CGameTime,
    TargetFilters: CTargetFilters,
    SearchRadius: Real,
    LoadValidatorArray: CArray(CValidatorLink),
    UnloadValidatorArray: CArray(CValidatorLink),
    TargetSorts: STargetSorts,
    CalldownEffect: CEffectLink,
    DeathUnloadEffect: CEffectLink,
    ErrorAlert: CAlertLink,
    LoadSmartPriority: UInt32,
    CargoFilter: CIdentifier,
}

const CAbilWarpable = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    Activity: CStringLink,
    Cancelable: Bit,
    VitalStartFactor: CArray(Real,EUnitVital),
    CmdButtonArray: CArray(SAbilCmdButton),
    PowerUserBehavior: CBehaviorLink,
}

const CAbilWarpTrain = {
    Name: CStringLink,
    TechPlayer: EAbilTechPlayer,
    Alignment: EAbilAlignment,
    OrderArray: SAbilOrderDisplay,
    AbilSetId: CAbilSetId,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    TargetMessage: CStringLink,
    TechAliasArray: CArray(TTechAlias),
    SharedFlags: CAbilSharedFlagCountFlagArray,
    DebugTrace: Bit,
    AbilityCategories: CArray(Bit),
    TacticalAIFunc: TGalaxyFunction,
    StateBehavior: CBehaviorLink,
    DefaultButtonCardId: CFourCC,
    DataCollection: CDataCollectionLink,
    InfoArray: CArray(SAbilWarpTrainInfo),
    Alert: CAlertLink,
    RefundFraction: SCostFactor,
    Flags: CArray(Bit),
}




const CAccumulator = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
}

const CAccumulatorConstant = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Amount: Real,
}

const CAccumulatorVitals = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Ratio: Real,
    Missing: Bit,
    VitalType: EUnitVital,
    UnitSource: SEffectWhichUnit,
    ModificationType: EVitalsAccumulatorModificationType,
    ClampToMaxVitalForFractionalDamage: Bit,
}

const CAccumulatorDistance = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    StartLocation: SEffectWhichLocation,
    EndLocation: SEffectWhichLocation,
    Scale: Real,
}

const CAccumulatorBehavior = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Behavior: CBehaviorLink,
    UnitSource: SEffectWhichUnit,
    Type: EAccumulatorBehaviorType,
}

const CAccumulatorAttributePoints = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Attribute: CBehaviorLink,
    Flags: CArray(Bit),
    UnitSource: SEffectWhichUnit,
    Scale: Real,
}

const CAccumulatorTrackedUnitCount = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Scale: Real,
    TrackerUnit: SEffectWhichUnit,
    TrackingBehavior: CBehaviorLink,
    TrackedUnitValidatorArray: CArray(CValidatorLink),
    TrackedUnitFilters: CTargetFilters,
}

const CAccumulatorLevel = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Amount: CArray(Real),
    LevelFactor: Real,
    PreviousValueFactor: Real,
    BonusPerLevel: Real,
}

const CAccumulatorAbilLevel = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Amount: CArray(Real),
    LevelFactor: Real,
    PreviousValueFactor: Real,
    BonusPerLevel: Real,
}

const CAccumulatorUnitLevel = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Amount: CArray(Real),
    LevelFactor: Real,
    PreviousValueFactor: Real,
    BonusPerLevel: Real,
    UnitSource: SEffectWhichUnit,
}

const CAccumulatorVeterancyLevel = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Amount: CArray(Real),
    LevelFactor: Real,
    PreviousValueFactor: Real,
    BonusPerLevel: Real,
    UnitSource: SEffectWhichUnit,
}

const CAccumulatorCargo = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    UnitSource: SEffectWhichUnit,
    Type: ECargoSpace,
}

const CAccumulatorEffectAmount = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    AmountType: EEffectAmount,
    Total: Bit,
}

const CAccumulatorUserData = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Key: CIdentifier,
    FallbackValue: Real,
    BehaviorScope: SEffectWhichBehavior,
}

const CAccumulatorUnitCustomValue = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Index: Int32,
    FallbackValue: Real,
    UnitSource: SEffectWhichUnit,
}

const CAccumulatorSwitch = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    CaseArray: CArray(SAccumulatorSwitchCase),
    CaseDefault: CAccumulatorLink,
}

const CAccumulatorArithmetic = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Parameters: CArray(SAccumulatedFixed),
    Operation: EAccumulatorOperation,
}

const CAccumulatorPlayerScoreValue = {
    SourceEffect: CEffectLink,
    MinAccumulation: Real,
    MaxAccumulation: Real,
    ApplicationRule: EAccumulatorApplicationRule,
    Player: SEffectWhichPlayer,
    Value: CScoreValueLink,
}


const CAchievement = {
    Category: CStringLink,
    Name: CStringLink,
    Description: CStringLink,
    Icon: CRewardLink,
    Points: UInt32,
    RewardTable: CArray(CRewardLink),
    Flags: CArray(Bit),
    Race: CRaceLink,
    Filters: CArray(Bit),
    MinTermCount: UInt32,
    TermTable: CArray(CAchievementTermLink),
    SharesTerms: CAchievementLink,
    Supersedes: CAchievementLink,
    Tags: CArray(SAchievementTag),
}

const CAchievementTerm = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
}

const CAchievementTermAbil = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    AbilCmd: CAbilCommand,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermAbilInteract = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    AbilCmd: CAbilCommand,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermAbilLoad = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    AbilCmd: CAbilCommand,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermAbilUse = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    AbilCmd: CAbilCommand,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermAchievement = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Child: CAchievementLink,
}

const CAchievementTermBehavior = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Behavior: CBehaviorLink,
}

const CAchievementTermBehaviorAbsorbed = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Behavior: CBehaviorLink,
}

const CAchievementTermBehaviorCount = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Behavior: CBehaviorLink,
}

const CAchievementTermBehaviorElapsed = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Behavior: CBehaviorLink,
    ElapsedTime: CGameTime,
    ElapsedCompare: EValueCompare,
}

const CAchievementTermBehaviorState = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Behavior: CBehaviorLink,
    State: Bit,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermCombine = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Type: EAchievementTermCombine,
    ChildTable: CArray(CAchievementTermLink),
}

const CAchievementTermEffect = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Effect: CEffectLink,
    WhichPlayer: SEffectWhichPlayer,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermEffectAbsorbed = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Effect: CEffectLink,
    WhichPlayer: SEffectWhichPlayer,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermEffectDamaged = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Effect: CEffectLink,
    WhichPlayer: SEffectWhichPlayer,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermEffectDodged = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Effect: CEffectLink,
    WhichPlayer: SEffectWhichPlayer,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermEffectHealed = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Effect: CEffectLink,
    WhichPlayer: SEffectWhichPlayer,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermEffectKilled = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Effect: CEffectLink,
    WhichPlayer: SEffectWhichPlayer,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermEffectUse = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Effect: CEffectLink,
    WhichPlayer: SEffectWhichPlayer,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermGeneric = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
}

const CAchievementTermReplay = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
}

const CAchievementTermScoreValue = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    ScoreValue: CScoreValueLink,
}

const CAchievementTermTime = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
}

const CAchievementTermUnit = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Unit: CUnitLink,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermUnitBirth = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Unit: CUnitLink,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermUnitDeath = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Unit: CUnitLink,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermUnitKills = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Unit: CUnitLink,
    ValidatorArray: CArray(CValidatorLink),
}

const CAchievementTermUnitRegen = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Unit: CUnitLink,
    ValidatorArray: CArray(CValidatorLink),
    Vital: EUnitVital,
}

const CAchievementTermUnitSupplyLoss = {
    Name: CStringLink,
    Description: CStringLink,
    Evaluate: EAchievementTermEvaluate,
    Flags: CArray(Bit),
    Compare: EValueCompare,
    Previous: EAchievementTermPrevious,
    Quantity: UInt64,
    Repeat: UInt64,
    Unit: CUnitLink,
    ValidatorArray: CArray(CValidatorLink),
    Period: CGameTime,
}

const CActor = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
}

const CActorBase = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
}

const CActorBearings = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
}

const CActorCamera = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Camera: CCameraLink,
    HostEye: SActorRequest,
    HostEyeSiteOps: SActorSiteOpsData,
}

const CActorModel = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}

const CActorModelMaterial = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    MaterialType: EActorModelMaterialType,
    ModelMaterialFlags: CArray(Bit),
}

const CActorQuad = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    LaunchActor: CActorCreateKey,
    LaunchHeight: real32,
    CenterActor: CActorCreateKey,
    CenterHeight: real32,
    ImpactActor: CActorCreateKey,
    ImpactHeight: real32,
    Quad: CQuad,
    Height: real32,
    Width: real32,
    HeightRange: CRange,
    QuadFlags: CArray(Bit),
    Decoration: SActorQuadDecoration,
    OriginHeightLookaheadDistance: real32,
    OriginHeightLookaheadIncrement: real32,
    HostImpact: SActorRequest,
    HostImpactSiteOps: SActorSiteOpsData,
}

const CActorForce = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Receiver: SActorRequest,
    Field: EActorForceField,
    Duration: CVariatorActorReal32,
    Magnitude: CVariatorActorReal32,
    ForceFlags: CArray(Bit),
}

const CActorForceLineSegment = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Receiver: SActorRequest,
    Field: EActorForceField,
    Duration: CVariatorActorReal32,
    Magnitude: CVariatorActorReal32,
    ForceFlags: CArray(Bit),
    HostEnd: SActorRequest,
    HostEndSiteOps: SActorSiteOpsData,
}

const CActorBeam = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    HostLaunch: SActorRequest,
    HostLaunchSiteOps: SActorSiteOpsData,
    HostImpact: SActorRequest,
    HostImpactSiteOps: SActorSiteOpsData,
}

const CActorRange = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Abil: SActorRangeAbil,
    Behavior: CBehaviorLink,
    Sight: CUnitLink,
    Weapon: CWeaponLink,
    Range: real32,
    Arc: real32,
    Icon: CImagePath,
    IconScale: C2Vector,
    IconArcLength: real32,
    IconTint: CColor,
    RangeFlags: CArray(Bit),
    CliffLevelFlags: CcliffLevelCompareCountFlagArray,
}

const CActorRegion = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    QueryAbilCmd: CAbilCommand,
    QueryEffect: CEffectLink,
    QueryFilters: CTargetFilters,
    QueryRange: real32,
    NotifyRadiusKey: CRefKey,
    NotifyArcKey: CRefKey,
    NotifyClosestScaleKey: CRefKey,
    RegionFlags: CArray(Bit),
}

const CActorSite = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    SiteFlags: CArray(Bit),
}

const CActorSiteOp = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
}

const CActorSiteOpBase = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
}

const CActorSound = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Sound: CSoundLink,
    SoundFlags: CArray(Bit),
    Layers: CArray(SActorSoundLayer),
    PlayMode: EActorSoundPlayMode,
    LoopCount: Int32,
}

const CActorSplat = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Color: CColor,
    FadeIn: real32,
    FadeOut: real32,
    HoldTime: real32,
    Layer: ESplatLayer,
    Model: CModelLink,
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    Height: EActorSplatHeight,
}

const CActorAction = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    LaunchGuideAlias: CActorKey,
    LaunchSiteOps: SActorSiteOpsData,
    LaunchSite: CActorCreateKey,
    LaunchSiteFallback: CActorCreateKey,
    LaunchAttachQuery: SAttachQuery,
    LaunchRequest: SActorRequest,
    LaunchAssets: SActorAVPair,
    LaunchModel: CActorCreateKey,
    LaunchSound: CActorCreateKey,
    LaunchTerrainSquibModel: CActorCreateKey,
    LaunchTerrainSquibSound: CActorCreateKey,
    LaunchTerrainSquibMap: CArray(SActorActionTerrainSquib),
    ContainerSiteOps: SActorSiteOpsData,
    ContainerSite: CActorCreateKey,
    ContainerAttachQuery: SAttachQuery,
    ContainerAssets: SActorAVPair,
    ContainerModel: CActorCreateKey,
    ContainerSound: CActorCreateKey,
    ContainerTerrainSquibModel: CActorCreateKey,
    ContainerTerrainSquibSound: CActorCreateKey,
    ContainerTerrainSquibMap: CArray(SActorActionTerrainSquib),
    Beam: CActorKey,
    BeamScope: EActorEffectScope,
    Missile: CActorKey,
    HostImpactSource: SActorRequest,
    ImpactGuideAlias: CActorKey,
    ImpactSiteOps: SActorSiteOpsData,
    ImpactSiteOpsReaction: SActorSiteOpsData,
    ImpactSite: CActorCreateKey,
    ImpactSiteFallback: CActorCreateKey,
    ImpactAttachQuery: SAttachQuery,
    ImpactReattachQuery: SAttachQuery,
    ImpactPointSiteOps: SActorSiteOpsData,
    ImpactPointSite: CActorCreateKey,
    ImpactMap: CArray(SActorAVCluster),
    ImpactModel: CActorCreateKey,
    ImpactModelReaction: CActorCreateKey,
    ImpactSound: CActorCreateKey,
    ImpactPhysics: CArray(SActorPhysicsData),
    ImpactTerrainSquibModel: CActorCreateKey,
    ImpactTerrainSquibSound: CActorCreateKey,
    ImpactTerrainSquibMap: CArray(SActorActionTerrainSquib),
    DamageSiteOps: SActorSiteOpsData,
    DamageSiteOpsReaction: SActorSiteOpsData,
    DamageSite: CActorCreateKey,
    DamageAttachQuery: SAttachQuery,
    DamageReattachQuery: SAttachQuery,
    DamageMap: CArray(SActorAVCluster),
    DamageModel: CActorCreateKey,
    DamageModelReaction: CActorCreateKey,
    DamageSound: CActorCreateKey,
    DamagePhysics: CArray(SActorPhysicsData),
    DamageTerrainSquibModel: CActorCreateKey,
    DamageTerrainSquibSound: CActorCreateKey,
    DamageTerrainSquibMap: CArray(SActorActionTerrainSquib),
    AcquisitionYawHalfArc: CActorAngle,
    AcquisitionPitchHalfArc: CActorAngle,
    AccuracyHalfArc: CActorAngle,
    WeaponFireTrackingTimeWindow: real32,
    ShieldFlashType: EActorShieldFlashType,
    ShieldRippleScaleFactor: real32,
    ActionFlags: CArray(Bit),
    AttackAnimSource: CRefKey,
    AttackAnimName: CAnimNameKey,
    ForceCommencementFrom: CEffectLink,
    CombatRevealDurationType: EActorCombatRevealDurationType,
    Lifetime: real32,
}

const CActorActionOverride = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    MissileModel: CModelLink,
    ImpactModel: CModelLink,
    DamageModel: CModelLink,
}

const CActorArc = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Angle: real32,
    Radius: real32,
    AngleAnimProps: CAnimProps,
}

const CActorBeamSimple = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    HostLaunch: SActorRequest,
    HostLaunchSiteOps: SActorSiteOpsData,
    HostImpact: SActorRequest,
    HostImpactSiteOps: SActorSiteOpsData,
}

const CActorBeamStandard = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    HostLaunch: SActorRequest,
    HostLaunchSiteOps: SActorSiteOpsData,
    HostImpact: SActorRequest,
    HostImpactSiteOps: SActorSiteOpsData,
    Beam: CBeamLink,
}

const CActorBlob = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    InitScale: C2Vector,
    MaxScale: C2Vector,
    ScaleDeltaTime: C2Vector,
}

const CActorCameraModel = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Camera: CRefKey,
    DoFAttenuationStartModel: CModelLink,
    DoFAttenuationEndModel: CModelLink,
}

const CActorCreep = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    FoliageSpawnTarget: CActorCreateKey,
    SubjectResponses: CArray(SActorQuerySubjectResponse),
}

const CActorCutscene = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    FilePath: CCutscenePath,
}

const CActorDoodad = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    DoodadFlags: CactorDoodadFlagCountFlagArray,
    EditorFlags: CeditorFlagCountFlagArray,
    EditorModel: CModelLink,
    EditorAnim: CAnimProps,
    EditorIcon: CImagePath,
    TexSets: CArray(CTerrainLink),
    Facing: CFacing,
    EditorFacingAlignment: CFangle,
    Footprint: CFootprintLink,
    Radius: real32,
    RandomScaleRange: CRange,
    OccludeHeight: Real,
    BoostedCliffLevel: TCliffLevel,
    BoostedHeight: CArray(Real),
    MinimapIcon: CImagePath,
    MinimapRenderPriority: CActorKey,
    MinimapSize: C2Vector,
    MinimapShape: EMinimapShape,
    MinimapColor: CColor,
    MinimapImage: CImagePath,
    VisibleOpacity: real32,
    ShadowWhenTransparent: Bit,
    VisibleOpacityBlendDuration: real32,
    IgnoreDurationOnLow: Bit,
    NoFlyZoneSoftRadius: Real,
    NoFlyZoneHardRadius: Real,
}

const CActorDoodadPreserver = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}

const CActorFoliageFXSpawner = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Radius: real32,
    SpawnTarget: CActorCreateKey,
}

const CActorEditorCamera = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}

const CActorEditorPoint = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}

const CActorEventMacro = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
}

const CActorEventMacroRunnable = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    Do: CArray(SActorEvent),
}

const CActorForceBox = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Receiver: SActorRequest,
    Field: EActorForceField,
    Duration: CVariatorActorReal32,
    Magnitude: CVariatorActorReal32,
    ForceFlags: CArray(Bit),
    Height: CVariatorActorReal32,
    Length: CVariatorActorReal32,
    Width: CVariatorActorReal32,
    Origin: EActorForceOrigin,
}

const CActorForceConeRoundedEnd = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Receiver: SActorRequest,
    Field: EActorForceField,
    Duration: CVariatorActorReal32,
    Magnitude: CVariatorActorReal32,
    ForceFlags: CArray(Bit),
    HostEnd: SActorRequest,
    HostEndSiteOps: SActorSiteOpsData,
    Angle: CVariatorActorAngle,
    Length: CVariatorActorReal32,
}

const CActorForceCylinder = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Receiver: SActorRequest,
    Field: EActorForceField,
    Duration: CVariatorActorReal32,
    Magnitude: CVariatorActorReal32,
    ForceFlags: CArray(Bit),
    HostEnd: SActorRequest,
    HostEndSiteOps: SActorSiteOpsData,
    Radius: CVariatorActorReal32,
    Length: CVariatorActorReal32,
}

const CActorForceSphere = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Receiver: SActorRequest,
    Field: EActorForceField,
    Duration: CVariatorActorReal32,
    Magnitude: CVariatorActorReal32,
    ForceFlags: CArray(Bit),
    Radius: CVariatorActorReal32,
    IsHemisphere: Bit,
    Direction: EActorForceDirection,
}

const CActorGlobalConfig = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    ActorUnitFallback: CActorCreateKey,
    AttachHarnessActor: CActorCreateKey,
    AttachHarnessSOpAttach: CActorLink,
    AttachHarnessSOpLocalOffset: CActorLink,
    AttachHarnessSOpRotationExplicit: CActorLink,
    BodySquibs: CArray(SActorDeathBodySquib),
    CloakModel: CModelLink,
    CloakModelLow: CModelLink,
    CloakTransitionArray: CArray(SActorCloakTransition),
    CommandUIActor: CActorCreateKey,
    CreepEngulfmentModel: CModelLink,
    CreepHeightClasses: CArray(SActorCreepHeightClass),
    CreepRates: CArray(SActorCreepRate),
    DeathCustomPriorityList: CArray(CActorKey),
    DeathCustoms: CArray(SActorDeathDataCustom),
    MainActor: CActorKey,
    MaxSpeedForSound: Real,
    MinimapRenderPriorityList: CArray(CActorKey),
    MissileBoundsOptSpeedThreshold: real32,
    ModelCacheFallback: CModelLink,
    ModelMaterialPriorityList: CArray(CActorKey),
    PopulationLimitModel: UInt32,
    RevealTint: CColorHDR,
    SceneActor: CActorKey,
    LookAtTypes: CArray(SLookAtType),
    SplatEmitterInit: SSplatEmitterInitInfo,
}

const CActorOverrides = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    ModelOverrides: CArray(SActorOverrideModel),
}

const CActorLight = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}

const CActorLightOmni = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}

const CActorLightSpot = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}

const CActorLightModel = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Light: CRefKey,
}

const CActorLightOmniModel = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Light: CRefKey,
}

const CActorLightSpotModel = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Light: CRefKey,
}

const CActorLookAt = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HostTarget: SActorRequest,
    HostTargetSiteOps: SActorSiteOpsData,
    Type: CActorKey,
    Types: CArray(SLookAtType),
}

const CActorList = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    IsAutoDestroy: Bit,
}

const CActorListPerPlayer = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    IsAutoDestroy: Bit,
}

const CActorPortrait = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    FaceFXTarget: CRefKey,
    AnimTargets: CRefKey,
}

const CActorPower = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    PowerSource: CBehaviorLink,
    VisualArray: CArray(CActorCreateKey),
}

const CActorProgress = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    StageArray: CArray(SActorProgressStage),
}

const CActorPropertyCurveSet = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
}

const CActorQueryResponse = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    Subject: SActorQuerySubject,
    OnResponse: CArray(SActorQueryResponse),
}

const CActorRegionArc = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    QueryAbilCmd: CAbilCommand,
    QueryEffect: CEffectLink,
    QueryFilters: CTargetFilters,
    QueryRange: real32,
    NotifyRadiusKey: CRefKey,
    NotifyArcKey: CRefKey,
    NotifyClosestScaleKey: CRefKey,
    RegionFlags: CArray(Bit),
    Angle: real32,
    Radius: real32,
}

const CActorRegionCircle = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    QueryAbilCmd: CAbilCommand,
    QueryEffect: CEffectLink,
    QueryFilters: CTargetFilters,
    QueryRange: real32,
    NotifyRadiusKey: CRefKey,
    NotifyArcKey: CRefKey,
    NotifyClosestScaleKey: CRefKey,
    RegionFlags: CArray(Bit),
    Radius: real32,
}

const CActorRegionCombine = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    QueryAbilCmd: CAbilCommand,
    QueryEffect: CEffectLink,
    QueryFilters: CTargetFilters,
    QueryRange: real32,
    NotifyRadiusKey: CRefKey,
    NotifyArcKey: CRefKey,
    NotifyClosestScaleKey: CRefKey,
    RegionFlags: CArray(Bit),
    ChildArray: CArray(CActorCreateKey),
}

const CActorRegionGame = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    QueryAbilCmd: CAbilCommand,
    QueryEffect: CEffectLink,
    QueryFilters: CTargetFilters,
    QueryRange: real32,
    NotifyRadiusKey: CRefKey,
    NotifyArcKey: CRefKey,
    NotifyClosestScaleKey: CRefKey,
    RegionFlags: CArray(Bit),
}

const CActorRegionPolygon = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    QueryAbilCmd: CAbilCommand,
    QueryEffect: CEffectLink,
    QueryFilters: CTargetFilters,
    QueryRange: real32,
    NotifyRadiusKey: CRefKey,
    NotifyArcKey: CRefKey,
    NotifyClosestScaleKey: CRefKey,
    RegionFlags: CArray(Bit),
    PointArray: CArray(C2Vector),
}

const CActorRegionQuad = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    QueryAbilCmd: CAbilCommand,
    QueryEffect: CEffectLink,
    QueryFilters: CTargetFilters,
    QueryRange: real32,
    NotifyRadiusKey: CRefKey,
    NotifyArcKey: CRefKey,
    NotifyClosestScaleKey: CRefKey,
    RegionFlags: CArray(Bit),
    Quad: CQuad,
    Height: real32,
    Width: real32,
}

const CActorRegionWater = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    QueryAbilCmd: CAbilCommand,
    QueryEffect: CEffectLink,
    QueryFilters: CTargetFilters,
    QueryRange: real32,
    NotifyRadiusKey: CRefKey,
    NotifyArcKey: CRefKey,
    NotifyClosestScaleKey: CRefKey,
    RegionFlags: CArray(Bit),
}

const CActorScene = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
}

const CActorSelection = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Color: CColor,
    FadeIn: real32,
    FadeOut: real32,
    HoldTime: real32,
    Layer: ESplatLayer,
    Model: CModelLink,
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    Height: EActorSplatHeight,
    Alpha: C3Vector,
    FallOff: real32,
    InnerBoundaryFallOffRatio: real32,
    InnerBoundaryRatio: real32,
    InnerOffsetRatio: real32,
    InnerWidth: real32,
    OuterWidth: real32,
    HalfHeight: real32,
    Attenuation: real32,
    HostRadiusPercent: real32,
    RotationSpeed: real32,
    SegmentCount: UInt32,
    SegmentPercentSolid: real32,
    SelectionFlags: CArray(Bit),
    SelectionFilter: CArray(Bit),
}

const CActorSetQueried = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    Host: SActorRequest,
    AttachQuery: SAttachQuery,
    SpawnTarget: CActorCreateKey,
    RequiredSquibType: ESquibType,
}

const CActorShadow = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Color: CColor,
    FadeIn: real32,
    FadeOut: real32,
    HoldTime: real32,
    Layer: ESplatLayer,
    Model: CModelLink,
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    Height: EActorSplatHeight,
    Alpha: C3Vector,
    FallOff: real32,
    HalfHeight: real32,
    Attenuation: real32,
    HostRadiusPercent: real32,
}

const CActorShield = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Ripple: CActorCreateKey,
    ScaleDamageMin: real32,
    ScaleDamageMax: real32,
    RadiusMin: real32,
    RadiusMax: real32,
}

const CActorShieldImpact = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    VisualDirectionalFacer: CActorCreateKey,
    VisualDirectionalHeader: CActorCreateKey,
    VisualDirectionless: CActorCreateKey,
    RadiusMedium: real32,
    RadiusLarge: real32,
    MaxCountSmall: UInt32,
    MaxCountMedium: UInt32,
    MaxCountLarge: UInt32,
}

const CActorSimple = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
}

const CActorSiteBillboard = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    SiteFlags: CArray(Bit),
    BillboardType: EActorSiteBillboardType,
    TowardsCameraDistance: real32,
    HoldRotation: Bit,
    UpdateDriveBearings: Bit,
}

const CActorSiteMover = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    SiteFlags: CArray(Bit),
    Acceleration: real32,
    Deceleration: real32,
    Speed: real32,
    SpeedMax: real32,
}

const CActorSiteOrbiter = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    SiteFlags: CArray(Bit),
    Type: EActorSiteOrbiterType,
    BaseYaw: CVariatorActorFangle,
    BaseYawPeriod: CVariatorActorReal32,
    BasePitch: CVariatorActorFangle,
    BasePitchPeriod: CVariatorActorReal32,
    BaseRadiusInner: CVariatorActorReal32,
    BaseRadiusOuter: CVariatorActorReal32,
    BaseRadiusPeriod: CVariatorActorReal32,
    EndYawPeriod: CVariatorActorReal32,
    EndPitchPeriod: CVariatorActorReal32,
    EndRollPeriod: CVariatorActorReal32,
    EndRadiusInner: CVariatorActorReal32,
    EndRadiusOuter: CVariatorActorReal32,
    EndRadiusPeriod: CVariatorActorReal32,
}

const CActorSiteRocker = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    SiteFlags: CArray(Bit),
    Elevation: CVariatorActorReal32,
    ElevationPeriod: CVariatorActorReal32,
    Pitch: CVariatorActorFangle,
    PitchPeriod: CVariatorActorReal32,
    Roll: CVariatorActorFangle,
    RollPeriod: CVariatorActorReal32,
}

const CActorSiteOp2DRotation = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
}

const CActorSiteOpAction = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Location: EActorSiteOpActionLocation,
}

const CActorSiteOpAttach = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    AttachQuery: SAttachQuery,
    ReattachQuery: SAttachQuery,
    ForceSoftAttach: Bit,
    Source: EActorSiteOpAttachSource,
}

const CActorSiteOpAttachVolume = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostIncoming: SActorRequest,
    HostIncomingSiteOps: SActorSiteOpsData,
    UpwardVisibilityEnhancement: Bit,
    UpwardVisibilityEnhancementVarianceUp: CActorAngle,
    UpwardVisibilityEnhancementVarianceDown: CActorAngle,
}

const CActorSiteOpBanker = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    RollAngleMax: CActorAngle,
    RollInRate: CActorAngle,
    RollOutRate: CActorAngle,
    RollOutRemainderFractionForLevelOff: real32,
}

const CActorSiteOpBankerUnit = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    RollMax: CVariatorActorAngle,
    RollInActivationAngle: CActorAngle,
    RollInArc: CVariatorActorAngle,
    RollOutDuration: CVariatorActorReal32,
}

const CActorSiteOpBasic = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    BasicType: EActorSiteOpBasicType,
    WorldPosition: C3Vector,
}

const CActorSiteOpGameCameraFollow = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
}

const CActorSiteOpDeathMotion = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostInitial: SActorRequest,
    HostInitialSiteOps: SActorSiteOpsData,
    Deceleration: real32,
}

const CActorSiteOpDeltaSum = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Deltas: CArray(SActorHostedDelta),
    DeltaSumFlags: CArray(Bit),
}

const CActorSiteOpEffect = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Location: EActorEffectLocation,
    ZOnly: Bit,
}

const CActorSiteOpForward = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Forward: C3Vector,
    HostForward: SActorRequest,
    HostForwardSiteOps: SActorSiteOpsData,
    Invert: Bit,
}

const CActorSiteOpHeight = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HeightSourceType: EActorHeightSourceType,
    HostHeight: SActorRequest,
}

const CActorSiteOpHigherOfTerrainAndWater = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HeightSourceType: EActorHeightSourceType,
    ForcedWadingMaxDepth: real32,
    TerrainAndWaterFlags: CArray(Bit),
}

const CActorSiteOpHostBearings = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostBearings: SActorRequest,
    HostBearingsSiteOps: SActorSiteOpsData,
}

const CActorSiteOpHostedOffset = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostOffset: SActorRequest,
    HostOffsetSiteOps: SActorSiteOpsData,
}

const CActorSiteOpIncoming = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostImpact: SActorRequest,
    HostIncoming: SActorRequest,
    Type: EActorIncomingType,
    PullBack: real32,
    FreezePositionAtImpact: Bit,
}

const CActorSiteOpLocalOffset = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    LocalOffset: C3Vector,
    OverridingLength: CVariatorActorReal32,
    OverridingLengthExtra: SAccumulatedFixed,
}

const CActorSiteOpOrientAttachPointTo = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    AttachQuery: SAttachQuery,
    Type: EActorSiteOpOrientAttachPointToType,
}

const CActorSiteOpPatch = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    PatchAngle: CActorAngle,
    PatchRadius: real32,
    Distribution: EActorRadialDistribution,
    Mean: real32,
    Variance: real32,
}

const CActorSiteOpPersistentOffset = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostInitial: SActorRequest,
    HostInitialSiteOps: SActorSiteOpsData,
}

const CActorSiteOpOrbiter = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Type: EActorSiteOrbiterType,
    BaseYaw: CVariatorActorFangle,
    BaseYawPeriod: CVariatorActorReal32,
    BasePitch: CVariatorActorFangle,
    BasePitchPeriod: CVariatorActorReal32,
    BaseRadiusInner: CVariatorActorReal32,
    BaseRadiusOuter: CVariatorActorReal32,
    BaseRadiusPeriod: CVariatorActorReal32,
    EndYawPeriod: CVariatorActorReal32,
    EndPitchPeriod: CVariatorActorReal32,
    EndRollPeriod: CVariatorActorReal32,
    EndRadiusInner: CVariatorActorReal32,
    EndRadiusOuter: CVariatorActorReal32,
    EndRadiusPeriod: CVariatorActorReal32,
}

const CActorSiteOpPhysicsImpact = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Type: EActorSiteOpPhysicsImpactType,
}

const CActorSiteOpRandomPointInCircle = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Radius: real32,
    Distribution: EActorRadialDistribution,
    Mean: real32,
    Variance: real32,
    RestrictToCircumference: Bit,
    ObserveRotation: Bit,
}

const CActorSiteOpRandomPointInCrossbar = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HalfWidth: real32,
    Distribution: EActorCrossbarDistribution,
    Variance: real32,
}

const CActorSiteOpRandomPointInSphere = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Radius: real32,
    Distribution: EActorRadialDistribution,
    Mean: real32,
    Variance: real32,
    RestrictToSurface: Bit,
}

const CActorSiteOpRotationExplicit = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Forward: C3Vector,
    Up: C3Vector,
    IsLocal: Bit,
}

const CActorSiteOpRotationRandom = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    YawHalfAngle: CActorAngle,
    PitchHalfAngle: CActorAngle,
}

const CActorSiteOpRotationVariancer = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    ForwardAngle: CActorAngle,
    UpAngle: CActorAngle,
    IsUpDominantWhenOrthogonalized: Bit,
}

const CActorSiteOpRotator = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    LocalAxis: C3Vector,
    Rate: CActorAngle,
    Type: EActorSiteOpRotatorType,
    InitialAngle: CActorAngle,
}

const CActorSiteOpRotationSmooth = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Acceleration: CFangleRate,
    Deceleration: CFangleRate,
    MaxSpeed: CFangleRate,
}

const CActorSiteOpSelectionOffset = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
}

const CActorSiteOpSerpentHead = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Aggregate: SSerpentAggregate,
    Segment: SSerpentSegment,
}

const CActorSiteOpSerpentSegment = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Head: CRefKey,
    Segment: SSerpentSegment,
}

const CActorSiteOpShadow = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HeightSourceType: EActorHeightSourceType,
    HeightOffset: real32,
    HeightOffsetOnCliff: real32,
    CliffTests: CArray(C2Vector),
    HeightTests: CArray(C2Vector),
    HeightTestType: EActorHeightTestType,
    ShadowFlags: CArray(Bit),
}

const CActorSiteOpTether = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostTether: SActorRequest,
    HostTetherSiteOps: SActorSiteOpsData,
    EnableX: EActorSiteOpTetherEnableType,
    EnableY: EActorSiteOpTetherEnableType,
    EnableZ: EActorSiteOpTetherEnableType,
    XMinimum: real32,
    XMaximum: real32,
    YMinimum: real32,
    YMaximum: real32,
    ZMinimum: real32,
    ZMaximum: real32,
}

const CActorSiteOpTipability = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    TipabilityFlags: CArray(Bit),
}

const CActorSiteOpTilter = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    TiltType: EActorTiltType,
    TiltAmount: real32,
    AngleRate: real32,
}

const CActorSiteOpUp = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    Up: C3Vector,
    HostUp: SActorRequest,
    HostUpSiteOps: SActorSiteOpsData,
    Invert: Bit,
}

const CActorSiteOpZ = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostZ: SActorRequest,
}

const CActorSiteOpCursor = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
}

const CActorSiteOpYawLimiter = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostYawLimiter: SActorRequest,
    HostYawLimiterSiteOps: SActorSiteOpsData,
    YawHalfAngle: CActorAngle,
    ExtraYawAngle: CActorAngle,
}

const CActorSiteOpPitchLimiter = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    HoldPosition: Bit,
    HoldRotation: Bit,
    HostPitchLimiter: SActorRequest,
    HostPitchLimiterSiteOps: SActorSiteOpsData,
    PitchHalfAngle: CActorAngle,
}

const CActorSnapshot = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}

const CActorStateMonitor = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    StateArray: CArray(SActorStateInfo),
    StateThinkInterval: CGameTime,
}

const CActorSquib = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Map: CArray(SActorAVPair),
    HarnessModel: CActorCreateKey,
    HarnessSound: CActorCreateKey,
}

const CActorBatch = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    HarnessActor: CActorCreateKey,
    Count: SAccumulatedUInt32,
}

const CActorTerrain = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
}

const CActorTerrainDeformer = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Footprint: CFootprintLink,
    InfluenceRange: real32,
    BlendTime: real32,
    HeightDelta: real32,
    TerrainDeformerFlags: CArray(Bit),
    FoliageFXDeathSpawnTarget: CActorCreateKey,
}

const CActorText = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    TextScale: real32,
    MaxSize: C2Vector,
    FixedSize: UInt32,
    AlignH: EActorTextAlignment,
    AlignV: EActorTextAlignment,
    HeightOffset: real32,
    Color: CColor,
    Options: CArray(Bit),
    Text: CStringLink,
}

const CActorTurret = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    PitchQuery: SAttachQuery,
    YawQuery: SAttachQuery,
    TurretBody: SActorRequest,
}

const CActorUnit = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Baselines: CArray(SActorBaseline),
    BuildModel: CModelLink,
    DeathArray: CArray(SActorDeathData),
    DeathCustoms: CArray(SActorDeathDataCustom),
    DeathCustomData: CArray(SActorDeathDataCustomGroup),
    DeathActorModel: CActorCreateKey,
    DeathActorModelLow: CActorCreateKey,
    DeathActorSound: CActorCreateKey,
    DeathActorVoice: CActorCreateKey,
    EditorModel: CModelLink,
    EditorAnim: CAnimProps,
    ImpactSoundActor: CActorCreateKey,
    ImpactSound: CSoundLink,
    ImpactSoundExtras: CArray(SActorUnitImpactSoundExtras),
    OverkillByDamagePastRemainingHealth: SDamagePastRemainingHealth,
    OverkillByDamageOverInterval: SDamageOverInterval,
    PhysicsMatchKeysOrdered: CActorTableKeys1x3,
    PlacementModel: CModelLink,
    PlacementSound: CSoundLink,
    PlacementActorModel: CActorCreateKey,
    PlaceholderActorModel: CActorCreateKey,
    PortraitActor: CActorCreateKey,
    PortraitModel: CModelLink,
    PortraitCamera: CCameraLink,
    RandomScaleRange: CRange,
    RingRadius: real32,
    StandAnimTurnTime: CGameTime,
    StandAnimTurnTimeScaleMin: real32,
    TerrainSquibs: CArray(STerrainSquib),
    VarianceWindowStandIntro: real32,
    VarianceWindowStand: real32,
    VarianceWindowWalkIntro: real32,
    VarianceWindowWalk: real32,
    VarianceWindowWalkOutro: real32,
    WalkAnimMoveSpeed: CGameRate,
    WalkAnimTimeScalingAsFlyer: Bit,
    AbilSoundArray: CArray(SUnitAbilSound),
    AddonIndicator: CStringLink,
    BarDistance: UInt32,
    BarHeight: Int32,
    BarOffset: Int32,
    BarWidth: Int32,
    CantSelectUncontrollableTooltip: CStringLink,
    CooldownDisplay: CArray(CAbilCommand),
    CustomUnitStatusFrame: CDescPath,
    CustomUnitStatusOffset: C2iVector,
    CustomUnitStatusAttachment: EAttachmentID,
    CustomUnitStatusActor: CRefKey,
    ErrorArray: CArray(SErrorOverride),
    GlossaryAnim: CString,
    GroupIcon: SLayerIcon,
    GroupIconVariations: CArray(SLayerIconVariation),
    GroupSoundArray: CArray(CSoundLink),
    GroupSoundThreshold: UInt32,
    HeroIcon: CImagePath,
    HeroIconVariations: CArray(SIconVariation),
    HighlightTooltip: CStringLink,
    HighlightSubTooltip: CStringLink,
    InfoText: CStringLink,
    LifeArmorIcon: CImagePath,
    MinimapIcon: CImagePath,
    MinimapIconIsTeamColored: Bit,
    MinimapIconScale: real32,
    MinimapIconBackground: CImagePath,
    MinimapIconBackgroundIsTeamColored: Bit,
    MinimapIconBackgroundScale: real32,
    MinimapIconBackgroundTintColor: CColor,
    MinimapIconTintColor: CColor,
    MinimapRenderPriority: CActorKey,
    MinimapTooltip: CStringLink,
    MinimapFlashWhenAttacked: Bit,
    MinimapUseSelfColor: Bit,
    MinimapUseSelectionColor: Bit,
    MinimapUnitStatusFrame: CDescPath,
    MovementHerdNode: CHerdNodeLink,
    NameOffset: Int32,
    SelectAbilCmd: CAbilCommand,
    ShieldArmorIcon: CImagePath,
    SnapshotActor: CActorCreateKey,
    SoundArray: CArray(CSoundLink),
    StatusBarFlags: CunitStatusCountFlagArray,
    StatusBarGroups: CunitStatusGroupCountFlagArray,
    StatusBarOn: CunitStatusCountFlagArray,
    StatusColors: CArray(SStatusColor),
    StatusChargeData: SStatusChargeData,
    StatusHarvesterData: SStatusHarvesterData,
    StatusTextInfo: STextTagParameters,
    UnitBorderNormalColor: CColorRGB,
    UnitBorderSubgroupColor: CColorRGB,
    UnitFlags: CArray(Bit),
    UnitIcon: CImagePath,
    UnitIconVariations: CArray(SIconVariation),
    UnitIconMultiple: CImagePath,
    UnitKillRank: CArray(SUnitKillRank),
    UnitModelFrameActor: CActorCreateKey,
    VitalColors: CArray(SVitalColor,EUnitVital),
    VitalNames: CArray(CStringLink,EUnitVital),
    Wireframe: SLayerIcon,
    WireframeVariations: CArray(SLayerIconVariation),
    WireframeShield: SLayerIconShield,
    WireframeShieldColor: CColor,
    WireframeShieldVariations: CArray(SLayerIconShieldVariation),
    VisibleOpacity: real32,
    VisibleOpacityBlendDuration: real32,
    UnitButton: CButtonLink,
    UnitButtonMultiple: CButtonLink,
}

const CActorUnitRing = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    RingRadius: real32,
}

const CActorMissile = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
    Baselines: CArray(SActorBaseline),
    BuildModel: CModelLink,
    DeathArray: CArray(SActorDeathData),
    DeathCustoms: CArray(SActorDeathDataCustom),
    DeathCustomData: CArray(SActorDeathDataCustomGroup),
    DeathActorModel: CActorCreateKey,
    DeathActorModelLow: CActorCreateKey,
    DeathActorSound: CActorCreateKey,
    DeathActorVoice: CActorCreateKey,
    EditorModel: CModelLink,
    EditorAnim: CAnimProps,
    ImpactSoundActor: CActorCreateKey,
    ImpactSound: CSoundLink,
    ImpactSoundExtras: CArray(SActorUnitImpactSoundExtras),
    OverkillByDamagePastRemainingHealth: SDamagePastRemainingHealth,
    OverkillByDamageOverInterval: SDamageOverInterval,
    PhysicsMatchKeysOrdered: CActorTableKeys1x3,
    PlacementModel: CModelLink,
    PlacementSound: CSoundLink,
    PlacementActorModel: CActorCreateKey,
    PlaceholderActorModel: CActorCreateKey,
    PortraitActor: CActorCreateKey,
    PortraitModel: CModelLink,
    PortraitCamera: CCameraLink,
    RandomScaleRange: CRange,
    RingRadius: real32,
    StandAnimTurnTime: CGameTime,
    StandAnimTurnTimeScaleMin: real32,
    TerrainSquibs: CArray(STerrainSquib),
    VarianceWindowStandIntro: real32,
    VarianceWindowStand: real32,
    VarianceWindowWalkIntro: real32,
    VarianceWindowWalk: real32,
    VarianceWindowWalkOutro: real32,
    WalkAnimMoveSpeed: CGameRate,
    WalkAnimTimeScalingAsFlyer: Bit,
    AbilSoundArray: CArray(SUnitAbilSound),
    AddonIndicator: CStringLink,
    BarDistance: UInt32,
    BarHeight: Int32,
    BarOffset: Int32,
    BarWidth: Int32,
    CantSelectUncontrollableTooltip: CStringLink,
    CooldownDisplay: CArray(CAbilCommand),
    CustomUnitStatusFrame: CDescPath,
    CustomUnitStatusOffset: C2iVector,
    CustomUnitStatusAttachment: EAttachmentID,
    CustomUnitStatusActor: CRefKey,
    ErrorArray: CArray(SErrorOverride),
    GlossaryAnim: CString,
    GroupIcon: SLayerIcon,
    GroupIconVariations: CArray(SLayerIconVariation),
    GroupSoundArray: CArray(CSoundLink),
    GroupSoundThreshold: UInt32,
    HeroIcon: CImagePath,
    HeroIconVariations: CArray(SIconVariation),
    HighlightTooltip: CStringLink,
    HighlightSubTooltip: CStringLink,
    InfoText: CStringLink,
    LifeArmorIcon: CImagePath,
    MinimapIcon: CImagePath,
    MinimapIconIsTeamColored: Bit,
    MinimapIconScale: real32,
    MinimapIconBackground: CImagePath,
    MinimapIconBackgroundIsTeamColored: Bit,
    MinimapIconBackgroundScale: real32,
    MinimapIconBackgroundTintColor: CColor,
    MinimapIconTintColor: CColor,
    MinimapRenderPriority: CActorKey,
    MinimapTooltip: CStringLink,
    MinimapFlashWhenAttacked: Bit,
    MinimapUseSelfColor: Bit,
    MinimapUseSelectionColor: Bit,
    MinimapUnitStatusFrame: CDescPath,
    MovementHerdNode: CHerdNodeLink,
    NameOffset: Int32,
    SelectAbilCmd: CAbilCommand,
    ShieldArmorIcon: CImagePath,
    SnapshotActor: CActorCreateKey,
    SoundArray: CArray(CSoundLink),
    StatusBarFlags: CunitStatusCountFlagArray,
    StatusBarGroups: CunitStatusGroupCountFlagArray,
    StatusBarOn: CunitStatusCountFlagArray,
    StatusColors: CArray(SStatusColor),
    StatusChargeData: SStatusChargeData,
    StatusHarvesterData: SStatusHarvesterData,
    StatusTextInfo: STextTagParameters,
    UnitBorderNormalColor: CColorRGB,
    UnitBorderSubgroupColor: CColorRGB,
    UnitFlags: CArray(Bit),
    UnitIcon: CImagePath,
    UnitIconVariations: CArray(SIconVariation),
    UnitIconMultiple: CImagePath,
    UnitKillRank: CArray(SUnitKillRank),
    UnitModelFrameActor: CActorCreateKey,
    VitalColors: CArray(SVitalColor,EUnitVital),
    VitalNames: CArray(CStringLink,EUnitVital),
    Wireframe: SLayerIcon,
    WireframeVariations: CArray(SLayerIconVariation),
    WireframeShield: SLayerIconShield,
    WireframeShieldColor: CColor,
    WireframeShieldVariations: CArray(SLayerIconShieldVariation),
    VisibleOpacity: real32,
    VisibleOpacityBlendDuration: real32,
    UnitButton: CButtonLink,
    UnitButtonMultiple: CButtonLink,
    HostReturn: SActorRequest,
    HostReturnSiteOps: SActorSiteOpsData,
    IsTentacle: Bit,
    PreHost: CActorKey,
}

const CActorMinimap = {
    CopySource: CActorKey,
    Terms: CActorTerms,
    Aliases: CArray(CActorKey),
    Macros: CArray(CActorKey),
    Sharing: EActorRequestCreateSharing,
    Flags: CArray(Bit),
    Filter: CArray(Bit),
    FilterAtCreation: CArray(Bit),
    VisibleTo: CArray(Bit),
    VisibleToAtCreation: CArray(Bit),
    FilterPlayers: CArray(Bit),
    VisibleToPlayers: CArray(Bit),
    InheritType: EActorHostedPropInheritType,
    Inherits: CArray(Bit),
    AcceptedTransfers: CActorTransferFlags,
    AcceptedHostedPropTransfers: CActorHostedPropTransferFlags,
    FogVisibility: EFogVisibility,
    EditorCategories: TEditorCategories,
    PlayerIdSource: EActorPlayerIdSource,
    Supporter: SActorRequest,
    Preload: CArray(CPreloadLink),
    VisibilityShape: SActorVisibilityShape,
    Remove: CArray(SActorEvent),
    On: CArray(SActorEvent),
    AddToProximitySystem: Bit,
    HostForProps: SActorRequest,
    Host: SActorRequest,
    HostSiteOps: SActorSiteOpsData,
    ScopeBearingsTracking: EActorScopeBearingsTrackingType,
    MaxScale: real32,
    Model: CModelLink,
    ModelAspectSets: CArray(SActorModelAspectSet),
    Scale: CScaleVector,
    AutoScaleFactor: real32,
    AutoScaleFromSelectionFactor: real32,
    AnimBlendTime: real32,
    HostedAttaches: CArray(SActorHostedAttach),
    InternalSplatHeight: EActorSplatHeight,
    HostFor2ndVisibilityTest: SActorRequest,
    HostSiteOpsFor2ndVisibilityTest: SActorSiteOpsData,
    LocalOffsetFor2ndVisibilityTest: C3Vector,
    ModelFlags: CArray(Bit),
    EventDataFootprint: CArray(SEventDataFootprint),
    EventDataFootprintActor: CActorCreateKey,
    EventDataSound: CArray(SEventDataSound),
    EventDataSoundActor: CActorCreateKey,
    ProximityPosition: EActorProximity,
    CreepHeightClass: CActorLabelKey,
    CreepRateGrow: CActorLabelKey,
    CreepRateShrink: CActorLabelKey,
    PhysicsImpactDefault: SActorPhysicsImpactData,
    PhysicsImpacts: CArray(SActorPhysicsImpactData),
    ModelMaterialGlazeDisplayLimit: UInt32,
    LookAtPriorityList: CArray(CActorKey),
}


const CAlert = {
    PrimaryActions: CArray(Bit),
    SecondaryActions: CArray(Bit),
    Display: CArray(Bit),
    Flags: CArray(Bit),
    Fade: real32,
    Icon: CImagePath,
    Life: real32,
    OverlapDuration: real32,
    OverlapGlobalCount: UInt32,
    OverlapLocalCount: UInt32,
    OverlapLocalRadius: Real,
    PingColor: CColor,
    PingModel: CModelLink,
    PingTime: real32,
    QueueTime: real32,
    Sound: CSoundLink,
    Text: CStringLink,
    Tooltip: CStringLink,
    Voice: EUnitSound,
    Peripheral: EAlertPeripheral,
    SupersededVolume: real32,
}


const CArmyCategory = {
    Name: CStringLink,
    Title: CStringLink,
    Help: CStringLink,
    CategoryHelp: CStringLink,
    UnitHelp: CStringLink,
    Icon: CImagePath,
    BankPath: SBankPath,
    Description: CStringLink,
    State: EArmyCategoryState,
    Flags: CArray(Bit),
    Unit: CUnitLink,
    UpgradeArray: CArray(CUpgradeLink),
    AbilCommandArray: CArray(CAbilCommand),
    ArmyUnitArray: CArray(CArmyUnitLink),
    ArmyUpgradeArray: CArray(CArmyUpgradeLink),
    UserReference: CUserReference,
    ExtraUpgradeRequirement: Int32,
    SplitRequirement: Int32,
}

const CArmyUnit = {
    Name: CStringLink,
    Title: CStringLink,
    Help: CStringLink,
    Icon: CImagePath,
    BankPath: SBankPath,
    Description: CStringLink,
    Confirmation: CStringLink,
    Movie: CMoviePath,
    Cost: Int32,
    State: EArmyUnitState,
    Unit: CUnitLink,
    UpgradeArray: CArray(CUpgradeLink),
    AbilCommandArray: CArray(CAbilCommand),
    ArmyUpgradeArray: CArray(CArmyUpgradeLink),
    UserReference: CUserReference,
    EnableButton: CString,
    Skin: CSkinLink,
}

const CArmyUpgrade = {
    Name: CStringLink,
    Icon: CImagePath,
    Requirements: CStringLink,
    Description: CStringLink,
    Tooltip: CStringLink,
    Cost: Int32,
    Movie: CMoviePath,
    State: EArmyUpgradeState,
    UpgradeArray: CArray(CUpgradeLink),
    AbilCommandArray: CArray(CAbilCommand),
    UserReference: CUserReference,
}



const CArtifact = {
    EditorCategories: TEditorCategories,
    Name: CStringLink,
    InfoText: CStringLink,
    AttributeId: CFourCC,
    Model: CModelLink,
    RankArray: CArray(SArtifactRank),
    Universe: EHeroUniverse,
    TileCutsceneFile: CAssetPath,
    PreviewCutsceneFile: CAssetPath,
    HeroSelectCutsceneFile: CAssetPath,
    ReleaseDate: SHeroReleaseDate,
    AdditionalSearchText: CStringLink,
    Talent: CTalentLink,
    Type: EArtifactType,
    HyperlinkId: THyperlinkId,
    AllowedCommanderKeyArray: CArray(CIdentifier),
    Item: CArray(CItemLink),
    Upgrades: CArray(CUpgradeLink),
    PlayerResponses: CArray(CPlayerResponseLink),
    Face: CButtonLink,
    ApplyTo: CplayerRelationshipCountFlagArray,
}

const CArtifactSlot = {
    Name: CStringLink,
    RequiredReward: CRewardLink,
    ProductId: TBattleProductId,
    AllowedTypes: CartifactTypeCountFlagArray,
}

const CAttachMethod = {
}

const CAttachMethodArcTest = {
    Tests: CArray(Bit),
    Type: EAMArcTestType,
}

const CAttachMethodBestMatch = {
    Keys: CAttachKeys,
    Flags: CArray(Bit),
}

const CAttachMethodFilter = {
    Keys: CArray(SAttachKey),
    Logic: EAMFilterLogic,
    AttachType: EAMFilterAttachType,
    FilterType: EAMFilterType,
}

const CAttachMethodAttachType = {
    AttachType: EAMAttachType,
}

const CAttachMethodIncoming = {
}

const CAttachMethodLeastDeflection = {
}

const CAttachMethodNodeOccupancy = {
    Targets: CArray(CModelPath),
    Logic: EAMOccupancyLogic,
}

const CAttachMethodNodeOccupancy2 = {
    Targets: CArray(CModelLink),
    Logic: EAMOccupancyLogic,
}

const CAttachMethodNumericField = {
    Field: EAMNumericField,
    Value: real32,
    Operator: EAMNumericFieldOp,
}

const CAttachMethodPattern = {
    Type: EAMPatternType,
    Keyword: EAttachKeyword,
    Base: CDataSoupKey,
    Offset: UInt32,
    Multiplier: UInt32,
    Driver: CDataSoupKey,
}

const CAttachMethodPortAllocator = {
    PortLimit: UInt32,
}

const CAttachMethodProximity = {
    RequestCount: UInt32,
    DistanceMax: real32,
    SortResults: Bit,
    Location: SEffectWhichLocation,
}

const CAttachMethodRandom = {
    RequestCount: UInt32,
    Distribution: EAMRandomDistribution,
    ExponentialMean: real32,
}

const CAttachMethodReduction = {
    ReductionType: EAMReductionType,
    RequestCount: UInt32,
    RequestCountRange: UInt32,
    RequestPercentage: real32,
    PassChanceEach: real32,
    PassChanceFull: real32,
}

const CAttachMethodVolumesRequery = {
}

const CAttachMethodVolumesTargets = {
}

const CAttachMethodVolumesWeightedPick = {
    VolumeFactor: real32,
    ProximityFactorNear: real32,
    ProximityFactorFar: real32,
}





const CBankCondition = {
}

const CBankConditionCompare = {
    Bank: CString,
    Section: CString,
    Key: CString,
    ValueName: CString,
    Compare: EValueCompare,
}

const CBankConditionCompareValueCount = {
    Bank: CString,
    Section: CString,
    Key: CString,
    ValueName: CString,
    Compare: EValueCompare,
    AddCompare: EValueCompare,
    AddValue: Int32,
    Value: UInt32,
}

const CBankConditionCompareValueInteger = {
    Bank: CString,
    Section: CString,
    Key: CString,
    ValueName: CString,
    Compare: EValueCompare,
    Value: Int32,
}

const CBankConditionCompareValueString = {
    Bank: CString,
    Section: CString,
    Key: CString,
    ValueName: CString,
    Compare: EValueCompare,
    Value: CString,
}

const CBankConditionCompareValueSum = {
    Bank: CString,
    Section: CString,
    Key: CString,
    ValueName: CString,
    Compare: EValueCompare,
    AddCompare: EValueCompare,
    AddValue: Int32,
    Value: Int32,
}

const CBankConditionCombine = {
    Type: EBankConditionCombine,
    CombineArray: CArray(CBankConditionLink),
    Negate: Bit,
}

const CBankConditionCurrentMap = {
    Map: CString,
}

const CBeam = {
}

const CBeamSync = {
}

const CBeamSyncSweeper = {
}

const CBeamAsync = {
}

const CBeamAsyncLinear = {
    Duration: Real,
}

const CBeamAsyncShadow = {
}



const CBehavior = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
}

const CBehaviorAttackModifier = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    Chance: SAccumulatedFixed,
    TargetFilters: CTargetFilters,
    ValidatorArray: CArray(CValidatorLink),
    UniqueSetId: CIdentifier,
    AttackModifierFlags: CArray(Bit),
    WeaponIndexEnableArray: CArray(Bit),
    WeaponIndexDisableArray: CArray(Bit),
    MaxStackCount: UInt32,
    DamageDealtScaled: CArray(SAccumulatedFixed,EDamageKind),
    DamageDealtFraction: CArray(SAccumulatedFixed,EDamageKind),
    DamageDealtUnscaled: CArray(SAccumulatedFixed,EDamageKind),
    DamageTotalMultiplier: CArray(SAccumulatedFixed,EDamageKind),
    PreImpactEffect: CEffectLink,
    ImpactDamageInheritEffect: CEffectLink,
    MultishotSearchPattern: CEffectLink,
}

const CBehaviorAttribute = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    PrimaryName: CStringLink,
    PrimaryTooltip: CStringLink,
    MinPoints: Int32,
    MaxPoints: Int32,
    Modification: SModification,
    PointGainEffect: CEffectLink,
    PointLossEffect: CEffectLink,
    PointDisplayFlags: CequipmentDisplayFlagCountFlagArray,
}

const CBehaviorUnitTracker = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    TrackingValidatorArray: CArray(CValidatorLink),
    MaxTrackedUnits: UInt32,
    UnitAddedAtMaxRule: EBehaviorUnitTrackerAtMaxRule,
    ReplacedEffect: CEffectLink,
    UnitTrackerFlags: CArray(Bit),
    WhichLocation: SEffectWhichLocation,
    SnapRange: Real,
    SnapCount: SAccumulatedUInt32,
    SnapRule: EBehaviorUnitTrackerSnapRule,
    SnapAngleAdjustment: CFangle,
    SharedListPlayer: SEffectWhichPlayer,
}

const CBehaviorBuff = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    DisplayDuration: CArray(Bit),
    DisplayShield: CArray(Bit),
    DisableValidatorArray: CArray(CValidatorLink),
    RemoveValidatorArray: CArray(CValidatorLink),
    BuffFlags: CArray(Bit),
    MaxStackCount: UInt32,
    MaxStackCountPerCaster: UInt32,
    TimeScaleSource: SEffectWhichTimeScale,
    Duration: SAccumulatedGameTime,
    DurationOverride: CArray(SBehaviorDuration),
    DurationShield: CGameTime,
    DurationVitalArray: CArray(CGameTime,EUnitVital),
    DurationVitalMaxArray: CArray(CGameTime,EUnitVital), 
    DurationRandomMin: CGameTime,
    DurationRandomMax: CGameTime,
    DurationBonusMin: CGameTime,
    DurationBonusMax: CGameTime,
    Period: CGameTime,
    PeriodCount: UInt32,
    InitialEffect: CEffectLink,
    RefreshEffect: CEffectLink,
    PeriodicEffect: CEffectLink,
    PeriodicEffectRateMultiplier: SAccumulatedFixed,
    PeriodicDisplayEffect: CArray(CEffectLink),
    FinalEffect: CEffectLink,
    ExpireEffect: CEffectLink,
    Player: SEffectWhichPlayer,
    AcquirePlayer: SEffectWhichPlayer,
    Modification: SModification,
    DeathType: EDeathType,
    AINotifyEffect: CEffectLink,
    DamageResponse: SDamageResponse,
    KillCredit: SEffectWhichUnit,
    Replace: EBehaviorBuffReplace,
    ReplaceLocation: SEffectWhichLocation,
    HerdNode: CHerdNodeLink,
    VitalRegenVitalsRemain: CArray(SVitalRegenVitalRemain,EUnitVital),
    VitalRegenVitalsRemainPercent: CArray(SVitalRegenVitalRemain,EUnitVital),
    RevealUnit: SEffectWhichUnit,
    StackAlias: CIdentifier,
    StackAliasPriority: UInt32,
}

const CBehaviorClickResponse = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    Chance: Real,
    Count: UInt32,
    CountDelay: CGameTime,
    CountEffect: CEffectLink,
    Relationship: CplayerRelationshipCountFlagArray,
    ResetDelay: CGameTime,
    ResetEffect: CEffectLink,
}

const CBehaviorConjoined = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    ConjoinedFlags: CArray(Bit),
    Radius: Real,
}

const CBehaviorCreepSource = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    Delay: CGameTime,
    Period: CGameTime,
    Build: CFootprintLink,
    Start: CFootprintLink,
    Birth: CFootprintLink,
    Grown: CFootprintLink,
    DisableValidatorArray: CArray(CValidatorLink),
    RemoveValidatorArray: CArray(CValidatorLink),
}

const CBehaviorJump = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    TriggerHeightDeltaMin: Real,
    TriggerHeightDeltaMax: Real,
    InitiateRangeUp: Real,
    InitiateRangeDown: Real,
    JumpRangeMax: Real,
    JumpEffectUp: CEffectLink,
    JumpEffectDown: CEffectLink,
    Mover: CMoverLink,
    MoverUp: CMoverLink,
    MoverDown: CMoverLink,
    DurationPreLaunch: CGameTime,
    DurationPostLand: CGameTime,
    DurationMoveOut: CGameTime,
    Placeholder: CUnitLink,
    LandAdjustmentUp: Real,
    LandAdjustmentDown: Real,
    LandArrivalRange: Real,
    LandCheckRadius: Real,
    LandEffectUp: CEffectLink,
    LandEffectDown: CEffectLink,
}

const CBehaviorPowerSource = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    PowerLevel: TPowerLevel,
    Radius: Real,
    PowerLink: TPowerLink,
    CliffLevelFlags: CcliffLevelCompareCountFlagArray,
    Flags: CArray(Bit),
}

const CBehaviorPowerUser = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    PowerLink: TPowerLink,
    PlacementMinPowerLevel: TPowerLevel,
    Flags: CArray(Bit),
    PoweredWhileUnderConstruction: Bit,
    PowerStageArray: CArray(SPowerStage),
}

const CBehaviorResource = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    Capacity: UInt32,
    Contents: UInt32,
    HarvestTime: CGameTime,
    HarvestAmount: UInt32,
    EmptyDeathType: EDeathType,
    EmptyHarvestAmount: UInt32,
    EmptyUnit: CUnitLink,
    Flags: CArray(Bit),
    RequiredAlliance: EAllianceId,
    ReturnDelay: CGameTime,
    ExhaustedAlert: CAlertLink,
    DepletionAlert: CAlertLink,
    DepletionThreshold: UInt32,
    DepletionVariationCount: UInt32,
    CarryResourceBehavior: CBehaviorLink,
    IdealHarvesterCount: UInt32,
    EnabledSearchFilters: CTargetFilters,
    EnabledSearchRadius: Real,
}

const CBehaviorReveal = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    Duration: CGameTime,
    SearchFilters: CTargetFilters,
}

const CBehaviorSpawn = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    DisplayDuration: CArray(Bit),
    InfoArray: CArray(SSpawnInfo),
    Center: CGamePoint,
    Offset: CArray(CGamePoint),
    Slop: Real,
    Effect: CEffectLink,
    Range: Real,
    Flags: CArray(Bit),
    Limit: UInt32,
    LimitDeath: EDeathType,
    ConjoinedLink: CBehaviorLink,
}

const CBehaviorVeterancy = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    Flags: CArray(Bit),
    ShareFilters: CArray(CTargetFilters),
    TargetFilters: CArray(CTargetFilters),
    XPFraction: CArray(Real),
    SharedXPRadius: CArray(Real),
    SharedXPFraction: CArray(Real),
    SharedXPMaxCount: CArray(UInt32),
    VeterancyLevelArray: CArray(SVeterancyLevel),
    XPReceiveFraction: CArray(SBehaviorFraction),
    Levels: UInt32,
    MinVeterancyXPLevelFactor: Real,
    MinVeterancyXPPreviousValueFactor: Real,
    MinVeterancyXPBonusPerLevel: UInt32,
}

const CBehaviorWander = {
    Face: CButtonLink,
    Name: CStringLink,
    Tooltip: CStringLink,
    InfoTooltipPriority: UInt32,
    Alignment: EBehaviorAlignment,
    Cost: SCost,
    BehaviorFlags: CArray(Bit),
    InfoFlags: CArray(Bit),
    InfoIcon: CImagePath,
    BehaviorCategories: CBehaviorCategoryFlags,
    EditorCategories: TEditorCategories,
    Requirements: CTechRequirementsGraph,
    TechAliasArray: CArray(TTechAlias),
    SortIndex: Int32,
    DebugTrace: Bit,
    Leash: Bit,
    Override: Bit,
    TimeLimitFactor: Real,
    MinimumRange: Real,
    Range: Real,
    Delay: CGameTime,
}

const CBoost = {
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    ProductId: TBattleProductId,
    TileTexture: CImagePath,
    PreviewTexture: CImagePath,
    HyperlinkId: THyperlinkId,
    PreviewCutsceneFile: CAssetPath,
    TileCutsceneFile: CAssetPath,
    StoreTypeName: CStringLink,
}

const CBundle = {
    EditorCategories: TEditorCategories,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    ProductId: TBattleProductId,
    Flags: CbundleFlagCountFlagArray,
    Universe: EHeroUniverse,
    BoostBonus: CBoostLink,
    TileCutsceneFile: CAssetPath,
    TileTexture: CImagePath,
    MediumTileTexture: CImagePath,
    LargeTileTexture: CImagePath,
    PreviewCutsceneFile: CAssetPath,
    ReleaseDate: SHeroReleaseDate,
    HyperlinkId: THyperlinkId,
    Description: CStringLink,
    GameContentArray: CArray(SGameContentCreationData),
    StoreTypeName: CStringLink,
    CinematicsImagePath: CImagePath,
    LearnMoreBackgroundImage: CImagePath,
    LearnMoreImage1: CImagePath,
    LearnMoreImage2: CImagePath,
    LearnMoreImage3: CImagePath,
    LearnMoreTitleText1: CStringLink,
    LearnMoreTitleText2: CStringLink,
    LearnMoreTitleText3: CStringLink,
    LearnMoreBodyText1: CStringLink,
    LearnMoreBodyText2: CStringLink,
    LearnMoreBodyText3: CStringLink,
    SuppressCountryArray: CArray(CStringLink),
    ExternalHyperlink: CString,
}

const CButton = {
    Name: CStringLink,
    Tooltip: CStringLink,
    TooltipAppender: CArray(STooltipBlock),
    TooltipImage: CImagePath,
    TooltipFlags: CArray(Bit),
    TooltipResourceName: CArray(CStringLink),
    TooltipVitalName: CArray(CStringLink,EUnitVital),
    TooltipSupplyName: CStringLink,
    TooltipCooldownOverrideText: CStringLink,
    TooltipVitalOverrideText: CArray(CStringLink,EUnitVital),
    TooltipTimeOverrideAbilCmd: STooltipTimeAbilCmd,
    Icon: CImagePath,
    AlertName: CStringLink,
    AlertTooltip: CStringLink,
    AlertIcon: CImagePath,
    Hotkey: CHotkeyLink,
    EditorCategories: TEditorCategories,
    TintRacially: Bit,
    HotkeyAlias: CButtonLink,
    HotkeySet: CIdentifier,
    HotkeyToggleUnit: CUnitLink,
    Universal: Bit,
    SimpleDisplayText: CStringLink,
    HidesForSimpleText: Bit,
    UseHotkeyLabel: Bit,
    Placeholder: Bit,
    ChargeText: CStringLink,
    DefaultButtonLayout: SButtonCardLayout,
}

const CCamera = {
    ParamInitial: CArray(real32),
    ZoomTable: CArray(SCameraZoom),
    ZoomTableObserver: CArray(SCameraZoom),
    ZoomDefault: UInt32,
    ParamSmooth: CArray(SCameraSmooth),
    TargetSmooth: SCameraSmooth,
    FieldOfViewMin: real32,
    FieldOfViewMax: real32,
    FieldOfViewIncrement: real32,
    DistanceMin: real32,
    DistanceMax: real32,
    DistanceIncrement: real32,
    PitchMin: real32,
    PitchMax: real32,
    PitchIncrement: real32,
    YawLeft: real32,
    YawRight: real32,
    YawMin: real32,
    YawMax: real32,
    YawIncrement: real32,
    MaxScrollRate: CArray(real32),
    MaxScrollDistance: CArray(real32),
    VerticalScrollRateMultiplier: CArray(real32),
    ScrollAccelerationPeriod: CArray(real32),
    ScrollDecelerationPeriod: CArray(real32),
    ForwardScale: CArray(real32),
    StrafeScale: CArray(real32),
    RotateScale: real32,
    FollowOffsetUpdateBandX: CRange,
    FollowOffsetUpdateBandY: CRange,
    FollowResetDecayDuration: real32,
    FollowResetDecayFactor: real32,
    FollowResetJumpDelay: real32,
    FollowResetJumpDistance: real32,
    FollowResetTimeoutNormal: real32,
    FollowResetTimeoutLeashed: real32,
    FollowResetTimeoutUnleashed: real32,
    FollowScrollLeash: CRect,
    FollowScrollLimit: real32,
    BorderSizeX: UInt8,
    BorderSizeY: UInt8,
    SmartPanJumpDistance: real32,
    SmartPanSkipDistance: real32,
    HeightDisplacementFactor: real32,
    HeightDisplacementPitchMin: real32,
    HeightDisplacementPitchMax: real32,
    HeightDisplacementMax: real32,
    HeightMap: ECameraHeightMap,
}

const CCampaign = {
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    ProductId: TBattleProductId,
    CampaignData: SCampaignData,
    PurchaseProductIdArray: CArray(TBattleProductId),
    StoreTypeName: CStringLink,
    ScreenshotImage1: CImagePath,
    ScreenshotImage2: CImagePath,
    ScreenshotImage3: CImagePath,
    ScreenshotImage4: CImagePath,
    ScreenshotImage5: CImagePath,
    LearnMoreBackgroundImage: CImagePath,
    LearnMoreImage1: CImagePath,
    LearnMoreImage2: CImagePath,
    LearnMoreImage3: CImagePath,
    LearnMoreTitleText1: CStringLink,
    LearnMoreTitleText2: CStringLink,
    LearnMoreTitleText3: CStringLink,
    LearnMoreBodyText1: CStringLink,
    LearnMoreBodyText2: CStringLink,
    LearnMoreBodyText3: CStringLink,
}

const CCharacter = {
    Name: CStringLink,
    Age: UInt32,
    Gender: ECharacterGender,
    Race: ECharacterRace,
    RaceCustom: CStringLink,
    Attitude: CStringLink,
    Timbre: CStringLink,
    Dialect: CStringLink,
    VoiceRef: CStringLink,
    Description: CStringLink,
    Image: CImagePath,
    Relevance: ECharacterRelevance,
    Voice: CString,
    Pitch: Int32,
    Color: CColor,
    Unit: CUnitLink,
    Variations: CArray(SCharacterVariation),
}

const CCliff = {
    CliffMesh: CCliffMeshLink,
    CliffMaterial: CModelPath,
    EditorIcon: CImagePath,
    Scale: UInt8,
}

const CCliffMesh = {
    ModelPath: CModelPath,
    CliffHeights: CArray(real32),
    WeldNormals: Bit,
}

const CColorStyle = {
    Name: CStringLink,
    ColorEntry: CArray(SUIColorEntry),
}


const CCommander = {
    Name: CStringLink,
    ShortName: CStringLink,
    AttributeId: CFourCC,
    LevelAchievementId: UInt64,
    Race: CRaceLink,
    Campaign: CCampaignLink,
    Description: CStringLink,
    PurchaseMessage: CStringLink,
    Details: CStringLink,
    Portrait: CImagePath,
    HomePanelImage: CImagePath,
    CutsceneFilterSelf: CIdentifier,
    CutsceneFilterAlly: CIdentifier,
    UnitArray: CArray(SCommanderUnit),
    TalentTreeArray: CArray(SCommanderTalentTree),
    MasteryTalentArray: CArray(SCommanderMasteryTalent),
    MasteryMaxRank: UInt32,
    UserReference: CUserReference,
    LoadingImage: CImagePath,
    LoadingImageAlly: CImagePath,
    TraitIcon: CImagePath,
    CommanderAbilTitle: CStringLink,
    CommanderAbilArray: CArray(SCommanderAbil),
    Movie: CMoviePath,
    ProductId: TBattleProductId,
    RequiredRewardArray: CArray(CRewardLink),
    PurchaseImage: CImagePath,
    StoreName: CStringLink,
    ConsoleSkin: CConsoleSkinLink,
    FeaturedImagePath: CImagePath,
    FeaturedDescription: CStringLink,
    ProfileImagePath: CImagePath,
    StoreTypeName: CStringLink,
    LearnMoreBackgroundImage: CImagePath,
    LearnMoreImage1: CImagePath,
    LearnMoreImage2: CImagePath,
    LearnMoreImage3: CImagePath,
    LearnMoreTitleText1: CStringLink,
    LearnMoreTitleText2: CStringLink,
    LearnMoreTitleText3: CStringLink,
    LearnMoreBodyText1: CStringLink,
    LearnMoreBodyText2: CStringLink,
    LearnMoreBodyText3: CStringLink,
    PrestigeArray: CArray(CButtonLink),
    Color: CColor,
    LoadingScreenCoordinates: CRect,
    DataCollectionAllowed: CArray(CDataCollectionLink),
    CommanderArtifactKeyArray: CArray(CIdentifier),
    CommanderPrestigeAchievementId: UInt64,
}

const CConfig = {
    Name: CStringLink,
    GameContentArray: CArray(SGameContentCreationData),
    BoostLicense: CIdentifier,
    SilencePenaltyLicense: UInt32,
    FreeNonKRIGRLicense: UInt32,
    CommanderMastery: CCommanderLink,
    CommanderDifficultyLevels: CArray(SCommanderDifficultyLevel),
    CommanderAchievementCategoryId: UInt32,
    CoopCampaignAchievementCategoryId: UInt32,
}

const CConsoleSkin = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    ProductId: TBattleProductId,
    RequiredReward: CRewardLink,
    ReleaseDate: SProductReleaseDate,
    MinimapPanelModel: SConsoleSkinModel,
    InfoPanelModel: SConsoleSkinModel,
    CommandPanelModel: SConsoleSkinModel,
    MinimapPanelImage: CImagePath,
    InfoPanelImage: CImagePath,
    CommandPanelImage: CImagePath,
    Light: CString,
    StoreTypeName: CStringLink,
    ThumbnailImage: CImagePath,
    FeaturedImage: CImagePath,
    Description: CStringLink,
    SkinId: CString,
}

const CConversation = {
    EditorCategories: TEditorCategories,
    AnimBlendDefault: Int32,
    AnimBlendOut: Int32,
    ProductionLevelInfo: CArray(SConversationProductionLevel),
    ProductionLevel: EConversationProductionLevel,
    ObjectStates: CArray(CConversationStateLink),
    DefaultSpeaker1: CCharacterLink,
    DefaultSpeaker2: CCharacterLink,
    SoundParent: CSoundLink,
    FixedConditions: CArray(SConversationConditionSet),
    FixedActions: CArray(SConversationActionSet),
    FacialAnims: CArray(SConversationFacialAnim),
    Lines: CArray(SConversationLine),
    RunActions: CArray(SConversationRunActions),
    Waits: CArray(SConversationWait),
    Jumps: CArray(SConversationJump),
    Choices: CArray(SConversationChoice),
    Groups: CArray(SConversationGroup),
    Comments: CArray(SConversationComment),
    RootItems: CArray(TConversationItemId),
}

const CConversationState = {
    Flags: CconversationStateFlagCountFlagArray,
    Indices: CArray(SConversationStateIndex),
    ValueRange: CiRange,
    CustomColors: CArray(CColor),
    InfoIds: CArray(SConversationStateInfoIds),
}
const CCursor = {
    Texture: CImagePath,
    HotspotX: UInt32,
    HotspotY: UInt32,
    Texture16: CImagePath,
    Texture64: CImagePath,
}

const CDataCollection = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    EditorIconSource: EGameCatalog,
    InfoText: CStringLink,
    DataRecord: CArray(SDataCollectionRecord),
    Button: CButtonLink,
    ImplementionLevel: EImplementionLevel,
    Pattern: CDataCollectionPatternLink,
}

const CDataCollectionUnit = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    EditorIconSource: EGameCatalog,
    InfoText: CStringLink,
    DataRecord: CArray(SDataCollectionRecord),
    Button: CButtonLink,
    ImplementionLevel: EImplementionLevel,
    Pattern: CDataCollectionPatternLink,
    AbilInfoNormal: CArray(CAbilLink),
    AbilInfoLearned: CArray(CAbilLink),
    AbilInfoUpgradeTo: CArray(CUnitLink),
    AbilInfoBuilt: CArray(CUnitLink),
    AbilInfoTrainUnit: CArray(CUnitLink),
    AbilInfoResearch: CArray(CAbilLink),
    AbilInfoSellUnit: CArray(CUnitLink),
    AbilInfoSellItem: CArray(CUnitLink),
    AbilInfoMakeItem: CArray(CUnitLink),
    UpgradeInfoUnitLifeArmorPerLevel: Real,
    UpgradeInfoWeapon: CArray(SUpgradeInfoWeapon),
    TechInfoUnit: CUnitLink,
    TechInfoUnitReplaced: CUnitLink,
    TechInfoUpgradeUsed: CArray(CUpgradeLink),
}

const CDataCollectionUpgrade = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    EditorIconSource: EGameCatalog,
    InfoText: CStringLink,
    DataRecord: CArray(SDataCollectionRecord),
    Button: CButtonLink,
    ImplementionLevel: EImplementionLevel,
    Pattern: CDataCollectionPatternLink,
    TechInfoUpgrade: CUpgradeLink,
    TechInfoUpgradeReplaced: CUpgradeLink,
}

const CDataCollectionAbil = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    EditorIconSource: EGameCatalog,
    InfoText: CStringLink,
    DataRecord: CArray(SDataCollectionRecord),
    Button: CButtonLink,
    ImplementionLevel: EImplementionLevel,
    Pattern: CDataCollectionPatternLink,
    TechInfoAbil: CAbilLink,
    TechInfoAbilReplaced: CAbilLink,
}

const CDataCollectionPattern = {
    Fields: CArray(SDataFieldsPattern),
    Tokens: CArray(SDataTokensPattern),
}

const CDecalPack = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    Description: CStringLink,
    Image: STextureSheetEntry,
    ProductId: TBattleProductId,
    ReleaseDate: SProductReleaseDate,
    DecalArray: CArray(CRewardLink),
    StoreTypeName: CStringLink,
}

const CDSP = {
}

const CDSPChorus = {
    Delay: real32,
    Depth: real32,
    DryMix: real32,
    Feedback: real32,
    Rate: real32,
    WetMix1: real32,
    WetMix2: real32,
    WetMix3: real32,
}

const CDSPCompressor = {
    Attack: real32,
    GainMakeUp: real32,
    Release: real32,
    Threshold: real32,
}

const CDSPCustomCompressor = {
    AttackMs: UInt32,
    Ratio: real32,
    ReleaseMs: UInt32,
    ThresholdDB: real32,
    MakeUpGainDB: real32,
    DelayMs: UInt32,
}

const CDSPDistortion = {
    Level: real32,
}

const CDSPEcho = {
    DecayRatio: real32,
    Delay: real32,
    DryMix: real32,
    MaxChannels: real32,
    WetMix: real32,
}

const CDSPFlange = {
    Depth: real32,
    DryMix: real32,
    Rate: real32,
    WetMix: real32,
}

const CDSPHighPass = {
    Cutoff: real32,
    Resonance: real32,
}

const CDSPLimiter = {
    ReleaseMs: UInt32,
    UseARC: Bit,
    ThresholdDB: real32,
    MakeUpGainDB: real32,
    SoftKneeWidthDB: real32,
    ARCAttackMs: UInt32,
    ARCReleaseMs: UInt32,
    ARCMinReleaseMs: UInt32,
    ARCMaxReleaseMs: UInt32,
    ARCReleaseSweepMs: UInt32,
}

const CDSPLowPass = {
    Cutoff: real32,
    Resonance: real32,
}

const CDSPLowPassSimple = {
    Cutoff: real32,
}

const CDSPNormalize = {
    FadeTime: real32,
    MaxAmp: real32,
    Threshhold: real32,
}

const CDSPOscillator = {
    Type: EOscillator,
    Rate: real32,
}

const CDSPParamEQ = {
    Bandwidth: real32,
    Center: real32,
    Gain: real32,
}

const CDSPPitchShift = {
    FFTSize: UInt32,
    MaxChannels: real32,
    Pitch: real32,
}

const CDSPReverb = {
    DecayHFRatio: real32,
    DecayTime: real32,
    Density: real32,
    Diffusion: real32,
    DryLevel: real32,
    HFReference: real32,
    LFReference: real32,
    ReflectionsDelay: real32,
    ReflectionsLevel: real32,
    ReverbDelay: real32,
    ReverbLevel: real32,
    Room: real32,
    RoomHF: real32,
    RoomLF: real32,
    RoomRolloffFactor: real32,
}

const CEffect = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
}

const CEffectResponse = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
}

const CEffectAddTrackedUnit = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    BehaviorLink: CBehaviorLink,
    TrackerUnit: SEffectWhichUnit,
    TrackedUnit: SEffectWhichUnit,
}

const CEffectClearTrackedUnits = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    BehaviorLink: CBehaviorLink,
    TrackerUnit: SEffectWhichUnit,
    ClearValidatorArray: CArray(CValidatorLink),
}

const CEffectAddTrackedUnits = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    SourceBehaviorLink: CBehaviorLink,
    SourceTrackerUnit: SEffectWhichUnit,
    TargetBehaviorLink: CBehaviorLink,
    TargetTrackerUnit: SEffectWhichUnit,
}

const CEffectRemoveTrackedUnit = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    BehaviorLink: CBehaviorLink,
    TrackerUnit: SEffectWhichUnit,
    TrackedUnit: SEffectWhichUnit,
}

const CEffectApplyBehavior = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    Behavior: CBehaviorLink,
    KillHallucination: Bit,
    Count: SAccumulatedUInt32,
    Flags: CArray(Bit),
    Duration: CGameTime,
}

const CEffectApplyForce = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichLocation: SEffectWhichLocation,
    WhichUnit: SEffectWhichUnit,
    Amount: Real,
    MassFraction: Real,
    TimeScaleSource: SEffectWhichTimeScale,
}

const CEffectApplyKinetic = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    ImpactUnit: SEffectWhichUnit,
    Kinetic: CKineticLink,
}

const CEffectCancelOrder = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    AbilCmd: CAbilCommand,
    Count: UInt32,
    Flags: CArray(Bit),
}

const CEffectCreateHealer = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    LaunchUnit: SEffectWhichUnit,
    ImpactUnit: SEffectWhichUnit,
    TimeScaleSource: SEffectWhichTimeScale,
    Flags: CArray(Bit),
    PeriodCount: UInt32,
    PeriodicValidator: CValidatorLink,
    PeriodicEffect: CEffectLink,
    PeriodicPeriod: CGameTime,
    PeriodicEffectRateMultiplier: Real,
    DrainVital: EUnitVital,
    DrainVitalCostFactor: SAccumulatedFixed,
    DrainResourceCostFactor: CArray(Real),
    RechargeVital: EUnitVital,
    RechargeVitalFraction: CGameRate,
    RechargeVitalRate: SAccumulatedGameRate,
    RechargeVitalMax: CGameRate,
    TimeFactor: Real,
    InitialEffect: CEffectLink,
    ExpireEffect: CEffectLink,
    FinalEffect: CEffectLink,
    AmountScoreArray: CArray(SScoreValueUpdate),
}

const CEffectCreep = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    WhichLocation: SEffectWhichLocation,
    Radius: SAccumulatedFixed,
    CreepFlags: CArray(Bit),
}

const CEffectCreatePersistent = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichLocation: SEffectWhichLocation,
    TimeScaleSource: SEffectWhichTimeScale,
    OffsetVectorStartLocation: SEffectWhichLocation,
    OffsetVectorEndLocation: SEffectWhichLocation,
    OffsetFacingFallback: SEffectWhichLocation,
    Flags: CArray(Bit),
    InitialDelay: CGameTime,
    InitialEffect: CEffectLink,
    InitialOffset: CEffectOffset,
    ExpireDelay: SAccumulatedGameTime,
    ExpireEffect: CEffectLink,
    ExpireOffset: CEffectOffset,
    FinalEffect: CEffectLink,
    FinalOffset: CEffectOffset,
    PeriodCount: SAccumulatedUInt32,
    PeriodicValidator: CValidatorLink,
    PeriodicEffectArray: CArray(CEffectLink),
    PeriodicOffsetArray: CArray(CEffectOffset),
    PeriodicPeriodArray: CArray(CGameTime),
    PeriodicEffectRateMultiplier: Real,
    RevealRadius: SAccumulatedFixed,
    RevealFlags: CeffectRevealFlagCountFlagArray,
    RevealArc: CFangleArc,
    RevealFacing: CFangle,
    RevealRectangleWidth: Real,
    RevealRectangleHeight: Real,
    TeleportTrack: CArray(Bit),
    TeleportValidator: CValidatorLink,
    DetectFilters: CTargetFilters,
    RadarFilters: CTargetFilters,
    HeightMap: EHeightMap,
    AINotifyEffect: CEffectLink,
    EffectRandMode: EListWalkMode,
    OffsetRandMode: EListWalkMode,
    PeriodRandMode: EListWalkMode,
}

const CEffectRandomPointInCircle = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichLocation: SEffectWhichLocation,
    Effect: CEffectLink,
    Count: UInt32,
    Radius: SAccumulatedFixed,
    RestrictToCircumference: Bit,
}

const CEffectCreateUnit = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichLocation: SEffectWhichLocation,
    Origin: SEffectWhichLocation,
    CreateFlags: CArray(Bit),
    RallyUnit: SEffectWhichUnit,
    SpawnOwner: SEffectWhichPlayer,
    SpawnEffect: CEffectLink,
    SpawnUnit: CArray(CUnitLink),
    SpawnCount: SAccumulatedUInt32,
    SpawnRange: Real,
    SpawnOffset: CArray(CGamePoint),
    SelectUnit: SEffectWhichUnit,
    TypeFallbackUnit: SEffectWhichUnit,
}

const CEffectDamage = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    LaunchLocation: SEffectWhichLocation,
    ImpactLocation: SEffectWhichLocation,
    ImpactUnitValidator: CValidatorLink,
    AttributeBonus: CArray(Real),
    AttributeFactor: CArray(Real),
    AttributeForced: CunitAttributeCountFlagArray,
    ShieldBonus: Real,
    ShieldFactor: Real,
    ArmorReduction: Real,
    Visibility: EDamageVisibility,
    Flags: CDamageFlags,
    Kind: EDamageKind,
    KindSplash: EDamageKind,
    Type: EDamageType,
    Total: EDamageTotal,
    Amount: SAccumulatedFixed,
    Fraction: SAccumulatedFixed,
    Random: Real,
    VitalBonus: CArray(Real,EUnitVital),
    VitalFractionCurrent: CArray(Real,EUnitVital),
    VitalFractionMax: CArray(Real,EUnitVital),
    VitalBonusRandom: CArray(Real,EUnitVital),
    VitalFractionCurrentRandom: CArray(Real,EUnitVital),
    VitalFractionMaxRandom: CArray(Real,EUnitVital),
    LeechFraction: CArray(Real),
    LeechScoreArray: CArray(SScoreValueUpdate),
    Death: EDeathType,
    KillHallucination: Bit,
    AreaArray: CArray(SEffectDamageArea),
    AreaRelativeOffset: CGamePoint,
    RevealerParams: SEffectSearchRevealerParams,
    ExcludeArray: CArray(SEffectWhichUnit),
    IncludeArray: CArray(SEffectWhichUnit),
    SearchFilters: CTargetFilters,
    TargetSorts: STargetSorts,
    MinCountError: CCmdResult,
    MinCount: UInt32,
    MaxCount: SAccumulatedUInt32,
    RecycleCount: UInt32,
    SearchFlags: CArray(Bit),
    DisplayFlags: CequipmentDisplayFlagCountFlagArray,
    SplashHistory: EEffectHistory,
    AmountScoreArray: CArray(SScoreValueUpdate),
    Minimum: Real,
    Maximum: Real,
    DamageInheritEffect: CEffectLink,
}

const CEffectDestroyHealer = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichLocation: SEffectWhichLocation,
    Effect: CEffectLink,
    Count: UInt32,
    Radius: Real,
}

const CEffectDestroyPersistent = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichLocation: SEffectWhichLocation,
    Effect: CEffectLink,
    Count: UInt32,
    Radius: Real,
}

const CEffectEnumArea = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    LaunchLocation: SEffectWhichLocation,
    ImpactLocation: SEffectWhichLocation,
    ExcludeArray: CArray(SEffectWhichUnit),
    IncludeArray: CArray(SEffectWhichUnit),
    SearchFilters: CTargetFilters,
    TargetSorts: STargetSorts,
    AreaArray: CArray(SEffectEnumArea),
    AreaRelativeOffset: CGamePoint,
    RevealerParams: SEffectSearchRevealerParams,
    MinCountError: CCmdResult,
    MinCount: UInt32,
    MaxCount: SAccumulatedUInt32,
    ExtraRadiusBonus: SAccumulatedFixed,
    RecycleCount: UInt32,
    SearchFlags: CArray(Bit),
    UnCreep: Bit,
}

const CEffectEnumTrackedUnits = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    BehaviorLink: CBehaviorLink,
    TrackerUnit: SEffectWhichUnit,
    Effect: CEffectLink,
    TrackedUnitFilters: CTargetFilters,
    DistributDamage: Bit,
}

const CEffectEnumMagazine = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    SearchFilters: CTargetFilters,
    MaxCount: UInt32,
    EffectInternal: CEffectLink,
    EffectExternal: CEffectLink,
}

const CEffectEnumTransport = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    SearchFilters: CTargetFilters,
    MaxCount: UInt32,
    Effect: CEffectLink,
    CheckOuter: Bit,
}

const CEffectEnumInventory = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    SearchFilters: CTargetFilters,
    MaxCount: UInt32,
    Effect: CEffectLink,
    CheckOuter: Bit,
}

const CEffectLastTarget = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    LastTargetType: EAbilLastTarget,
    WhichUnit: SEffectWhichUnit,
    Effect: CEffectLink,
}

const CEffectLoadContainer = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    ContainerType: EEffectContainer,
    WhichUnit: SEffectWhichUnit,
    ContainerUnit: SEffectWhichUnit,
    ContainerAbil: CAbilLink,
}

const CEffectIssueOrder = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    Abil: CAbilLink,
    AbilTechAlias: TTechAlias,
    AbilCmdIndex: TAbilCmdIndex,
    CmdFlags: CCmdFlags,
    Player: SEffectWhichPlayer,
    Target: SEffectWhichLocation,
}

const CEffectLaunchMissile = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    LaunchLocation: SEffectWhichLocation,
    ImpactLocation: SEffectWhichLocation,
    LaunchOffset: CEffectOffset,
    ImpactOffset: CEffectOffset,
    LaunchEffect: CEffectLink,
    ImpactEffect: CEffectLink,
    FinishEffect: CEffectLink,
    InterruptEffect: CEffectLink,
    SearchEffect: CEffectLink,
    SearchHitArriveEffect: CEffectLink,
    SearchMaxCount: UInt32,
    PeriodCount: UInt32,
    PeriodicEffect: CEffectLink,
    PeriodicPeriod: CGameTime,
    PeriodicValidator: CValidatorLink,
    Flags: CArray(Bit),
    SearchFlags: CArray(Bit),
    TransferBehavior: CBehaviorLink,
    TransferCount: UInt32,
    AmmoOwner: SEffectWhichPlayer,
    AmmoUnit: CUnitLink,
    AmmoLife: CGameTime,
    PlaceholderUnit: CUnitLink,
    PlacementMinDistance: Real,
    PlacementAround: SEffectWhichLocation,
    PlacementRange: Real,
    ImpactRange: Real,
    RetargetFilters: CTargetFilters,
    RetargetRange: Real,
    ReturnDelay: CGameTime,
    ReturnMovers: CArray(SEffectMover),
    Movers: CArray(SEffectMover),
    MoverRollingPattern: EMoverPatternType,
    MoverRollingJump: UInt32,
    MoverExecutePattern: EMoverPatternType,
    MoverExecuteJump: UInt32,
    MoverExecuteRange: UInt32,
    DeathType: EDeathType,
    Visibility: EDamageVisibility,
    BounceArray: CArray(SEffectMissileBounce),
}

const CEffectModifyPlayer = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    WhichPlayer: SEffectWhichPlayer,
    Resources: CArray(Int32),
    ResourcesCollected: CArray(Int32),
    EffectArray: CArray(SUpgradeEffect),
    Upgrades: CArray(SEffectUpgrade),
    Cost: SEffectModifyPlayerCost,
}

const CEffectModifyUnit = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    TransferUnit: SEffectWhichUnit,
    LaunchUnit: SEffectWhichUnit,
    ImpactUnit: SEffectWhichUnit,
    KillCreditUnit: SEffectWhichUnit,
    KillHallucination: Bit,
    Cost: CArray(SEffectModifyUnitCost),
    Weapon: CArray(SEffectModifyWeapon),
    VitalArray: CArray(SEffectModifyVital,EUnitVital),
    Height: Real,
    HeightTime: CGameTime,
    ModifyFlags: CArray(Bit),
    XP: Real,
    VeterancyBehavior: CBehaviorLink,
    LearnAbilReset: CAbilLink,
    ResourceRestoreBonus: UInt32,
    ResourceRestoreFraction: Real,
    Resources: Int32,
    ResourcesHarvestedBonus: UInt32,
    ResourcesHarvestedFraction: Real,
    SalvageFactor: SCostFactor,
    SpawnCount: Int32,
    CopyOrderCount: UInt32,
    CopyRallyCount: UInt32,
    ModifyOwnerPlayer: SEffectWhichPlayer,
    RallyUnit: SEffectWhichUnit,
    ModifyTurret: SEffectModifyTurret,
    SelectTransferUnit: SEffectWhichUnit,
    SelectTransferFlags: CselectionTransferFlagCountFlagArray,
    FacingLocation: SEffectWhichLocation,
    FacingType: EEffectModifyFacing,
    FacingAdjustment: CFangle,
}

const CEffectMorph = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    ActorKey: CDataSoupKey,
    MorphFlags: CArray(Bit),
    MorphUnit: CUnitLink,
    TypeFallbackUnit: SEffectWhichUnit,
    AbilKeyFallback: CAbilLink,
}

const CEffectRedirectMissile = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    ImpactLocation: SEffectWhichLocation,
    ImpactFilters: CTargetFilters,
    Flags: CArray(Bit),
    Movers: CArray(SEffectMover),
    MoverRollingPattern: EMoverPatternType,
    MoverRollingJump: UInt32,
    MoverExecutePattern: EMoverPatternType,
    MoverExecuteJump: UInt32,
    MoverExecuteRange: UInt32,
}

const CEffectReleaseMagazine = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
}

const CEffectRemoveBehavior = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    BehaviorCategories: CBehaviorCategoryFlags,
    BehaviorClass: EClassIdCBehavior,
    BehaviorLink: CBehaviorLink,
    BehaviorAlignment: EEffectRemoveBehaviorAlignment,
    Heroic: EBehaviorHeroicState,
    StackAlias: CIdentifier,
    KillHallucination: Bit,
    MatchesAll: Bit,
    Count: UInt32,
    ExcludeOriginPlayer: SEffectWhichPlayer,
    ExcludeCasterUnit: SEffectWhichUnit,
    RequireOriginPlayer: SEffectWhichPlayer,
    RequireCasterUnit: SEffectWhichUnit,
}

const CEffectRemoveKinetic = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    ImpactUnit: SEffectWhichUnit,
    KineticLink: CKineticLink,
}

const CEffectReturnMagazine = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    MagazineEffect: CEffectLink,
}

const CEffectSet = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    EffectArray: CArray(CEffectLink),
    Random: Bit,
    RecycleCount: Bit,
    SetSource: Bit,
    MinCount: SAccumulatedUInt32,
    MaxCount: SAccumulatedUInt32,
    TargetLocationType: EEffectLocationType,
}

const CEffectSwitch = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    CaseArray: CArray(SEffectSwitchCase),
    CaseDefault: CEffectLink,
    TargetLocationType: EEffectLocationType,
}

const CEffectTeleport = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    ClearQueuedOrders: Bit,
    MinDistance: Real,
    PlacementArc: CFangleArc,
    PlacementAround: SEffectWhichLocation,
    PlacementRange: Real,
    Range: Real,
    SourceLocation: SEffectWhichLocation,
    TargetLocation: SEffectWhichLocation,
    TeleportFlags: CArray(Bit),
    TeleportEffect: CEffectLink,
}

const CEffectTransferBehavior = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    LaunchUnit: SEffectWhichUnit,
    ImpactUnit: SEffectWhichUnit,
    Behavior: CBehaviorLink,
    BehaviorCategories: CBehaviorCategoryFlags,
    BehaviorAlignment: EEffectRemoveBehaviorAlignment,
    Heroic: EBehaviorHeroicState,
    ExcludeOriginPlayer: SEffectWhichPlayer,
    ExcludeCasterUnit: SEffectWhichUnit,
    RequireOriginPlayer: SEffectWhichPlayer,
    RequireCasterUnit: SEffectWhichUnit,
    Count: UInt32,
    Copy: Bit,
    Preserve: Bit,
}

const CEffectUseCalldown = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichLocation: SEffectWhichLocation,
    CalldownCount: UInt32,
    CalldownEffect: CEffectLink,
}

const CEffectUseMagazine = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    ResponseFlags: CResponseFlags,
    WhichUnit: SEffectWhichUnit,
    AmmoUnit: CUnitLink,
    AmmoEffect: CEffectLink,
    MagazineAbil: CAbilLink,
    TargetLocation: SEffectWhichLocation,
}

const CEffectUserData = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    PreloadValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Marker: SMarker,
    AINotifyFlags: CNotifyAreaFlags,
    TechAliasArray: CArray(TTechAlias),
    Chance: Real,
    Alert: CAlertLink,
    DamageModifierSource: SEffectWhichUnit,
    CasterHistory: EEffectHistory,
    CanBeBlocked: Bit,
    DebugTrace: Bit,
    OwningPlayer: SEffectWhichPlayer,
    Key: CIdentifier,
    Amount: SAccumulatedFixed,
    SourceKey: CIdentifier,
    SourceFailBackValue: Real,
    Operation: EUpgradeOperation,
    ValidateMin: SAccumulatedFixed,
    ValidateMax: SAccumulatedFixed,
    EffectSuccess: CEffectLink,
    EffectFailure: CEffectLink,
    TargetLocationType: EEffectLocationType,
    BehaviorScope: SEffectWhichBehavior,
}

const CEmoticon = {
    Name: CStringLink,
    NameAlternate: CStringLink,
    NameInvalid: CStringLink,
    Description: CStringLink,
    DescriptionLocked: CStringLink,
    Image: STextureSheetEntry,
    Hidden: Bit,
    RequiredReward: CRewardLink,
}

const CEmoticonPack = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    Description: CStringLink,
    Image: STextureSheetEntry,
    ProductId: TBattleProductId,
    RequiredCampaign: SEmoticonPackCampaign,
    RequiredCommander: CCommanderLink,
    RequiredRewardArray: CArray(CRewardLink),
    ReleaseDate: SProductReleaseDate,
    EmoticonArray: CArray(CEmoticonLink),
    ParentBundle: CBundleLink,
    Hidden: Bit,
    HideAchievement: Bit,
    StoreTypeName: CStringLink,
}

const CFootprint = {
    Flags: CfootprintFlagCountFlagArray,
    Layers: CArray(SFootprintLayer),
    Shape: SFootprintShape,
    EditorCategories: TEditorCategories,
}

const CFoW = {
    Color: CColor,
    UnhideRadius: Real,
    Expand: Bit,
    Hidden: Bit,
    Persistent: Bit,
    BlendSpeed: Int32,
}

const CGame = {
    AttackRevealBehavior: CBehaviorLink,
    AcquireMovementLimit: Real,
    AcquireLeashRadius: Real,
    AcquireLeashResetRadius: Real,
    CallForHelpPeriod: CGameTime,
    CallForHelpRadius: Real,
    CreepBlendTime: CGameTime,
    CreepDecayLimit: UInt32,
    CreepDecaySound: CSoundLink,
    CreepDecayTime: CGameTime,
    CreepDecayWeightMultiplier: UInt32,
    CreepDecayWeightUnscaledBonus: UInt32,
    CreepGrowSound: CSoundLink,
    DensityDecayTime: CGameTime,
    DensityPersistent: Bit,
    DamageMinimum: Real,
    AttackRevealTime: CGameTime,
    PenaltyRevealTime: CGameTime,
    StalemateTestTime: CGameTime,
    StalemateWarningTime: CGameTime,
    DifficultyLevels: CArray(SDifficultyLevel),
    DifficultyDefault: TDifficultyLevel,
    AIBuilds: CArray(SAIBuild),
    AIBuildDefault: TAIBuild,
    HandicapValues: CArray(SHandicap),
    AirFormationDiameter: Real,
    MixedFormationDiameter: Real,
    FormationSeparationFactor: Real,
    MapSizes: CArray(SMapSize),
    UnpathableMargin: CiQuad,
    CameraMargin: CiQuad,
    CameraMarginAspectAdjust: CArray(SAspectMargin),
    TeamColors: CArray(STeamColor),
    SplashDamageEffect: CEffectLink,
    DefaultAttackType: EAttackType,
    WeaponHighGroundChanceToMiss: Real,
    UnitSightRangeDead: Real,
    UnitSightRangeUnderConstruction: Real,
    AI: CArray(SAIDescription),
    TriggerLibs: CArray(STriggerLib),
    FilterResults: CArray(STargetFilterResult),
    BeaconInfoArray: CArray(SBeaconInfo),
    SprayAbil: CAbilLink,
    SprayButtonReplacementTarget: CArray(CButtonLink),
    TauntAbil: CAbilLink,
    UncontestedCombatPeriod: CGameTime,
    AIResourceRequest: CArray(UInt32),
    DamageCategories: CArray(SDamageTypeInfo),
    AttackArmorTable: CArray(SAttackTypeInfo),
    VeterancySearchRadius: Real,
    VeterancySearchFilters: CTargetFilters,
    VeterancySearchMaxCount: UInt32,
    VeterancyKillerFilters: CTargetFilters,
    UnitLevelKillXPTable: CArray(UInt32),
    UnitLevelKillXPLevelFactor: Real,
    UnitLevelKillXPPreviousValueFactor: Real,
    UnitLevelKillXPBonusPerLevel: UInt32,
    VeterancyLevelKillXPTable: CArray(UInt32),
    VeterancyLevelKillXPLevelFactor: Real,
    VeterancyLevelKillXPPreviousValueFactor: Real,
    VeterancyLevelKillXPBonusPerLevel: UInt32,
    ResourceConvertArray: CArray(SResourceConvert),
    DamageHistoryIntervalMax: Real,
    MeleePointsThreshold: SMeleePointThreshold,
    MeleePointsGameDurationMin: CGameTime,
    FoodCappedMax: Real,
    TeleportResetRange: CArray(Real),
    CalculateFullVision: Bit,
    JoinInProgress: Bit,
    PathingConfig: CArray(Bit),
    PlayerLeaveFlags: CplayerLeaveFlagCountFlagArray,
    HeroOverlapPercent: Real,
    SmartCommandContinuous: Bit,
    EnforcedGameResultScoreResult: CScoreResultLink,
    DefaultPauseCountPerPlayer: UInt16,
    UnlimitedPause: Bit,
    EnableRewardSkins: Bit,
    EnableRewardVoicePacks: Bit,
    EnableRewardConsoleSkins: Bit,
    PlayersRequiredForLargeFormat: UInt32,
    DeepWaterThreshold: Real,
    GenerateWaterPathing: Bit,
    NeutralPlayerScanValidator: CValidatorLink,
}

const CGameUI = {
    ChallengeCategory: CArray(SChallengeCategory),
    ChallengeMasterAchievement: CArray(CAchievementLink),
    Campaign: CArray(CCampaignLink),
    StartupCampaign: UInt32,
    StartupMovieArray: CArray(SMovieConfig),
    MusicArray: CArray(CSoundtrackLink),
    StartupMusic: UInt32,
    IntroMusic: CSoundtrackLink,
    PostGameMusic: CSoundtrackLink,
    CreditsMusic: CSoundtrackLink,
    MatchmakingMusic: CSoundtrackLink,
    LoopAmbience: CSoundtrackLink,
    SoundQuality: CArray(SSoundQuality),
    MinimapData: SMinimapData,
    SelectionData: SSelectionData,
    SoundData: CArray(SSoundData),
    MixRouting: CArray(SMixRoute),
    GlobalSoundData: SGlobalSoundData,
    StartupDSPArray: CArray(CDSPLink),
    DSPArray: CArray(CDSPLink),
    PointModels: CArray(SPointModel),
    RegionNameSize: UInt32,
    LookAtTypes: CArray(SLookAtType),
    CameraShakeAmplitudes: CArray(SCameraShakeAmplitude),
    CameraShakeFrequencies: CArray(SCameraShakeFrequency),
    ListenerAngleRolloff: CArray(SListenerRolloff),
    ListenerDistanceRolloff: CArray(SListenerRolloff),
    PlanetPanelDefaultBackground: CModelLink,
    PlayerIdObserverColorMap: CArray(EUIColorRelation),
    BehaviorIconColors: CArray(CColor),
    BehaviorBorderColors: CArray(CColor),
    VitalColors: CArray(SVitalColor,EUnitVital),
    SelectionColors: CArray(CColor),
    SelectionColorBlindColors: CArray(CColor),
    RadarAlpha: UInt8,
    OverrideColors: CArray(STeamColor),
    ColorBlindColors: CArray(STeamColor),
    WireframeColorArray: CArray(CColor),
    MovementSpeedArray: CArray(SUnitSpeedText),
    WeaponSpeedArray: CArray(SWeaponSpeedText),
    InfoColorBuffed: CColor,
    InfoColorDebuffed: CColor,
    InfoColorUpgraded: CColor,
    RequirementsSatisfiedColor: CColor,
    RequirementsUnsatisfiedColor: CColor,
    RandomRaceIcon: CImagePath,
    DisplayScaledTime: Bit,
    DisplayTimeInSeconds: Bit,
    UnitDamageFlashDuration: UInt32,
    UnitDamageNotificationCooldown: UInt32,
    UnitDamageNotificationDelay: UInt32,
    CancelTargetModeButtonFace: CButtonLink,
    CancelPlacementModeButtonFace: CButtonLink,
    PlacementDisplayBonusRadius: UInt32,
    PlacementDisplayMinimumRadius: UInt32,
    PlacementErrorColor: CColor,
    PlacementWarningColor: CColor,
    PlacementPerfectColor: CColor,
    PlacementColorBlindErrorColor: CColor,
    PlacementColorBlindWarningColor: CColor,
    PlacementColorBlindDefaultColor: CColor,
    PlacementGridDimensions: C2iVector,
    PossibleEnemyPlacementPingDuration: CGameTime,
    PossibleEnemyPlacementPingModel: CModelLink,
    PossibleEnemyPlacementPingColor: CColor,
    ScreenModeTransitionDuration: UInt32,
    CostDisplayColor: CArray(CColor),
    CostDisplayFade: CGameTime,
    CostDisplayHeight: UInt32,
    CostDisplayHeightOffset: Real,
    CostDisplaySpeed: CGameSpeed,
    CostDisplayTime: CGameTime,
    WayPointMultiUnitFadePoint: real32,
    WayPointMultiUnitFadeAlpha: real32,
    WayPointLineWidth: real32,
    WayPointTileLength: real32,
    DefaultPathColor: CArray(CColor),
    DefaultPathLineWidth: CArray(real32),
    DefaultPathTileLength: CArray(real32),
    DefaultPathTexture: CArray(CImagePath),
    DefaultPathStepModel: CArray(CModelPath),
    DefaultPathStepModelScale: CArray(real32),
    StrobeCycleLength: UInt32,
    StrobeFalloff: real32,
    StrobeHeight: real32,
    StrobeHaloEmission: real32,
    StrobeHighlightColor: CColor,
    GlowPeakMultiplier: C3Vector,
    TransmissionSoundRect: CRect,
    TransmissionSoundDepth: real32,
    DefaultInfoTooltipTypes: CString,
    ObjectGroupData: CArray(SObjectGroupData),
    LoadingScreenHelpIntro: CArray(SLoadingScreenHelp),
    LoadingScreenHelp: CArray(SLoadingScreenHelp),
    LoadingBars: CArray(SLoadingBar),
    UnitKillRank: CArray(SUnitKillRank),
    AlertPanMaxDuration: real32,
    AlertPanMinDuration: real32,
    AlertPanMaxVelocity: real32,
    BeaconMinimapIcon: CImagePath,
    BeaconMinimapRenderPriority: CActorKey,
    AchievementTags: CArray(CFourCC),
    GameCategories: CArray(SGameCategory),
    AutoVariantArcade: SDefaultGameVariant,
    AutoVariantMelee: SDefaultGameVariant,
    DefaultVariants: CArray(SDefaultGameVariant),
    DefaultUIRace: CRaceLink,
    ObserverSoundtrack: CSoundtrackLink,
    UseMaxCooldown: Bit,
    CooldownDurationPrecision: UInt8,
    MinCooldownDisplayDuration: CGameTime,
    MinTimeDisplayDuration: CGameTime,
    TutorialArray: CArray(STutorialConfig),
    HotkeyInfoArray: CArray(SHotkeyInfo),
    FontStyleFileArray: CArray(CFontStylePath),
    CustomLayoutFileArray: CArray(CLayoutPath),
    ResourceArray: CArray(SResourceUI,EResourceType),
    TrialAllowedSinglePlayerMaps: CArray(CAssetPath),
    CommandHotkeyRepeatIgnored: Bit,
    AllowReturnToGameplayWhenDefeated: Bit,
    ActivateLobbyChatOnJoin: Bit,
    CameraEventThresholdDistance: Real,
    CameraEventThresholdPitch: CFangle,
    CameraEventThresholdYaw: CFangle,
    CameraEventThresholdTarget: Real,
    HelpControlCategories: CArray(SHelpControlCategoryInfo),
    HelpControls: CArray(SHelpControlInfo),
    HelpGameMechanics: CArray(SHelpGameMechanicInfo),
    HelpTechTitle: CStringLink,
    HelpHiddenInGlue: Bit,
    HelpTechTreeSuffix: CString,
    AltSoundtrack: CArray(SAltSoundtrack),
    DefaultObservedPlayerId: TPlayerId,
    SuppressSkinsForParticipants: Bit,
    SuppressSkinsInReplay: Bit,
    MapMechanicScoreValue: CScoreValueLink,
    TargetModeValidation: ETargetModeValidation,
    QuickCastMode: EQuickCastMode,
    CutsceneThemeChoiceArray: CArray(CStringLink),
    CutsceneAssetPath: CArray(SCutsceneAssetPath),
    CutsceneLatest: EGlueTheme,
}

const CHerd = {
    ClosestTo: EHerdClosestTo,
    PositionBias: real32,
    NodeSearchRadius: real32,
    Levels: CArray(SHerdLevel),
    Nodes: CArray(SHerdNode),
    SpeedLimit: CRange,
}

const CHerdNode = {
}

const CHero = {
    Name: CStringLink,
    StoreName: CStringLink,
    AttributeId: CFourCC,
    Flags: CheroFlagCountFlagArray,
    Model: CModelLink,
    DisplayModel: CArray(CModelLink),
    Level: UInt32,
    State: EHeroState,
    AbilCategoryArray: CArray(SHeroAbilCategory),
    StatArray: CArray(CHeroStatLink),
    UserReference: CUserReference,
    Unit: CUnitLink,
    AlternateUnitArray: CArray(CUnitLink),
    Role: EHeroRole,
    Melee: Bit,
    Description: CStringLink,
    InfoText: CStringLink,
    Title: CStringLink,
    Portrait: CImagePath,
    SelectScreenButtonImage: CImagePath,
    PartyPanelButtonImage: CImagePath,
    LeaderboardImage: CImagePath,
    ScoreScreenImage: CImagePath,
    DraftScreenLargeImage: CImagePath,
    DraftScreenLargeImageBackground: CImagePath,
    DraftScreenPortrait: CImagePath,
    DraftScreenPortraitBackground: CImagePath,
    ImageFacing: EHeroImageFacing,
    IntroCutsceneSize: EHeroCutsceneSize,
    PassiveButton: CButtonLink,
    PassiveAbil: CAbilLink,
    HeroAbilArray: CArray(SHeroAbil),
    HeroicAbilArray: CArray(SHeroHeroicAbility),
    SkinArray: CArray(CSkinLink),
    DefaultMount: CMountLink,
    VOArray: CArray(CSoundLink),
    SpecificKillVOArray: CArray(SHeroSpecificVO),
    RequiredRewardArray: CArray(CRewardLink),
    CanPurchaseUltimateSkinRewardArray: CArray(CRewardLink),
    TalentProfileArray: CArray(CTalentProfileLink),
    TalentTreeArray: CArray(SHeroTalentTree),
    TalentTierArray: CArray(SHeroTalentTier),
    SkinVariationRequiredReward: CArray(CRewardLink),
    MountVariationRequiredReward: CArray(CRewardLink),
    HeroSelectCutsceneFile: CCutscenePath,
    ScoreScreenCutsceneFile: CCutscenePath,
    MiniPortraitCutsceneFile: CCutscenePath,
    InGameUnitStatusCutsceneFile: CCutscenePath,
    VariationIcon: CImagePath,
    Difficulty: EHeroDifficulty,
    SpecificIntroVOArray: CArray(SHeroSpecificIntroVO),
    HeroTierAchievementId: UInt64,
    CollectionIcon: CImagePath,
    Gender: EHeroGender,
    Universe: EHeroUniverse,
    UniverseIcon: CImagePath,
    ProductId: TBattleProductId,
    PreviewCutsceneFile: CCutscenePath,
    TileCutsceneFile: CCutscenePath,
    LevelScalingArray: CArray(SHeroLevelScaling),
    AdditionalSearchText: CStringLink,
    VariationArray: CArray(CSkinLink),
    ReleaseDate: SHeroReleaseDate,
    HyperlinkId: THyperlinkId,
    AllowedMountCategoryArray: CArray(TMountCategory),
    Ratings: SHeroRatings,
    HomeScreenCutsceneFile: CCutscenePath,
    TalentAIBuildsArray: CArray(SHeroAITalentBuild),
    LayoutFile: CLayoutPath,
    HeroSpecificUIArray: CArray(SHeroSpecificUI),
    PurchaseWarning: CStringLink,
    PurchaseWarningCondition: EPurchaseWarningCondition,
}

const CHeroAbil = {
    Name: CStringLink,
    Icon: CImagePath,
    Description: CStringLink,
    Tooltip: CStringLink,
    Image: CImagePath,
    Movie: CMoviePath,
    RequiredLevel: UInt32,
    RequiredMission: CMapLink,
    State: EHeroAbilState,
    UpgradeArray: CArray(CUpgradeLink),
    LevelUpgradeArray: CArray(CUpgradeLink),
    AbilCommandArray: CArray(CAbilCommand),
    StatModifierArray: CArray(SHeroStatModifier),
    UserReference: CUserReference,
}

const CHeroStat = {
    Name: CStringLink,
    Value: Int32,
    UserReference: CUserReference,
}


const CItem = {
    Face: CButtonLink,
    Flags: CArray(Bit),
    Class: CItemClassLink,
    Container: CItemContainerLink,
    Level: UInt32,
    Charge: SCharge,
    GroupCooldownLink: TCooldownLink,
    Requirements: CTechRequirementsGraph,
    CarryBehaviorArray: CArray(CBehaviorLink),
    CarryWeaponArray: CArray(SUnitWeaponData),
    EquipBehaviorArray: CArray(CBehaviorLink),
    EquipWeaponArray: CArray(SUnitWeaponData),
}

const CItemAbil = {
    Face: CButtonLink,
    Flags: CArray(Bit),
    Class: CItemClassLink,
    Container: CItemContainerLink,
    Level: UInt32,
    Charge: SCharge,
    GroupCooldownLink: TCooldownLink,
    Requirements: CTechRequirementsGraph,
    CarryBehaviorArray: CArray(CBehaviorLink),
    CarryWeaponArray: CArray(SUnitWeaponData),
    EquipBehaviorArray: CArray(CBehaviorLink),
    EquipWeaponArray: CArray(SUnitWeaponData),
    Abil: CAbilLink,
    ToggledFace: CButtonLink,
    AbilFlags: CArray(Bit),
}

const CItemAbilPowerUp = {
    Face: CButtonLink,
    Flags: CArray(Bit),
    Class: CItemClassLink,
    Container: CItemContainerLink,
    Level: UInt32,
    Charge: SCharge,
    GroupCooldownLink: TCooldownLink,
    Requirements: CTechRequirementsGraph,
    CarryBehaviorArray: CArray(CBehaviorLink),
    CarryWeaponArray: CArray(SUnitWeaponData),
    EquipBehaviorArray: CArray(CBehaviorLink),
    EquipWeaponArray: CArray(SUnitWeaponData),
    Abil: CAbilLink,
    ToggledFace: CButtonLink,
    AbilFlags: CArray(Bit),
    CasterFilters: CTargetFilters,
    KillAfterUse: Bit,
}

const CItemEffect = {
    Face: CButtonLink,
    Flags: CArray(Bit),
    Class: CItemClassLink,
    Container: CItemContainerLink,
    Level: UInt32,
    Charge: SCharge,
    GroupCooldownLink: TCooldownLink,
    Requirements: CTechRequirementsGraph,
    CarryBehaviorArray: CArray(CBehaviorLink),
    CarryWeaponArray: CArray(SUnitWeaponData),
    EquipBehaviorArray: CArray(CBehaviorLink),
    EquipWeaponArray: CArray(SUnitWeaponData),
    Effect: CEffectLink,
    EffectCost: SCost,
    EffectFlags: CArray(Bit),
    RefundFraction: SCostFactor,
    TargetFilters: CTargetFilters,
    Range: Real,
}

const CItemEffectInstant = {
    Face: CButtonLink,
    Flags: CArray(Bit),
    Class: CItemClassLink,
    Container: CItemContainerLink,
    Level: UInt32,
    Charge: SCharge,
    GroupCooldownLink: TCooldownLink,
    Requirements: CTechRequirementsGraph,
    CarryBehaviorArray: CArray(CBehaviorLink),
    CarryWeaponArray: CArray(SUnitWeaponData),
    EquipBehaviorArray: CArray(CBehaviorLink),
    EquipWeaponArray: CArray(SUnitWeaponData),
    Effect: CEffectLink,
    EffectCost: SCost,
    EffectFlags: CArray(Bit),
    RefundFraction: SCostFactor,
    TargetFilters: CTargetFilters,
    Range: Real,
}

const CItemEffectTarget = {
    Face: CButtonLink,
    Flags: CArray(Bit),
    Class: CItemClassLink,
    Container: CItemContainerLink,
    Level: UInt32,
    Charge: SCharge,
    GroupCooldownLink: TCooldownLink,
    Requirements: CTechRequirementsGraph,
    CarryBehaviorArray: CArray(CBehaviorLink),
    CarryWeaponArray: CArray(SUnitWeaponData),
    EquipBehaviorArray: CArray(CBehaviorLink),
    EquipWeaponArray: CArray(SUnitWeaponData),
    Effect: CEffectLink,
    EffectCost: SCost,
    EffectFlags: CArray(Bit),
    RefundFraction: SCostFactor,
    TargetFilters: CTargetFilters,
    Range: Real,
}

const CItemClass = {
    Name: CStringLink,
}

const CItemContainer = {
    Model: CModelLink,
    ModelHeight: UInt32,
    ModelWidth: UInt32,
    Slots: CArray(SItemContainerSlot),
}

const CKinetic = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Chance: Real,
    Cycles: UInt32,
    Duration: CGameTime,
}

const CKineticFollow = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Chance: Real,
    Cycles: UInt32,
    Duration: CGameTime,
    Where: SEffectWhichLocation,
    Follow: EKineticFollow,
}

const CKineticRotate = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Chance: Real,
    Cycles: UInt32,
    Duration: CGameTime,
    Around: SEffectWhichLocation,
    Pitch: CVariatorGameFangle,
    Roll: CVariatorGameFangle,
    Yaw: CVariatorGameFangle,
}

const CKineticSequence = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Chance: Real,
    Cycles: UInt32,
    Duration: CGameTime,
    KineticArray: CArray(CKineticLink),
}

const CKineticSet = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Chance: Real,
    Cycles: UInt32,
    Duration: CGameTime,
    KineticArray: CArray(CKineticLink),
}

const CKineticTranslate = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Chance: Real,
    Cycles: UInt32,
    Duration: CGameTime,
    XOffset: CVariatorGameFixed,
    YOffset: CVariatorGameFixed,
    ZOffset: CVariatorGameFixed,
}

const CKineticDistance = {
    Name: CStringLink,
    ValidatorArray: CArray(CValidatorLink),
    EditorCategories: TEditorCategories,
    Chance: Real,
    Cycles: UInt32,
    Duration: CGameTime,
    DistanceAwayFrom: SEffectWhichLocation,
    Distance: SAccumulatedFixed,
}

const CLensFlareSet = {
    Flare: CArray(SFlareInfo),
}

const CLight = {
    TimePerDay: CTimeOfDay,
    TimePerLoop: CTimeOfDay,
    TimeStart: CTimeOfDay,
    TimeEventArray: CArray(STimeEvent),
    ToDInfoArray: CArray(SLightInfo),
    EditorCategories: TEditorCategories,
    AmbientEnvironmentMap: CTexturePath,
    LightingRegionMap: CTexturePath,
}

const CLocation = {
    Name: CStringLink,
    Description: CStringLink,
    Movie: CMoviePath,
    MissionTitle: CStringLink,
    MissionText: CStringLink,
    PlanetToolTip: CStringLink,
    PrimaryObjectiveTitle: CStringLink,
    PrimaryObjectiveText: CStringLink,
    SecondaryObjectiveTitle: CStringLink,
    SecondaryObjectiveText: CStringLink,
    RewardTitle: CStringLink,
    RewardText: CStringLink,
    BonusTitle: CStringLink,
    BonusText: CStringLink,
    ContactName: CStringLink,
    ContactModel: CModelLink,
    ContactActor: CActorLink,
    PlanetModel: CModelLink,
    BackgroundModel: CModelLink,
    BackgroundImage: CImagePath,
    MissionCategoryArray: CArray(SMissionCategory),
    AmbientSound: CSoundtrackLink,
    UserReference: CUserReference,
}

const CLoot = {
    ValidatorArray: CArray(CValidatorLink),
}

const CLootSpawn = {
    ValidatorArray: CArray(CValidatorLink),
    SpawnLocation: EEffectLocation,
    SpawnOwner: EEffectPlayer,
    SpawnRange: Real,
}

const CLootEffect = {
    ValidatorArray: CArray(CValidatorLink),
    Effect: CEffectLink,
}

const CLootItem = {
    ValidatorArray: CArray(CValidatorLink),
    SpawnLocation: EEffectLocation,
    SpawnOwner: EEffectPlayer,
    SpawnRange: Real,
    ClassArray: CArray(CItemClassLink),
    MaxLevel: UInt32,
    MinLevel: UInt32,
}

const CLootSet = {
    ValidatorArray: CArray(CValidatorLink),
    MinCount: UInt32,
    MaxCount: UInt32,
    ChildArray: CArray(SLootChoice),
}

const CLootUnit = {
    ValidatorArray: CArray(CValidatorLink),
    SpawnLocation: EEffectLocation,
    SpawnOwner: EEffectPlayer,
    SpawnRange: Real,
    Unit: CUnitLink,
}

const CMap = {
    Name: CStringLink,
    Ð¡File: CString,
    Kind: EMapKind,
    Description: CStringLink,
    MissionTitle: CStringLink,
    MissionText: CStringLink,
    MissionBackgroundImage: CImagePath,
    PrimaryObjectiveTitle: CStringLink,
    PrimaryObjectiveText: CStringLink,
    PrimaryObjectiveTooltip: CStringLink,
    SecondaryObjectiveTitle: CStringLink,
    SecondaryObjectiveText: CStringLink,
    SecondaryObjectiveTooltip: CStringLink,
    RewardTitle: CStringLink,
    RewardText: CStringLink,
    RewardTooltip: CStringLink,
    ResearchTitle: CStringLink,
    ResearchText: CStringLink,
    ResearchTooltip: CStringLink,
    BonusTitle: CStringLink,
    BonusText: CStringLink,
    BonusTooltip: CStringLink,
    TechnologyTitle: CStringLink,
    TechnologyNameText: CStringLink,
    TechnologyDescriptionText: CStringLink,
    TechnologyTooltip: CStringLink,
    TechnologyUnitLink: CUnitLink,
    ContactTitle: CStringLink,
    ContactNameText: CStringLink,
    ContactModelLink: CModelLink,
    ContactTooltip: CStringLink,
    ContactActor: CActorLink,
    LoadingImage: CImagePath,
    LoadingTitle: CStringLink,
    LoadingSubtitle: CStringLink,
    LoadingBody: CStringLink,
    LoadingHelp: CStringLink,
    LoadingHelpRestart: CStringLink,
    LoadingHelpAlternate: CStringLink,
    LoadingTextOffset: C2iVector,
    LoadingTextWidth: UInt32,
    LoadingTextHeight: UInt32,
    LoadingTextStyle: CStyleName,
    ArmyCategory: CArmyCategoryLink,
    Location: CLocationLink,
    ObjectiveArray: CArray(CObjectiveLink),
    Summary: CStringLink,
    UserReference: CUserReference,
}

const CModel = {
    Model: CModelPath,
    LowQualityModel: CModelLink,
    RequiredAnims: CArray(CAnimsPath),
    OptionalAnims: CArray(CAnimsPath),
    RequiredAnimsEx: CArray(SAnimFile),
    AnimAliases: CArray(SAnimAlias),
    AnimBlendTime: real32,
    AnimSpeed: real32,
    AttachProps: CArray(SAttachProps),
    EditorCategories: TEditorCategories,
    Events: CArray(SModelDataEvent),
    FacialController: CFacialPath,
    Flags: CArray(Bit),
    FuzzyGeometryPadding: real32,
    Image: CImagePath,
    Lighting: CLightLink,
    Occlusion: EOcclusion,
    OccludingOpacity: real32,
    PausedParticleSystemBehavior: EPausedParticleSystemBehavior,
    PhysicsMaterialMappings: CArray(SPhysicsMaterialMapping),
    PhysicsMaterialOverride: CPhysicsMaterialLink,
    PhysicsGravityFactor: real32,
    PhysicsForceFactor: real32,
    PhysicsDeathMotionFactor: CVariatorActorReal32,
    PlanetPanelCamera: CString,
    Priority: UInt8,
    Radius: real32,
    RadiusLoose: real32,
    Quality: UInt32,
    PortraitOffset: C3Vector,
    ScaleMax: C3Vector,
    ScaleMin: C3Vector,
    SelectionLayer: UInt32,
    SelectionOffset: C3Vector,
    SelectionRadius: real32,
    ShadowRadius: real32,
    SquibTypeDefault: ESquibType,
    TechPurchaseCamera: CString,
    TechPurchaseSpeed: real32,
    Tipability: real32,
    TipabilityLength: real32,
    TipabilityWidth: real32,
    TipabilityBlendRate: CActorAngle,
    TipabilityPitchMax: CActorAngle,
    TipabilityRollMax: CActorAngle,
    BoundingBoxPadding: C3Vector,
    TextureAppliedGroups: CTextureProps,
    TextureDeclares: CArray(STextureDeclare),
    TextureInfos: CArray(STextureInfo),
    TextureExpressionsForEditor: CArray(STextureExpressionSpec),
    TextureMatchesForEditor: CArray(STextureMatchSpec),
    UnitGlossaryCamera: CString,
    UnitGlossaryVariation: UInt8,
    UnitGlossaryTeamColorIndex: UInt32,
    VariationCount: UInt32,
    Variations: CArray(SModelVariation),
    WalkAnimMoveSpeed: CGameRate,
    RunAnimMoveSpeed: CGameRate,
    RunAnimMoveSpeedThreshold: CGameRate,
}

const CModelFoliage = {
    Model: CModelPath,
    LowQualityModel: CModelLink,
    RequiredAnims: CArray(CAnimsPath),
    OptionalAnims: CArray(CAnimsPath),
    RequiredAnimsEx: CArray(SAnimFile),
    AnimAliases: CArray(SAnimAlias),
    AnimBlendTime: real32,
    AnimSpeed: real32,
    AttachProps: CArray(SAttachProps),
    EditorCategories: TEditorCategories,
    Events: CArray(SModelDataEvent),
    FacialController: CFacialPath,
    Flags: CArray(Bit),
    FuzzyGeometryPadding: real32,
    Image: CImagePath,
    Lighting: CLightLink,
    Occlusion: EOcclusion,
    OccludingOpacity: real32,
    PausedParticleSystemBehavior: EPausedParticleSystemBehavior,
    PhysicsMaterialMappings: CArray(SPhysicsMaterialMapping),
    PhysicsMaterialOverride: CPhysicsMaterialLink,
    PhysicsGravityFactor: real32,
    PhysicsForceFactor: real32,
    PhysicsDeathMotionFactor: CVariatorActorReal32,
    PlanetPanelCamera: CString,
    Priority: UInt8,
    Radius: real32,
    RadiusLoose: real32,
    Quality: UInt32,
    PortraitOffset: C3Vector,
    ScaleMax: C3Vector,
    ScaleMin: C3Vector,
    SelectionLayer: UInt32,
    SelectionOffset: C3Vector,
    SelectionRadius: real32,
    ShadowRadius: real32,
    SquibTypeDefault: ESquibType,
    TechPurchaseCamera: CString,
    TechPurchaseSpeed: real32,
    Tipability: real32,
    TipabilityLength: real32,
    TipabilityWidth: real32,
    TipabilityBlendRate: CActorAngle,
    TipabilityPitchMax: CActorAngle,
    TipabilityRollMax: CActorAngle,
    BoundingBoxPadding: C3Vector,
    TextureAppliedGroups: CTextureProps,
    TextureDeclares: CArray(STextureDeclare),
    TextureInfos: CArray(STextureInfo),
    TextureExpressionsForEditor: CArray(STextureExpressionSpec),
    TextureMatchesForEditor: CArray(STextureMatchSpec),
    UnitGlossaryCamera: CString,
    UnitGlossaryVariation: UInt8,
    UnitGlossaryTeamColorIndex: UInt32,
    VariationCount: UInt32,
    Variations: CArray(SModelVariation),
    WalkAnimMoveSpeed: CGameRate,
    RunAnimMoveSpeed: CGameRate,
    RunAnimMoveSpeedThreshold: CGameRate,
    Layer: EFoliageLayer,
    SpringDampening: real32,
    SpringStrength: real32,
    DragCoefficient: real32,
    WindInfluence: real32,
    ForceNormalsUp: Bit,
    RandomDeviation: real32,
    Flexibility: real32,
}

const CMount = {
    Name: CStringLink,
    InfoText: CStringLink,
    AttributeId: CFourCC,
    Flags: CmountFlagCountFlagArray,
    Model: CModelLink,
    Attached: Bit,
    RequiredRewardArray: CArray(CRewardLink),
    VOArray: CArray(CSoundLink),
    VariationIcon: CImagePath,
    VariationArray: CArray(CMountLink),
    MountCategory: TMountCategory,
}

const CMover = {
    Flags: CArray(Bit),
    HeightMap: EHeightMap,
    PathMode: EPathMode,
    PlacementArray: CArray(SPathingData),
    RestoreHeightDuration: CGameTime,
}

const CMoverAvoid = {
    Flags: CArray(Bit),
    HeightMap: EHeightMap,
    PathMode: EPathMode,
    PlacementArray: CArray(SPathingData),
    RestoreHeightDuration: CGameTime,
}

const CMoverFlock = {
    Flags: CArray(Bit),
    HeightMap: EHeightMap,
    PathMode: EPathMode,
    PlacementArray: CArray(SPathingData),
    RestoreHeightDuration: CGameTime,
}

const CMoverMissile = {
    Flags: CArray(Bit),
    HeightMap: EHeightMap,
    PathMode: EPathMode,
    PlacementArray: CArray(SPathingData),
    RestoreHeightDuration: CGameTime,
    MotionPhases: CArray(SMotionPhase),
    MotionOverlays: CArray(SMotionOverlay),
    RotationIgnoredByUnit: Bit,
    RespectUnitHeightAtDestination: Bit,
}

const CMoverNull = {
    Flags: CArray(Bit),
    HeightMap: EHeightMap,
    PathMode: EPathMode,
    PlacementArray: CArray(SPathingData),
    RestoreHeightDuration: CGameTime,
}

const CObjective = {
    Name: CStringLink,
    Description: CStringLink,
    Type: EObjectiveType,
    RequiredCount: Int32,
    RewardArray: CArray(Int32),
    UserReference: CUserReference,
}

const CPhysicsMaterial = {
    Density: real32,
    Friction: real32,
    Restitution: real32,
    LinearDamping: real32,
    AngularDamping: real32,
}

const CPing = {
    Model: CModelLink,
    Sound: CSoundLink,
    ActorSound: CActorLink,
    Color: CColor,
    Duration: Real,
    Scale: Real,
    Rotation: Real,
    Tooltip: CStringLink,
    Flags: CpingFlagCountFlagArray,
}


const CPlayerResponse = {
    EditorCategories: TEditorCategories,
    Priority: UInt32,
    Location: EDamageLocation,
}

const CPlayerResponseUnit = {
    EditorCategories: TEditorCategories,
    Priority: UInt32,
    Location: EDamageLocation,
    Chance: Real,
    Cost: SCost,
    Handled: CEffectLink,
    CasterFilters: CTargetFilters,
    TargetFilters: CTargetFilters,
    ValidatorArray: CArray(CValidatorLink),
    ContinueMethod: EResponseContinueMethod,
    ProvideCategories: CdamageResponseCategoryCountFlagArray,
    PreventCategories: CdamageResponseCategoryCountFlagArray,
}

const CPlayerResponseUnitDamage = {
    EditorCategories: TEditorCategories,
    Priority: UInt32,
    Location: EDamageLocation,
    Chance: Real,
    Cost: SCost,
    Handled: CEffectLink,
    CasterFilters: CTargetFilters,
    TargetFilters: CTargetFilters,
    ValidatorArray: CArray(CValidatorLink),
    ContinueMethod: EResponseContinueMethod,
    ProvideCategories: CdamageResponseCategoryCountFlagArray,
    PreventCategories: CdamageResponseCategoryCountFlagArray,
    DeathType: CdeathTypeCountFlagArray,
    ClampMaximum: Real,
    ClampMinimum: Real,
    Exhausted: CEffectLink,
    Evade: Bit,
    Fatal: Bit,
    Ignore: CArray(Real),
    Kind: CdamageKindCountFlagArray,
    Maximum: Real,
    Minimum: Real,
    ModifyAmount: Real,
    ModifyFraction: Real,
    ModifyLimit: Real,
    ModifyLimitVitalMaxFractionArray: CArray(Real,EUnitVital),
    ModifyMinimumDamage: Bit,
    RequireEffectArray: CArray(CEffectLink),
    ExcludeEffectArray: CArray(CEffectLink),
    RequireEffectInChainArray: CArray(CEffectLink),
    ExcludeEffectInChainArray: CArray(CEffectLink),
    DamageValue: EDamageResponseDamageValue,
    ModifyScoreArray: CArray(SScoreValueUpdate),
}

const CPlayerResponseUnitDeath = {
    EditorCategories: TEditorCategories,
    Priority: UInt32,
    Location: EDamageLocation,
    Chance: Real,
    Cost: SCost,
    Handled: CEffectLink,
    CasterFilters: CTargetFilters,
    TargetFilters: CTargetFilters,
    ValidatorArray: CArray(CValidatorLink),
    ContinueMethod: EResponseContinueMethod,
    ProvideCategories: CdamageResponseCategoryCountFlagArray,
    PreventCategories: CdamageResponseCategoryCountFlagArray,
    DeathType: CdeathTypeCountFlagArray,
}

const CPlayerResponseUnitBirth = {
    EditorCategories: TEditorCategories,
    Priority: UInt32,
    Location: EDamageLocation,
    Chance: Real,
    Cost: SCost,
    Handled: CEffectLink,
    CasterFilters: CTargetFilters,
    TargetFilters: CTargetFilters,
    ValidatorArray: CArray(CValidatorLink),
    ContinueMethod: EResponseContinueMethod,
    ProvideCategories: CdamageResponseCategoryCountFlagArray,
    PreventCategories: CdamageResponseCategoryCountFlagArray,
    BirthType: CresponseUnitBirthTypeCountFlagArray,
}


const CPortraitPack = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    Description: CStringLink,
    Image: STextureSheetEntry,
    ProductId: TBattleProductId,
    ReleaseDate: SProductReleaseDate,
    PortraitArray: CArray(CRewardLink),
    StoreTypeName: CStringLink,
}

const CPreload = {
    NormalConditions: CArray(CBankConditionLink),
    NormalTiming: EPreloadTiming,
    QueuedConditions: CArray(CBankConditionLink),
    Flags: CArray(Bit),
}

const CPreloadAsset = {
    NormalConditions: CArray(CBankConditionLink),
    NormalTiming: EPreloadTiming,
    QueuedConditions: CArray(CBankConditionLink),
    Flags: CArray(Bit),
    Ð¡File: CAssetPath,
}

const CPreloadScene = {
    NormalConditions: CArray(CBankConditionLink),
    NormalTiming: EPreloadTiming,
    QueuedConditions: CArray(CBankConditionLink),
    Flags: CArray(Bit),
    Ð¡File: CString,
    Filter: CString,
}

const CPreloadActor = {
    NormalConditions: CArray(CBankConditionLink),
    NormalTiming: EPreloadTiming,
    QueuedConditions: CArray(CBankConditionLink),
    Flags: CArray(Bit),
    Link: CActorLink,
}

const CPreloadConversation = {
    NormalConditions: CArray(CBankConditionLink),
    NormalTiming: EPreloadTiming,
    QueuedConditions: CArray(CBankConditionLink),
    Flags: CArray(Bit),
    Link: CConversationLink,
}

const CPreloadModel = {
    NormalConditions: CArray(CBankConditionLink),
    NormalTiming: EPreloadTiming,
    QueuedConditions: CArray(CBankConditionLink),
    Flags: CArray(Bit),
    Link: CModelLink,
    Variations: CString,
    ModelFlags: CArray(Bit),
}

const CPreloadSound = {
    NormalConditions: CArray(CBankConditionLink),
    NormalTiming: EPreloadTiming,
    QueuedConditions: CArray(CBankConditionLink),
    Flags: CArray(Bit),
    Link: CSoundLink,
    Variations: CString,
}

const CPreloadUnit = {
    NormalConditions: CArray(CBankConditionLink),
    NormalTiming: EPreloadTiming,
    QueuedConditions: CArray(CBankConditionLink),
    Flags: CArray(Bit),
    Link: CUnitLink,
}

const CPremiumMap = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    StoreTypeName: CStringLink,
    ReleaseDate: SProductReleaseDate,
    HyperlinkId: TProductHyperlinkId,
    ProductId: TBattleProductId,
    LicenseId: UInt32,
    Price: CStringLink,
    ScreenShotImageArray: CArray(CImagePath),
    ScreenShotDescriptionArray: CArray(CStringLink),
    Movie: CMoviePath,
    MoviePreviewImage: CImagePath,
    MovieDescription: CStringLink,
    Description: CStringLink,
    Title: CStringLink,
    PayToPlay: Bit,
    SuppressedRegion: CFourCC,
    ShortDescription: CStringLink,
    LanguageWarning: CStringLink,
    ScreenShotImageThumbnailArray: CArray(CImagePath),
    MovieImageThumbnail: CImagePath,
    CustomFeaturedDescription: CStringLink,
}

const CRace = {
    Name: CStringLink,
    AttributeId: CFourCC,
    Icon: CImagePath,
    RaceIcon: CImagePath,
    StartLocationAlert: CAlertLink,
    GameMusic: CSoundtrackLink,
    Flags: CArray(Bit),
    ShowResource: CResourceTypeCountFlagArray,
    StartingUnitArray: CArray(SStartingUnit),
    StartingResource: CArray(UInt32,EResourceType),
    FoodCeiling: UInt32,
    UpkeepTax: CArray(SUpkeepTax),
    GlossaryTeamColorIndex: UInt32,
    MiniMapBorderColor: CColor,
    PlacementGridColorBlindColor: CColor,
    VictorySound: CSoundLink,
    DefeatSound: CSoundLink,
    ExpansionOrder: UInt32,
    LevelAchievementId: UInt64,
    DefaultConsoleSkin: CConsoleSkinLink,
}

const CRaceBannerPack = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    Description: CStringLink,
    Image: STextureSheetEntry,
    ProductId: TBattleProductId,
    ReleaseDate: SProductReleaseDate,
    RaceBannerArray: CArray(CRewardLink),
    StoreTypeName: CStringLink,
}

const CRequirement = {
    EditorCategories: TEditorCategories,
    CanBeSuppressed: CrequirementCountFlagArray,
    NodeArray: CArray(SRequirementNode),
}

const CRequirementNode = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
}

const CRequirementGT = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementLT = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementGTE = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementLTE = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementEq = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementNE = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementAnd = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementOr = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementXor = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementNot = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementOdd = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementDiv = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementMod = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementMul = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementSum = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    OperandArray: CArray(CRequirementNodeLink),
}

const CRequirementConst = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Value: Int32,
}

const CRequirementAllowAbil = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Link: CAbilLink,
    Index: UInt32,
}

const CRequirementAllowBehavior = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Link: CBehaviorLink,
}

const CRequirementAllowUnit = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Link: CUnitLink,
}

const CRequirementAllowUpgrade = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Link: CUpgradeLink,
}

const CRequirementCountAbil = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Count: SRequirementCount,
}

const CRequirementCountBehavior = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Count: SRequirementCount,
}

const CRequirementCountEffect = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Count: SRequirementCount,
}

const CRequirementCountUnit = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Count: SRequirementCount,
}

const CRequirementCountUpgrade = {
    Flags: CArray(Bit),
    Tooltip: CStringLink,
    Count: SRequirementCount,
}

const CReverb = {
    Room: Int32,
    RoomHF: Int32,
    RoomLF: Int32,
    DecayTime: real32,
    DecayHFRatio: real32,
    Reflections: Int32,
    ReflectionsDelay: real32,
    Reverb: Int32,
    ReverbDelay: real32,
    HFReference: real32,
    LFReference: real32,
    RoomRolloffFactor: real32,
    Diffusion: real32,
    Density: real32,
    SpeakerMix: CArray(real32),
}

const CReward = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
}

const CRewardDecal = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    DecalPack: CDecalPackLink,
    Texture: CTextureLink,
    Spray: CSprayLink,
}

const CRewardIcon = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
}

const CRewardModel = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Model: CModelLink,
}

const CRewardPortrait = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Model: CModelLink,
    PortraitPack: CPortraitPackLink,
}

const CRewardBadge = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Texture: CTextureLink,
}

const CRewardPoints = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Points: UInt32,
}

const CRewardTrophy = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Trophy: CTrophyLink,
}

const CRewardEmoticon = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Emoticon: CEmoticonLink,
}

const CRewardVoicePack = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    VoicePack: CVoicePackLink,
    ReplacementArray: CArray(SGameReplacement),
}

const CRewardPortraitInGame = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Enabled: Bit,
}

const CRewardConsoleSkin = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    ConsoleSkin: CConsoleSkinLink,
}

const CRewardSpray = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Texture: CTextureLink,
    Spray: CSprayLink,
}

const CRewardSprayUseDecal = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    Enabled: Bit,
}

const CRewardRaceBanner = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    RaceBannerPack: CRaceBannerPackLink,
    Image1v1: CImagePath,
    Image2v2: CImagePath,
    Image3v3: CImagePath,
    Image4v4: CImagePath,
}

const CRewardStim = {
    Category: SRewardCategory,
    Flags: CrewardFlagCountFlagArray,
    Name: CStringLink,
    Description: CStringLink,
    DescriptionUnearned: CStringLink,
    IconFile: CImagePath,
    IconCols: UInt32,
    IconRows: UInt32,
    IconSlot: UInt32,
    IgnorePlayerRace: Bit,
    Race: CRaceLink,
    Hero: CHeroLink,
    License: TBattleLicenseName,
    Upgrades: CArray(CUpgradeLink),
    Skin: CSkinLink,
    UIOrderHint: UInt32,
    LargeImage: CImagePath,
    RewardSpecificUIArray: CArray(SRewardSpecificUI),
    ParentBundle: CBundleLink,
    StimPack: CStimPackLink,
    Texture: CTextureLink,
}

const CScoreResult = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
}

const CScoreResultRoot = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
    HeaderTable: CArray(CScoreResultLink),
}

const CScoreResultScore = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
    ValueTable: CArray(CScoreValueLink),
}

const CScoreResultGraph = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
    ValueTable: CArray(CScoreValueLink),
}

const CScoreResultPane = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
    ValueTable: CArray(CScoreValueLink),
}

const CScoreResultBuildOrder = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
}

const CScoreResultCallouts = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
}

const CScoreResultExperience = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
    ValueTable: CArray(CScoreValueLink),
}

const CScoreResultPerformance = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreResultFlagCountFlagArray,
    SortValue: Int32,
    ValueTable: CArray(CScoreValueLink),
}

const CScoreValue = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreValueFlagCountFlagArray,
    Sort: EScoreSort,
    Report: EScoreValueReport,
    UniqueTag: CFourCC,
}

const CScoreValueCustom = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreValueFlagCountFlagArray,
    Sort: EScoreSort,
    Report: EScoreValueReport,
    UniqueTag: CFourCC,
    Collapse: EScoreCollapse,
    Type: EScoreValueType,
}

const CScoreValueStandard = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreValueFlagCountFlagArray,
    Sort: EScoreSort,
    Report: EScoreValueReport,
    UniqueTag: CFourCC,
    Value: EScoreValue,
}

const CScoreValueConstant = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreValueFlagCountFlagArray,
    Sort: EScoreSort,
    Report: EScoreValueReport,
    UniqueTag: CFourCC,
    Collapse: EScoreCollapse,
    Type: EScoreValueType,
    Value: Real,
}

const CScoreValueCombine = {
    Name: CStringLink,
    PublishName: CStringLink,
    Tooltip: CStringLink,
    Icon: CImagePath,
    Flags: CscoreValueFlagCountFlagArray,
    Sort: EScoreSort,
    Report: EScoreValueReport,
    UniqueTag: CFourCC,
    Collapse: EScoreCollapse,
    Type: EScoreValueType,
    Operation: EScoreValueOperation,
    ValueTable: CArray(CScoreValueLink),
}

const CShape = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
}

const CShapeArc = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    Arc: CFangleArc,
    Radius: Real,
}

const CShapeQuad = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    Quad: CfQuad,
}
const CSkin = {
    Name: CStringLink,
    InfoText: CStringLink,
    AttributeId: CFourCC,
    ReplacementArray: CArray(SGameReplacement),
    VariationIcon: CImagePath,
    DisplayModel: CArray(CModelLink),
    ModelGroups: CArray(SSkinModelGroup),
    ModelMacroRun: CArray(SSkinModelMacroRun),
    EffectArray: CArray(SUpgradeEffect),
    Camera: CString,
    Rotation: Int32,
    WarChestUILight: CString,
    WarChestDisplayModel: CModelLink,
    WarChestDisplayActor: CActorLink,
    CollectionDisplayModel: CModelLink,
    CollectionDisplayUnit: CUnitLink,
    CollectionDisplayModelAlternate: CModelLink,
    CollectionDisplayUnitAlternate: CUnitLink,
    CollectionDisplayActor: CActorLink,
    IsDefaultSkin: Bit
}

const CSkinPack = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    ProductId: TBattleProductId,
    EntryArray: CArray(SSkinPackEntry),
    ReleaseDate: SProductReleaseDate,
    StoreTypeName: CStringLink,
    CollectionId: CIdentifier,
}

const CSound = {
    EditorCategories: TEditorCategories,
    AssetArray: CArray(SSoundAsset),
    AssetArrayTemplate: SSoundAssetTemplate,
    Flags: CArray(Bit),
    Category: ESoundCategory,
    CategoryLocal: ESoundCategory,
    Chance: UInt8,
    ConeAngle: CRange,
    ConeOrientation: C3Vector,
    ConeVolume: CRange,
    DopplerLevel: real32,
    DupeDestroyCount: UInt16,
    DupeDestroyCountPerPlayer: UInt16,
    DupeFadeBlend: ESoundBlend,
    DupeFadeIn: CArray(SVolumeFade),
    DupeFadeOut: CArray(SVolumeFade),
    DupeHistoryCount: UInt16,
    DupeMaximumMethod: ESoundDupe,
    DupeMuteCount: UInt16,
    DupeMuteCountPerPlayer: UInt16,
    DupeRepeatCount: UInt16,
    DupeThresholdFadeTime: UInt32,
    DupeThresholdPoints: CArray(SVolumeThreshold),
    DupeWait: CiRange,
    DupePrioritization: ESoundDupePriority,
    Exclusivity: CSoundExclusivityLink,
    FogFadeBlend: ESoundBlend,
    FogFadeIn: CArray(SVolumeFade),
    FogFadeOut: CArray(SVolumeFade),
    HerdNode: CHerdNodeLink,
    LocaleFlags: SSoundLocaleFlags,
    LoopCount: Int32,
    LoopDelay: CiRange,
    LowPassGain: real32,
    MixerPriority: Int16,
    MixerPriorityNonLocal: Int16,
    Mode: ESoundMode,
    Mute: Bit,
    MuteFadeBlend: ESoundBlend,
    MuteFadeIn: CArray(SVolumeFade),
    MuteFadeOut: CArray(SVolumeFade),
    OcclusionDirect: CRange,
    OcclusionReverb: CRange,
    OffsetFadeBlend: ESoundBlend,
    OffsetFadeIn: CArray(SVolumeFade),
    OffsetFadeOut: CArray(SVolumeFade),
    OffsetShiftBlend: ESoundBlend,
    OffsetShiftIn: CArray(SPitchShift),
    OffsetShiftOut: CArray(SPitchShift),
    OverlapPitchDelta: real32,
    OverlapTimeDelta: UInt16,
    Pan: CRange,
    PanLevel: real32,
    PanLevelNonLocal: real32,
    Pitch: CPitchRange,
    PlayDelay: CiRange,
    PositionRandomOffset: C3Vector,
    PositionRandomOffsetPower: real32,
    ResourcePriority: UInt8,
    ReverbBalance: SReverbBalance,
    ReverbRolloffBlend: ESoundBlend,
    ReverbRolloffPoints: CArray(SReverbRolloff),
    Select: ESoundSelect,
    Solo: Bit,
    SpeakerMix: CArray(real32),
    SpeakerMixNonLocal: CArray(real32),
    Spread: real32,
    SustainFadeBlend: ESoundBlend,
    SustainFade: CArray(SVolumeFade),
    Timeout: UInt32,
    VariationMinimum: UInt32,
    Volume: CVolumeRange,
    VolumeRolloffBlend: ESoundBlend,
    VolumeRolloffFadeBlend: ESoundBlend,
    VolumeRolloffFadeIn: CArray(SVolumeFade),
    VolumeRolloffFadeOut: CArray(SVolumeFade),
    VolumeRolloffPoints: CArray(SVolumeRolloff),
    LocalVolumeAdjustment: CVolumeRange,
    NonLocalVolumeAdjustment: CVolumeRange,
    CategoryDuckingLocal: CSoundMixSnapshotLink,
    CategoryDuckingNonLocal: CSoundMixSnapshotLink,
}

const CSoundExclusivity = {
    Group: UInt32,
    Priority: real32,
    CollideWithLower: EExclusivityAction,
    CollideWithEqual: EExclusivityAction,
    CollideWithHigher: EExclusivityAction,
    QCollideWithLower: EExclusivityQueueAction,
    QCollideWithEqual: EExclusivityQueueAction,
    QCollideWithHigher: EExclusivityQueueAction,
    QTimeout: UInt32,
    QDelay: UInt32,
    InterruptFadeBlend: ESoundBlend,
    InterruptFade: CArray(SVolumeFade),
    InterruptDelay: UInt32,
    Flags: CArray(Bit),
    SuppressGroups: CArray(UInt32),
    DupeWait: UInt32,
}

const CSoundMixSnapshot = {
    Attack: UInt32,
    Hold: UInt32,
    Release: UInt32,
    Flags: CArray(Bit),
    MixGlobal: CArray(CVolume),
    MixNonLocal: CArray(CVolume),
}

const CSoundtrack = {
    CueArray: CArray(SSoundtrackCue),
    Delay: CiRange,
    Flags: CArray(Bit),
    Select: ESoundSelect,
    Next: CSoundtrackLink,
}

const CSpray = {
    Model: CModelLink,
    Texture: CTextureLink,
    Button: CButtonLink,
}

const CSprayPack = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    Description: CStringLink,
    Image: STextureSheetEntry,
    ProductId: TBattleProductId,
    ReleaseDate: SProductReleaseDate,
    SprayArray: CArray(CRewardLink),
    StoreTypeName: CStringLink,
}

const CStimPack = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    ProductId: TBattleProductId,
    StoreTypeName: CStringLink,
    Duration: UInt32,
    ReleaseDate: SProductReleaseDate,
}

const CTacCooldown = {
    UnitLink: CUnitLink,
    TacAbilData: CArray(STacAbilData),
}

const CTactical = {
}

const CTacticalOrder = {
    Abil: CAbilLink,
    AbilCmdIndex: TAbilCmdIndex,
    Marker: SMarker,
    Retreat: Bit,
    TargetFind: CTargetFindLink,
    Validator: CValidatorLink,
}

const CTacticalSet = {
    Array: CArray(CTacticalLink),
}

const CTalent = {
    Face: CButtonLink,
    Abil: CAbilLink,
    RankArray: CArray(STalentRank),
    AbilityModificationArray: CArray(STalentAbilityModification),
    Active: Bit,
    Trait: Bit,
}

const CTalentProfile = {
    Name: CStringLink,
    Talents: CArray(CTalentLink),
    Flags: CtalentProfileFlagCountFlagArray,
}

const CTargetFind = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
}

const CTargetFindBestPoint = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
    DamageBase: Real,
    Effect: CEffectLink,
    MinCount: UInt32,
    MinScore: Real,
    BonusAttri: EUnitAttribute,
}

const CTargetFindWorkerRallyPoint = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
    CommandIndex: UInt32,
}

const CTargetFindRallyPoint = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
    CommandIndex: UInt32,
}

const CTargetFindEnumArea = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
    LaunchLocation: SEffectWhichLocation,
    ImpactLocation: SEffectWhichLocation,
    ExcludeArray: CArray(SEffectWhichUnit),
    IncludeArray: CArray(SEffectWhichUnit),
    SearchFilters: CTargetFilters,
    MinCountError: CCmdResult,
    MinCount: UInt32,
    MaxCount: SAccumulatedUInt32,
    RecycleCount: UInt32,
    SearchFlags: CArray(Bit),
    AreaArray: CArray(STargetFindEnumArea),
    Abil: CAbilLink,
    ExtendRadius: Real,
    TargetSorts: STargetSorts,
}

const CTargetFindEffect = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
    Effect: CEffectLink,
    ExtendRadius: Real,
    TargetSorts: STargetSorts,
}

const CTargetFindLastAttacker = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
}

const CTargetFindOffset = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
    Angle: CFangle,
    Distance: CfRange,
}

const CTargetFindOrder = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
    Abil: CAbilLink,
    AbilCmdIndex: TAbilCmdIndex,
}

const CTargetFindSet = {
    Flags: CtargetFindFlagCountFlagArray,
    TargetFilters: CTargetFilters,
    CasterValidator: CValidatorLink,
    TargetValidator: CValidatorLink,
    Type: ETargetFindSet,
    Array: CArray(CTargetFindLink),
}

const CTargetSort = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
}

const CTargetSortAlliance = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Alliance: EAllianceId,
    WithPlayer: SEffectWhichPlayer,
}

const CTargetSortAngle = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    LaunchLocation: SEffectWhichLocation,
    ImpactLocation: SEffectWhichLocation,
}

const CTargetSortBehaviorCount = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Behavior: CBehaviorLink,
    Value: UInt32,
}

const CTargetSortBehaviorDuration = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Behavior: CBehaviorLink,
    Value: Real,
}

const CTargetSortChargeCount = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Ability: CAbilLink,
    Charge: TChargeLink,
    Value: Real,
}

const CTargetSortChargeRegen = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Ability: CAbilLink,
    Charge: TChargeLink,
    Value: Real,
}

const CTargetSortCooldown = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Ability: CAbilLink,
    Cooldown: TCooldownLink,
    Value: Real,
}

const CTargetSortDistance = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    WhichLocation: SEffectWhichLocation,
}

const CTargetSortField = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Field: TCatalogFieldPath,
    Value: CIdentifier,
}

const CTargetSortInterruptible = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Value: Bit,
}

const CTargetSortMarker = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Value: UInt32,
}

const CTargetSortPowerSourceLevel = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Behavior: CBehaviorLink,
    Value: UInt32,
}

const CTargetSortPowerUserLevel = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Behavior: CBehaviorLink,
    Value: UInt32,
}

const CTargetSortPriority = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Value: TAttackTargetPriority,
}

const CTargetSortRandom = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
}

const CTargetSortValidator = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Validator: CValidatorLink,
}

const CTargetSortVeterancy = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Behavior: CBehaviorLink,
    Value: UInt32,
}

const CTargetSortVital = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Value: Real,
    Vital: EUnitVital,
}

const CTargetSortVitalFraction = {
    WhichUnit: SEffectWhichUnit,
    Descending: Bit,
    Value: Real,
    Vital: EUnitVital,
}


const CTerrain = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    EditorHidden: Bit,
    Lighting: CLightLink,
    LoadingScreen: CImagePath,
    TextureProp: CTextureProps,
    Camera: CCameraLink,
    Ambience: CSoundtrackLink,
    DSPArray: CArray(SDSPArray),
    DSPArrayMasterOutput: CArray(CDSPLink),
    ReverbGlobal: CReverbLink,
    ReverbAmbient: CReverbLink,
    SoundDistanceFactor: real32,
    SoundDopplerFactor: real32,
    SoundRolloffFactor: real32,
    TilingFreq: real32,
    POMScale: real32,
    HideLowestLevel: Bit,
    MinimapBackgroundColor: CColor,
    MinimapBrightenFactor: real32,
    BlendTextures: CArray(CTerrainTexLink),
    HardTiles: CArray(CTileLink),
    CliffSets: CArray(CCliffLink),
    FixedSkyboxActor: CActorCreateKey,
    FixedSkyboxModel: CModelLink,
    NonFixedSkyboxActor: CActorCreateKey,
    NonFixedSkyboxModel: CModelLink,
    EnvironmentMap: CImagePath,
    FOWColor: CColor,
    FOWPlaneEnabled: Bit,
    FogEnabled: Bit,
    FogColor: CColor,
    FogDensity: real32,
    FogFalloff: real32,
    FogStartingHeight: real32,
    FogNearPlane: real32,
    FogFarPlane: real32,
    FogDistanceFalloff: real32,
    Gravity: real32,
    PhysicsTimeScale: real32,
    WindAngleHorizontal: real32,
    WindAngleVertical: real32,
    WindSpeed: real32,
    WindTurbulencePower: real32,
    WindTurbulenceSpeed: real32,
    CreepBaseTexture: CImagePath,
    CreepBaseSpecularMap: CImagePath,
    CreepEdgeNormalMap: CImagePath,
    CreepHeightMap: CImagePath,
    CreepNoiseMap: CImagePath,
    CreepSettingsArray: CArray(SCreepSettings),
    FoliageSettingsArray: CArray(SFoliageSimulationConfig),
    HeightFlags: CArray(Bit),
    HeightMapEnabled: Bit,
    MinimumVisionCliffLevel: UInt8,
    RampNoBuild: Bit,
}

const CTerrainObject = {
    Model: CModelPath,
    EditorFlags: CeditorFlagCountFlagArray,
    EditorModel: CModelLink,
    EditorIcon: CImagePath,
    EditorCategories: TEditorCategories,
    EditorCursorOffset: Real,
    TexSets: CArray(CTerrainLink),
    Footprint: CFootprintLink,
    Radius: Real,
    OccludeHeight: Real,
    BoostedCliffLevel: TCliffLevel,
}

const CCliffDoodad = {
    Model: CModelPath,
    EditorFlags: CeditorFlagCountFlagArray,
    EditorModel: CModelLink,
    EditorIcon: CImagePath,
    EditorCategories: TEditorCategories,
    EditorCursorOffset: Real,
    TexSets: CArray(CTerrainLink),
    Footprint: CFootprintLink,
    Radius: Real,
    OccludeHeight: Real,
    BoostedCliffLevel: TCliffLevel,
    CliffSet: CCliffLink,
    NumCellsDown: UInt32,
    NumCellsAcross: UInt32,
    HeightCodes: CArray(CString),
}

const CTerrainTex = {
    Texture: CImagePath,
    Normalmap: CImagePath,
    Heightmap: CImagePath,
    HeightMapOffset: real32,
    HeightMapScale: real32,
    EditorIcon: CImagePath,
    AnimRate: C2fVector,
    DoodadEntry: CArray(STerrainDoodad),
    PhysicsMaterial: CPhysicsMaterialLink,
}

const CTexture = {
    Ð¡File: CTexturePath,
    Prefix: CIdentifier,
    Slot: CTextureSlot,
    PropsAdd: CTextureProps,
    PropsRemove: CTextureProps,
    PropsSet: CTextureProps,
    MovieSoundSettings: CSoundLink,
    MovieSoundSettings5dot1: CSoundLink,
    MovieSoundSettingsStereo: CSoundLink,
    Flags: CArray(Bit),
}

const CTextureSheet = {
    Image: CImagePath,
    Rows: UInt32,
    Columns: UInt32,
}

const CTile = {
    Material: CImagePath,
    EditorIcon: CImagePath,
    Flags: CArray(Bit),
    TesselationDistance: real32,
    TileWidthDistance: real32,
    TileHeightRepetitions: UInt32,
    CapLength: real32,
    DefaultSplineWidth: real32,
    DefaultWingWidth: real32,
}

const CTrophy = {
    DefinitionId: UInt32,
    TopCutsceneFilter: CString,
    BottomCutsceneFilter: CString,
    CutsceneFile: CCutscenePath,
    GameModel: CModelLink,
    Skin: CSkinLink,
}

const CTurret = {
    Idle: ETurretIdle,
    YawStart: CFangle,
    YawArc: CFangleArc,
    YawRate: CFangleRate,
    YawIdleRate: CFangleRate,
    Fidget: SFidget,
}

const CUnit = {
    Name: CStringLink,
    UserTag: CStringLink,
    RandomNameArray: CArray(CStringLink),
    Subtitle: CStringLink,
    Description: CStringLink,
    InfoTooltipPriority: UInt32,
    DeathTime: CGameTime,
    DeathRevealFilters: CTargetFilters,
    DeathRevealRadius: Real,
    DeathRevealDuration: CGameTime,
    DeathRevealType: EDeathReveal,
    ReviveDelay: CGameTime,
    ReviveType: CUnitLink,
    Facing: CFacing,
    EditorFacingAlignment: CFangle,
    Race: CRaceLink,
    Mob: EUnitMob,
    Gender: EUnitGender,
    FlagArray: CunitFlagCountFlagArray,
    UserFlagArray: CunitUserFlagCountFlagArray,
    ResourceState: EResourceState,
    ResourceType: EResourceType,
    ResourceDropOff: CResourceTypeCountFlagArray,
    FogVisibility: EFogVisibility,
    EditorFlags: CeditorFlagCountFlagArray,
    PlaneArray: CplaneCountFlagArray,
    PushPriority: Real,
    Collide: CArray(Bit),
    DefaultAcquireLevel: EAcquireLevel,
    Response: EUnitResponse,
    Attributes: CunitAttributeCountFlagArray,
    Level: UInt32,
    ArmorType: EArmorType,
    LifeStart: Real,
    LifeMax: Real,
    LifeArmor: Real,
    LifeArmorFormula: SUnitArmorFormula,
    LifeArmorDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    LifeRegenDelay: CGameTime,
    LifeRegenRate: CGameRate,
    LifeRegenRateCreep: CGameRate,
    LifeRegenRateNight: CGameRate,
    LifeArmorName: CStringLink,
    LifeArmorTip: CStringLink,
    LifeArmorLevel: UInt32,
    LifeDamageGain: CArray(Real),
    LifeDamageLeech: CArray(Real),
    EnergyStart: Real,
    EnergyMax: Real,
    EnergyArmor: Real,
    EnergyArmorFormula: SUnitArmorFormula,
    EnergyRegenDelay: CGameTime,
    EnergyRegenRate: CGameRate,
    EnergyRegenRateCreep: CGameRate,
    EnergyRegenRateNight: CGameRate,
    EnergyDamageGain: CArray(Real),
    EnergyDamageLeech: CArray(Real),
    EnergyDamageRatio: Real,
    ShieldsStart: Real,
    ShieldsMax: Real,
    ShieldArmor: Real,
    ShieldArmorFormula: SUnitArmorFormula,
    ShieldArmorDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    ShieldRegenDelay: CGameTime,
    ShieldRegenRate: CGameRate,
    ShieldRegenRateCreep: CGameRate,
    ShieldRegenRateNight: CGameRate,
    ShieldArmorName: CStringLink,
    ShieldArmorTip: CStringLink,
    ShieldArmorLevel: UInt32,
    ShieldDamageGain: CArray(Real),
    ShieldDamageLeech: CArray(Real),
    ShieldDamageRatio: Real,
    ResourceDamageLeech: CArray(SUnitResourceRatio,EDamageKind),
    ResourceDamageLeechFilters: CTargetFilters,
    VitalBonusDensity: CArray(Real,EUnitVital),
    VitalMultiplierDensity: CArray(Real,EUnitVital),
    Mover: CMoverLink,
    Speed: CGameSpeed,
    SpeedDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    SpeedBonusCreep: CGameSpeed,
    SpeedMultiplierCreep: Real,
    SpeedMaximum: CGameSpeed,
    SpeedMinimum: CGameSpeed,
    AttackSpeedMultiplierCreep: Real,
    Acceleration: CGameAcceleration,
    Deceleration: CGameAcceleration,
    LateralAcceleration: CGameAcceleration,
    StationaryTurningRate: CFangleRate,
    TurningRate: CFangleRate,
    Sight: Real,
    SightBonus: CArray(Real),
    Height: Real,
    VisionHeight: Real,
    OccludeHeight: Real,
    BoostedCliffLevel: TCliffLevel,
    BoostedHeight: CArray(Real),
    Food: Real,
    CostCategory: ECostCategory,
    CostResource: CArray(Int32,EResourceType),
    StockCharge: SStockCharge,
    PawnItemReduction: Real,
    BuildTime: CGameTime,
    RepairTime: CGameTime,
    ReviveTime: CGameTime,
    AttackTargetPriority: TAttackTargetPriority,
    AIOverideTargetPriority: TAttackTargetPriority,
    DamageDealtXP: UInt32,
    DamageTakenXP: UInt32,
    KillXP: UInt32,
    KillResource: CArray(Int32,EResourceType),
    AbilArray: CArray(SUnitAbilData),
    BehaviorArray: CArray(SUnitBehaviorData),
    TurretArray: CArray(CTurretLink),
    WeaponArray: CArray(SUnitWeaponData),
    EffectArray: CArray(CEffectLink),
    CardLayouts: CArray(SCardLayout),
    Radius: TUnitRadius,
    DeadRadius: TUnitRadius,
    SeparationRadius: Real,
    FormationRank: UInt8,
    InnerRadius: TUnitRadius,
    InnerRadiusSafetyMultiplier: Real,
    DeadInnerRadius: TUnitRadius,
    CargoOverlapFilters: CTargetFilters,
    CargoSize: TCargoSize,
    Footprint: CFootprintLink,
    DeadFootprint: CFootprintLink,
    PlacementFootprint: CFootprintLink,
    AddedOnArray: CArray(SAddedOnData),
    AddOnOffsetX: Real,
    AddOnOffsetY: Real,
    BuiltOn: CArray(CUnitLink),
    BuildOnAs: CArray(CUnitLink),
    ScoreMake: Int32,
    ScoreMakeCostFactor: CArray(Real),
    ScoreKill: Int32,
    ScoreKillCostFactor: CArray(Real),
    ScoreLost: Int32,
    ScoreLostCostFactor: CArray(Real),
    ScoreResult: CScoreResultLink,
    SubgroupPriority: UInt8,
    SubgroupPriorityDelta: Int16,
    MinimapRadius: Real,
    EditorCategories: TEditorCategories,
    TacticalAI: CTacticalLink,
    TacticalAIRange: TGalaxyFunction,
    TacticalAIThink: TGalaxyFunction,
    TacticalAIChannel: TGalaxyFunction,
    TacticalAIFilters: CTargetFilters,
    AIKiteRange: Real,
    AIEvalFactor: Real,
    AIEvalConstant: Real,
    Item: CItemLink,
    Mass: Real,
    PowerupCost: SCost,
    PowerupEffect: CEffectLink,
    PowerupFilters: CTargetFilters,
    PowerupRange: Real,
    LeaderAlias: CUnitLink,
    HotkeyAlias: CUnitLink,
    SelectAlias: CUnitLink,
    SubgroupAlias: CUnitLink,
    TechAliasArray: CArray(TTechAlias),
    EquipmentArray: CArray(SUnitEquipment),
    SyncModelData: CSyncModelDataPath,
    AINotifyEffect: CEffectLink,
    GlossaryCategory: CStringLink,
    GlossaryPriority: Int32,
    GlossaryStrongArray: CArray(CUnitLink),
    GlossaryWeakArray: CArray(CUnitLink),
    GlossaryAlias: CUnitLink,
    HotkeyCategory: CStringLink,
    KillDisplay: EKillDisplay,
    RankDisplay: ERankDisplay,
    AIEvaluateAlias: CUnitLink,
    TechTreeProducedUnitArray: CArray(CUnitLink),
    TechTreeUnlockedUnitArray: CArray(CUnitLink),
    Fidget: SFidget,
    LootArray: CArray(CLootLink),
    TauntDuration: CArray(CGameTime),
    TauntDoesntStopUnit: CArray(Bit),
    IdleCommand: CAbilCommand,
    ReviveInfoBase: SUnitReviveInfo,
    ReviveInfoLevel: SUnitReviveInfo,
    OverlapIndex: UInt8,
    AlliedPushPriority: Int8,
    AcquireMovementLimit: Real,
    AcquireLeashRadius: Real,
    AcquireLeashResetRadius: Real,
    OrderDisplayMinimum: UInt32,
    EffectHistoryLimit: CArray(UInt16),
    TargetingHitTestPriority: UInt8,
    DataCollection: CDataCollectionLink,
}

const CUnitHero = {
    Name: CStringLink,
    UserTag: CStringLink,
    RandomNameArray: CArray(CStringLink),
    Subtitle: CStringLink,
    Description: CStringLink,
    InfoTooltipPriority: UInt32,
    DeathTime: CGameTime,
    DeathRevealFilters: CTargetFilters,
    DeathRevealRadius: Real,
    DeathRevealDuration: CGameTime,
    DeathRevealType: EDeathReveal,
    ReviveDelay: CGameTime,
    ReviveType: CUnitLink,
    Facing: CFacing,
    EditorFacingAlignment: CFangle,
    Race: CRaceLink,
    Mob: EUnitMob,
    Gender: EUnitGender,
    FlagArray: CunitFlagCountFlagArray,
    UserFlagArray: CunitUserFlagCountFlagArray,
    ResourceState: EResourceState,
    ResourceType: EResourceType,
    ResourceDropOff: CResourceTypeCountFlagArray,
    FogVisibility: EFogVisibility,
    EditorFlags: CeditorFlagCountFlagArray,
    PlaneArray: CplaneCountFlagArray,
    PushPriority: Real,
    Collide: CArray(Bit),
    DefaultAcquireLevel: EAcquireLevel,
    Response: EUnitResponse,
    Attributes: CunitAttributeCountFlagArray,
    Level: UInt32,
    ArmorType: EArmorType,
    LifeStart: Real,
    LifeMax: Real,
    LifeArmor: Real,
    LifeArmorFormula: SUnitArmorFormula,
    LifeArmorDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    LifeRegenDelay: CGameTime,
    LifeRegenRate: CGameRate,
    LifeRegenRateCreep: CGameRate,
    LifeRegenRateNight: CGameRate,
    LifeArmorName: CStringLink,
    LifeArmorTip: CStringLink,
    LifeArmorLevel: UInt32,
    LifeDamageGain: CArray(Real),
    LifeDamageLeech: CArray(Real),
    EnergyStart: Real,
    EnergyMax: Real,
    EnergyArmor: Real,
    EnergyArmorFormula: SUnitArmorFormula,
    EnergyRegenDelay: CGameTime,
    EnergyRegenRate: CGameRate,
    EnergyRegenRateCreep: CGameRate,
    EnergyRegenRateNight: CGameRate,
    EnergyDamageGain: CArray(Real),
    EnergyDamageLeech: CArray(Real),
    EnergyDamageRatio: Real,
    ShieldsStart: Real,
    ShieldsMax: Real,
    ShieldArmor: Real,
    ShieldArmorFormula: SUnitArmorFormula,
    ShieldArmorDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    ShieldRegenDelay: CGameTime,
    ShieldRegenRate: CGameRate,
    ShieldRegenRateCreep: CGameRate,
    ShieldRegenRateNight: CGameRate,
    ShieldArmorName: CStringLink,
    ShieldArmorTip: CStringLink,
    ShieldArmorLevel: UInt32,
    ShieldDamageGain: CArray(Real),
    ShieldDamageLeech: CArray(Real),
    ShieldDamageRatio: Real,
    ResourceDamageLeech: CArray(SUnitResourceRatio,EDamageKind),
    ResourceDamageLeechFilters: CTargetFilters,
    VitalBonusDensity: CArray(Real,EUnitVital),
    VitalMultiplierDensity: CArray(Real,EUnitVital),
    Mover: CMoverLink,
    Speed: CGameSpeed,
    SpeedDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    SpeedBonusCreep: CGameSpeed,
    SpeedMultiplierCreep: Real,
    SpeedMaximum: CGameSpeed,
    SpeedMinimum: CGameSpeed,
    AttackSpeedMultiplierCreep: Real,
    Acceleration: CGameAcceleration,
    Deceleration: CGameAcceleration,
    LateralAcceleration: CGameAcceleration,
    StationaryTurningRate: CFangleRate,
    TurningRate: CFangleRate,
    Sight: Real,
    SightBonus: CArray(Real),
    Height: Real,
    VisionHeight: Real,
    OccludeHeight: Real,
    BoostedCliffLevel: TCliffLevel,
    BoostedHeight: CArray(Real),
    Food: Real,
    CostCategory: ECostCategory,
    CostResource: CArray(Int32,EResourceType),
    StockCharge: SStockCharge,
    PawnItemReduction: Real,
    BuildTime: CGameTime,
    RepairTime: CGameTime,
    ReviveTime: CGameTime,
    AttackTargetPriority: TAttackTargetPriority,
    AIOverideTargetPriority: TAttackTargetPriority,
    DamageDealtXP: UInt32,
    DamageTakenXP: UInt32,
    KillXP: UInt32,
    KillResource: CArray(Int32,EResourceType),
    AbilArray: CArray(SUnitAbilData),
    BehaviorArray: CArray(SUnitBehaviorData),
    TurretArray: CArray(CTurretLink),
    WeaponArray: CArray(SUnitWeaponData),
    EffectArray: CArray(CEffectLink),
    CardLayouts: CArray(SCardLayout),
    Radius: TUnitRadius,
    DeadRadius: TUnitRadius,
    SeparationRadius: Real,
    FormationRank: UInt8,
    InnerRadius: TUnitRadius,
    InnerRadiusSafetyMultiplier: Real,
    DeadInnerRadius: TUnitRadius,
    CargoOverlapFilters: CTargetFilters,
    CargoSize: TCargoSize,
    Footprint: CFootprintLink,
    DeadFootprint: CFootprintLink,
    PlacementFootprint: CFootprintLink,
    AddedOnArray: CArray(SAddedOnData),
    AddOnOffsetX: Real,
    AddOnOffsetY: Real,
    BuiltOn: CArray(CUnitLink),
    BuildOnAs: CArray(CUnitLink),
    ScoreMake: Int32,
    ScoreMakeCostFactor: CArray(Real),
    ScoreKill: Int32,
    ScoreKillCostFactor: CArray(Real),
    ScoreLost: Int32,
    ScoreLostCostFactor: CArray(Real),
    ScoreResult: CScoreResultLink,
    SubgroupPriority: UInt8,
    SubgroupPriorityDelta: Int16,
    MinimapRadius: Real,
    EditorCategories: TEditorCategories,
    TacticalAI: CTacticalLink,
    TacticalAIRange: TGalaxyFunction,
    TacticalAIThink: TGalaxyFunction,
    TacticalAIChannel: TGalaxyFunction,
    TacticalAIFilters: CTargetFilters,
    AIKiteRange: Real,
    AIEvalFactor: Real,
    AIEvalConstant: Real,
    Item: CItemLink,
    Mass: Real,
    PowerupCost: SCost,
    PowerupEffect: CEffectLink,
    PowerupFilters: CTargetFilters,
    PowerupRange: Real,
    LeaderAlias: CUnitLink,
    HotkeyAlias: CUnitLink,
    SelectAlias: CUnitLink,
    SubgroupAlias: CUnitLink,
    TechAliasArray: CArray(TTechAlias),
    EquipmentArray: CArray(SUnitEquipment),
    SyncModelData: CSyncModelDataPath,
    AINotifyEffect: CEffectLink,
    GlossaryCategory: CStringLink,
    GlossaryPriority: Int32,
    GlossaryStrongArray: CArray(CUnitLink),
    GlossaryWeakArray: CArray(CUnitLink),
    GlossaryAlias: CUnitLink,
    HotkeyCategory: CStringLink,
    KillDisplay: EKillDisplay,
    RankDisplay: ERankDisplay,
    AIEvaluateAlias: CUnitLink,
    TechTreeProducedUnitArray: CArray(CUnitLink),
    TechTreeUnlockedUnitArray: CArray(CUnitLink),
    Fidget: SFidget,
    LootArray: CArray(CLootLink),
    TauntDuration: CArray(CGameTime),
    TauntDoesntStopUnit: CArray(Bit),
    IdleCommand: CAbilCommand,
    ReviveInfoBase: SUnitReviveInfo,
    ReviveInfoLevel: SUnitReviveInfo,
    OverlapIndex: UInt8,
    AlliedPushPriority: Int8,
    AcquireMovementLimit: Real,
    AcquireLeashRadius: Real,
    AcquireLeashResetRadius: Real,
    OrderDisplayMinimum: UInt32,
    EffectHistoryLimit: CArray(UInt16),
    TargetingHitTestPriority: UInt8,
    DataCollection: CDataCollectionLink,
    AttributePointsInfoArray: CArray(SAttributePointsInfo),
    LearnInfoArray: CArray(SAbilLearnInfo),
    MainAttribute: CBehaviorLink,
    MainAttributeDamageBonus: CArray(Real),
    TierRequirements: CArray(CTechRequirementsGraph),
}

const CUpgrade = {
    Flags: CArray(Bit),
    Name: CStringLink,
    InfoTooltipPriority: UInt32,
    WebPriority: UInt32,
    Icon: CImagePath,
    Alert: CAlertLink,
    Race: CRaceLink,
    ScoreAmount: UInt32,
    ScoreCount: EScoreValue,
    ScoreValue: EScoreValue,
    ScoreResult: CScoreResultLink,
    EffectArray: CArray(SUpgradeEffect),
    EffectArrayTemplate: CArray(SUpgradeEffectTemplate),
    UnitAllowed: CArray(CUnitLink),
    UnitDisallowed: CArray(CUnitLink),
    EditorCategories: TEditorCategories,
    TechAliasArray: CArray(TTechAlias),
    AffectedUnitArray: CArray(CUnitLink),
    MaxLevel: UInt8,
    LeaderAlias: CUpgradeLink,
    LeaderPriority: UInt32,
    LeaderLevel: UInt32,
    DataCollection: CDataCollectionLink,
    EnumRequiredUserFlags: CunitUserFlagCountFlagArray,
    EnumExcludedUserFlags: CunitUserFlagCountFlagArray,
    LevelButton: CArray(CButtonLink),
    LevelRequirements: CArray(CTechRequirementsGraph),
    BonusResourcePerLevel: CArray(Int32,EResourceType),
    BonusTimePerLevel: CGameTime,
}

const SUserInstanceField = {
    Id: TUserFieldId,
    Index: UInt32,
}
const SUserInstanceAbilCmd = {
    Field: SUserInstanceField,
    Abil: CAbilLink,
    Cmd: TAbilCmdIndex,
}
const SUserInstanceActor = {
    Field: SUserInstanceField,
    Actor: CActorLink,
}
const SUserInstanceColor = {
    Field: SUserInstanceField,
    Color: CColor,
}
const SUserInstanceCompare = {
    Field: SUserInstanceField,
    Compare: EValueCompare,
}
const SUserInstanceFixed = {
    Field: SUserInstanceField,
    Fixed: Real,
}
const SUserInstanceGameLink = {
    Field: SUserInstanceField,
    GameLink: CString,
}
const SUserInstanceImage = {
    Field: SUserInstanceField,
    Image: CImagePath,
    Edge: ETextTagEdge,
    Attach: EAttachmentID,
}
const SUserInstanceInt = {
    Field: SUserInstanceField,
    Int: Int32,
}
const SUserInstanceModel = {
    Field: SUserInstanceField,
    Model: CModelLink,
}
const SUserInstanceMovie = {
    Field: SUserInstanceField,
    Movie: CMoviePath,
}
const SUserInstanceSound = {
    Field: SUserInstanceField,
    Sound: CSoundLink,
}
const SUserInstanceString = {
    Field: SUserInstanceField,
    String: CString,
}
const SUserInstanceText = {
    Field: SUserInstanceField,
    Text: CStringLink,
}
const SUserInstanceUnit = {
    Field: SUserInstanceField,
    Unit: CUnitLink,
}
const SUserInstanceUpgrade = {
    Field: SUserInstanceField,
    Upgrade: CUpgradeLink,
}
const SUserInstanceUser = {
    Field: SUserInstanceField,
    Type: CUserLink,
    Instance: TUserInstanceId,
}
const SUserField = {
    Id: TUserFieldId,
    Type: EUserType,
    GameLinkType: EGameCatalog,
    UserType: CUserLink,
    Count: UInt32,
    Flags: CuserFieldFlagCountFlagArray,
    EditorColumn: UInt32,
    EditorText: EEditorTextType,
}
const SUserInstance = {
    Id: TUserInstanceId,
    AbilCmd: CArray(SUserInstanceAbilCmd),
    Actor: CArray(SUserInstanceActor),
    Color: CArray(SUserInstanceColor),
    Compare: CArray(SUserInstanceCompare),
    Fixed: CArray(SUserInstanceFixed),
    GameLink: CArray(SUserInstanceGameLink),
    Image: CArray(SUserInstanceImage),
    Int: CArray(SUserInstanceInt),
    Model: CArray(SUserInstanceModel),
    Movie: CArray(SUserInstanceMovie),
    Sound: CArray(SUserInstanceSound),
    String: CArray(SUserInstanceString),
    Text: CArray(SUserInstanceText),
    Unit: CArray(SUserInstanceUnit),
    Upgrade: CArray(SUserInstanceUpgrade),
    User: CArray(SUserInstanceUser),
}
const CUser = {
    Fields: CArray(SUserField),
    Instances: CArray(SUserInstance),
}



const CValidator = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
}

const CValidatorCombine = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    Type: EValidateCombine,
    CombineArray: CArray(CValidatorLink),
    Negate: Bit,
}

const CValidatorCondition = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    IfArray: CArray(SValidatorCondition),
    Else: CValidatorLink,
}

const CValidatorFunction = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    Line: CArray(SValidatorFunction),
    ResultFallback: CCmdResult,
}

const CValidatorEffect = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichEffect: CEffectLink,
    ResultNoEffect: CCmdResult,
}

const CValidatorEffectCompare = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichEffect: CEffectLink,
    ResultNoEffect: CCmdResult,
    OtherEffect: CEffectLink,
    Compare: EValueCompare,
}

const CValidatorEffectCompareDodged = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichEffect: CEffectLink,
    ResultNoEffect: CCmdResult,
    OtherEffect: CEffectLink,
    Compare: EValueCompare,
    Value: UInt32,
}

const CValidatorEffectCompareEvaded = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichEffect: CEffectLink,
    ResultNoEffect: CCmdResult,
    OtherEffect: CEffectLink,
    Compare: EValueCompare,
    Value: UInt32,
}

const CValidatorEffectTreeUserData = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    CheckExistence: Bit,
    ResultNoKey: CCmdResult,
    Compare: EValueCompare,
    Key: CIdentifier,
    Value: SAccumulatedFixed,
    BehaviorScope: SEffectWhichBehavior,
}

const CValidatorGameCompareTimeEvent = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    Compare: EValueCompare,
    TimeEvent: EGameTimeEvent,
}

const CValidatorGameCompareTimeOfDay = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    Compare: EValueCompare,
    Value: CTimeOfDay,
}

const CValidatorGameCompareTerrain = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    Compare: EValueCompare,
    Value: CTerrainLink,
}

const CValidatorGameCommanderActive = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    Commander: CCommanderLink,
}

const CValidatorLocation = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
}

const CValidatorLocationCompareCliffLevel = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    OtherLocation: SEffectWhichLocation,
    Compare: EValueCompare,
    Value: TCliffLevel,
}

const CValidatorLocationComparePower = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    FromUnit: SEffectWhichUnit,
    WhichPlayer: SEffectWhichPlayer,
    PowerLink: TPowerLink,
    PowerSource: CArray(CBehaviorLink),
    Compare: EValueCompare,
    Value: TPowerLevel,
}

const CValidatorLocationCompareRange = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    Compare: EValueCompare,
    Range: Real,
    Pathing: Bit,
    Value: SEffectWhichLocation,
}

const CValidatorLocationArc = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    OtherLocation: SEffectWhichLocation,
    Find: Bit,
    Arc: CFangleArc,
    Value: SEffectWhichLocation,
}

const CValidatorLocationCreep = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    WhichPlayer: SEffectWhichPlayer,
    Find: Bit,
    RadiusBonus: Real,
}

const CValidatorLocationCrossChasm = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    OtherLocation: SEffectWhichLocation,
    Find: Bit,
}

const CValidatorLocationCrossCliff = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    OtherLocation: SEffectWhichLocation,
    Find: Bit,
    CrossRamp: Bit,
}

const CValidatorLocationEnumArea = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    AreaArray: CArray(SValidatorEnumArea),
    Compare: EValueCompare,
    Count: UInt32,
    SearchFlags: CArray(Bit),
    LaunchLocation: SEffectWhichLocation,
    SearchFilters: CTargetFilters,
    ExcludeArray: CArray(SEffectWhichUnit),
    IncludeArray: CArray(SEffectWhichUnit),
    CachedSearch: CIdentifier,
    CombinedVital: EUnitVital,
    CombinedVitalCompare: EValueCompare,
    CombinedVitalUnit: SEffectWhichUnit,
    CombinedVitalValue: UInt32,
}

const CValidatorLocationPathable = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    Find: Bit,
    Types: CpathingTypeCountFlagArray,
}

const CValidatorLocationInPlayableMapArea = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    Find: Bit,
}

const CValidatorLocationPlacement = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    FromUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    Range: Real,
    Unit: CUnitLink,
}

const CValidatorLocationShrub = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    WhichPlayer: SEffectWhichPlayer,
    Find: Bit,
}

const CValidatorLocationType = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    None: CValidatorLink,
    Point: CValidatorLink,
    Unit: CValidatorLink,
}

const CValidatorLocationVision = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    WhichPlayer: SEffectWhichPlayer,
    Find: Bit,
}

const CValidatorPlayer = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
}

const CValidatorPlayerAlliance = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Find: Bit,
    WithPlayer: SEffectWhichPlayer,
    Value: EAllianceId,
}

const CValidatorPlayerRequirement = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Find: Bit,
    UnitSelectionNotRequired: Bit,
    Value: CTechRequirementsGraph,
    WhichUnit: SEffectWhichUnit,
}

const CValidatorPlayerTalent = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Find: Bit,
    Value: CTalentLink,
}

const CValidatorPlayerFood = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    AllowCheat: Bit,
    Value: Real,
    TestUnitType: CUnitLink,
    TypeFallbackUnit: SEffectWhichUnit,
    Count: UInt32,
    ResultFoodMax: CCmdResult,
}

const CValidatorPlayerCompare = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
}

const CValidatorPlayerCompareDifficulty = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
    Value: TDifficultyLevel,
}

const CValidatorPlayerCompareFoodAvailable = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
    Value: Real,
}

const CValidatorPlayerCompareFoodMade = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
    Value: Real,
}

const CValidatorPlayerCompareFoodUsed = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
    Value: Real,
}

const CValidatorPlayerCompareRace = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
    Value: CRaceLink,
}

const CValidatorPlayerCompareResource = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
    Resource: EResourceType,
    Value: UInt32,
}

const CValidatorPlayerCompareResult = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
    Value: EGameResult,
}

const CValidatorPlayerCompareType = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    OtherPlayer: SEffectWhichPlayer,
    ResultNoPlayer: CCmdResult,
    Compare: EValueCompare,
    Value: EPlayerType,
}

const CValidatorUnit = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
}

const CValidatorUnitInWeaponRange = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
}

const CValidatorUnitAI = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
    Flag: EUnitAIFlag,
}

const CValidatorUnitCombatAI = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
}

const CValidatorUnitAlliance = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
    WithPlayer: SEffectWhichPlayer,
    Value: EAllianceId,
    AlliancePlayer: EAlliancePlayer,
}

const CValidatorUnitAbil = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
    AbilClass: EClassIdCAbil,
    AbilLink: CAbilLink,
}

const CValidatorUnitBehaviorStackAlias = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
    IgnoreDisabledBehavior: Bit,
    StackAlias: CIdentifier,
}

const CValidatorUnitBehaviorState = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Enabled: Bit,
    BehaviorState: EBehaviorState,
}

const CValidatorUnitState = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Enabled: Bit,
    State: EUnitTestState,
}

const CValidatorUnitDetected = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    WhichPlayer: SEffectWhichPlayer,
    Detected: Bit,
    Flags: CArray(Bit),
}

const CValidatorUnitArmor = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
    ArmorType: EArmorType,
}

const CValidatorUnitFilters = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Filters: CTargetFilters,
}

const CValidatorUnitFlying = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
}

const CValidatorUnitInventory = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    ResultNoInventory: CCmdResult,
    RequireEnabled: Bit,
}

const CValidatorUnitInventoryIsFull = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    ResultNoInventory: CCmdResult,
    RequireEnabled: Bit,
    Find: Bit,
}

const CValidatorUnitInventoryContainsItem = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    ResultNoInventory: CCmdResult,
    RequireEnabled: Bit,
    Find: Bit,
    Item: CUnitLink,
}

const CValidatorUnitLastDamagePlayer = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Relationship: EPlayerRelationship,
}

const CValidatorUnitKinetic = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Value: CKineticLink,
    Find: Bit,
}

const CValidatorUnitMissileNullified = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
}

const CValidatorUnitMover = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Value: CMoverLink,
    Find: Bit,
}

const CValidatorUnitOrder = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    AbilLink: CAbilLink,
    AbilCmdIndex: TAbilCmdIndex,
    CmdFlags: CCmdFlags,
    Target: SEffectWhichLocation,
    CheckStateOnly: Bit,
}

const CValidatorUnitOrderQueue = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    AbilLink: CAbilLink,
    AbilClass: EClassIdCAbil,
    AbilTechAlias: TTechAlias,
    AbilCmdIndex: TAbilCmdIndex,
    Find: Bit,
    Queued: Bit,
    Target: SEffectWhichLocation,
    Item: CItemLink,
}

const CValidatorUnitOrderTargetPathable = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    AbilLink: CAbilLink,
    AbilCmdIndex: TAbilCmdIndex,
    Find: Bit,
    MaxDistance: Real,
}

const CValidatorUnitOrderTargetType = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    AbilLink: CAbilLink,
    AbilCmdIndex: TAbilCmdIndex,
    Find: Bit,
    Type: EEffectLocationType,
}

const CValidatorUnitPathable = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    WhichLocation: SEffectWhichLocation,
    Find: Bit,
    Range: Real,
    MaxDistance: Real,
}

const CValidatorUnitPathing = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
}

const CValidatorUnitScanning = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
}

const CValidatorUnitType = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Value: CUnitLink,
    Find: Bit,
    Type: EUnitType,
}

const CValidatorUnitWeaponAnimating = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Weapon: CWeaponLink,
    Find: Bit,
}

const CValidatorUnitWeaponFiring = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Weapon: CWeaponLink,
    Find: Bit,
}

const CValidatorUnitWeaponPlane = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
    Plane: EPlane,
}

const CValidatorUnitTestWeaponType = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Find: Bit,
    WeaponType: EWeaponType,
    RequireActivated: Bit,
    RequireEnabled: Bit,
}

const CValidatorUnitCompare = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
}

const CValidatorUnitCompareAIAreaEvalRatio = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Radius: Real,
    Value: Real,
}

const CValidatorUnitCompareAbilLevel = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    AbilLink: CAbilLink,
    Value: UInt32,
}

const CValidatorUnitCompareAbilSkillPoint = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    AbilLink: CAbilLink,
    CountType: ESkillPoint,
    Value: Int32,
}

const CValidatorUnitCompareAbilStage = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    AbilityStage: EAbilEffectStage,
    Ability: CAbilLink,
}

const CValidatorUnitCompareAttackPriority = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Attacker: SEffectWhichUnit,
    AttackerAlternateType: CUnitLink,
    Flags: CArray(Bit),
    Value: TAttackTargetPriority,
}

const CValidatorUnitCompareBehaviorCount = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: SAccumulatedUInt32,
    Behavior: CBehaviorLink,
    Categories: CBehaviorCategoryFlags,
    BehaviorAlignment: EEffectRemoveBehaviorAlignment,
    Heroic: EBehaviorHeroicState,
    ExcludeOriginPlayer: SEffectWhichPlayer,
    ExcludeCasterUnit: SEffectWhichUnit,
    RequireOriginPlayer: SEffectWhichPlayer,
    RequireCasterUnit: SEffectWhichUnit,
}

const CValidatorUnitCompareCargo = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Type: ECargoSpace,
    Value: UInt8,
}

const CValidatorUnitCompareChargeUsed = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    ChargeLink: TChargeLink,
    Location: EChargeLocation,
    Ability: CAbilLink,
    Behavior: CBehaviorLink,
    Value: Real,
}

const CValidatorUnitCompareCooldown = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    CooldownLink: TCooldownLink,
    Location: ECooldownLocation,
    Ability: CAbilLink,
    Behavior: CBehaviorLink,
    Value: Real,
}

const CValidatorUnitCompareDamageDealtTime = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: CGameTime,
}

const CValidatorUnitCompareDamageTakenTime = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: CGameTime,
}

const CValidatorUnitCompareDeath = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: EDeathType,
}

const CValidatorUnitCompareDetectRange = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: Real,
    Radar: Bit,
}

const CValidatorUnitCompareField = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Field: TCatalogFieldPath,
    Value: CIdentifier,
}

const CValidatorUnitCompareKillCount = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt16,
}

const CValidatorUnitCompareMarkerCount = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
}

const CValidatorUnitCompareMoverPhase = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
}

const CValidatorUnitCompareOrderCount = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    AbilLink: CAbilLink,
    AbilCmdIndex: TAbilCmdIndex,
    Value: UInt32,
}

const CValidatorUnitCompareOrderTargetRange = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    AbilLink: CAbilLink,
    AbilCmdIndex: TAbilCmdIndex,
    Value: Real,
    Pathing: Bit,
}

const CValidatorUnitComparePowerSourceLevel = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
    Behavior: CBehaviorLink,
}

const CValidatorUnitComparePowerUserLevel = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
    Behavior: CBehaviorLink,
}

const CValidatorUnitCompareRallyPointCount = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
    AbilLink: CAbilLink,
    Point: UInt32,
}

const CValidatorUnitCompareResourceContents = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
    Behavior: CBehaviorLink,
}

const CValidatorUnitCompareResourceHarvesters = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
    Active: Bit,
    Queued: Bit,
    Behavior: CBehaviorLink,
}

const CValidatorUnitCompareSpeed = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: CGameSpeed,
}

const CValidatorUnitCompareVeterancyLevel = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
    Behavior: CBehaviorLink,
    ResultMaxLevel: CCmdResult,
}

const CValidatorUnitCompareVital = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Type: EVitalType,
    Value: Real,
    Vital: EUnitVital,
}

const CValidatorUnitCompareVitality = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    Type: EVitalType,
    Value: Real,
}

const CValidatorUnitCompareHeight = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    WhichUnit: SEffectWhichUnit,
    OtherUnit: SEffectWhichUnit,
    ResultNoUnit: CCmdResult,
    Compare: EValueCompare,
    CasterAdd: Real,
    TargetAdd: Real,
    CasterHeight: Bit,
    CasterGroundHeight: Bit,
    CasterZ: Bit,
    TargetHeight: Bit,
    TargetGroundHeight: Bit,
    TargetZ: Bit,
}

const CValidatorCompareTrackedUnitsCount = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    Compare: EValueCompare,
    Value: UInt32,
    BehaviorLink: CBehaviorLink,
    TrackerUnit: SEffectWhichUnit,
    TrackedUnitValidatorArray: CArray(CValidatorLink),
    TrackedUnitFilters: CTargetFilters,
}

const CValidatorIsUnitTracked = {
    IgnoreWhileChanneling: UInt8,
    ResultFailed: CCmdResult,
    Find: Bit,
    BehaviorLink: CBehaviorLink,
    TrackerUnit: SEffectWhichUnit,
    TrackedUnit: SEffectWhichUnit,
}

const CVoiceOver = {
    Character: CCharacterLink,
    Skins: CArray(SVoiceOverSkin),
    Groups: CArray(SVoiceOverGroup),
    Lines: CArray(SVoiceOverLine),
}

const CVoicePack = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    TypeName: CStringLink,
    Description: CStringLink,
    Icon: CImagePath,
    ProductId: TBattleProductId,
    UnlockedRewardArray: CArray(CRewardLink),
    ExampleLineArray: CArray(SVoicePackExampleLine),
    ReleaseDate: SProductReleaseDate,
    ParentBundle: CBundleLink,
    LocaleRestriction: CFourCC,
    IsPurchaseHidden: Bit,
    ImageTexture: CImagePath,
    StoreTypeName: CStringLink,
}

const CWarChest = {
    Default: Bit,
    Name: CStringLink,
    ShortName: CStringLink,
    StoreName: CStringLink,
    HyperlinkId: TProductHyperlinkId,
    ProductId: TBattleProductId,
    ReleaseDate: SProductReleaseDate,
    SeasonId: CStringLink,
    IsBundle: Bit,
    CelebrationString: CIdentifier,
    StoreTypeName: CStringLink,
}

const CWarChestSeason = {
    Name: CStringLink,
    ESportsSeason: CStringLink,
    ESportsName: CStringLink,
    ESportsLocation: CStringLink,
    ESportsDate: CStringLink,
    ESportsShowPlayers: Bit,
    HowItWorks1: CStringLink,
    HowItWorks2: CStringLink,
    HowItWorks3: CStringLink,
    HowItWorks4: CStringLink,
    LearnMoreTitle1: CStringLink,
    LearnMoreTitle2: CStringLink,
    LearnMoreTitle3: CStringLink,
    LearnMoreDescription1: CStringLink,
    LearnMoreDescription2: CStringLink,
    LearnMoreDescription3: CStringLink,
    LearnMoreImage1: CImagePath,
    LearnMoreImage2: CImagePath,
    LearnMoreImage3: CImagePath,
    PurchaseTitle: CStringLink,
    PurchaseDescription: CStringLink,
    PurchaseWarning: CStringLink,
    PurchaseImage: CImagePath,
}

const SWaterStateDesc = {
    Name: CString32,
    Height: real32,
    Color: C4Vector,
    ColorFallOff: real32,
    CausticsFallOff: real32,
    Specularity: real32,
    SpecularScaler: real32,
    UvRate: C4Vector,
    UvRotate: real32,
    MeshRoughness: real32,
    TextureRoughness: real32,
    ReflectionDistortion: real32,
    RefractionDistortion: real32,
    ShadowDistortion: real32,
    MinReflection: real32,
    ReflectivityPower: real32,
}
const SWaterDoodad = {
    Model: CModelLink,
    Density: real32,
    MinSize: real32,
    MaxSize: real32,
    Lifetime: UInt32,
}

const CWater = {
    TextureKey: CImagePath,
    TilingFreq: C4Vector,
    ScrollVectors: C4Vector,
    FramesPerSec: real32,
    State: CArray(SWaterStateDesc),
    CausticsFPS: real32,
    CausticsTilingFreq: C2Vector,
    ReceiveShadows: Bit,
    IsLava: Bit,
    Density: real32,
    Drag: real32,
    AngularDamping: real32,
    MaxLinearVelocity: real32,
    BeachShoreline: CModelLink,
    CliffShoreline: CModelLink,
    LavaModel: CModelLink,
    Doodads: CArray(SWaterDoodad),
    Sound: CSoundLink,
    ReflectionCubeMap: CTexturePath,
}


const CWeapon = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    Tip: CStringLink,
    Options: CArray(Bit),
    Icon: CImagePath,
    DisplayEffect: CEffectLink,
    DisplayAttackCount: UInt32,
    DisplayName: CStringLink,
    Level: UInt32,
    TargetFilters: CTargetFilters,
    ChaseFilters: CTargetFilters,
    SupportedFilters: CTargetFilters,
    AcquireFilters: CTargetFilters,
    AcquireCallForHelpFilters: CTargetFilters,
    AcquireProvokeFilters: CTargetFilters,
    AcquireScanFilters: CTargetFilters,
    AcquireTargetSorts: STargetSorts,
    AcquirePrioritization: EWeaponPrioritization,
    AcquireCliffLevelRange: CfRange,
    MinScanRange: Real,
    Range: Real,
    RangeSlop: Real,
    RangeDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    MinimumRange: Real,
    TeleportResetRange: Real,
    Arc: CFangleArc,
    ArcSlop: CFangleArc,
    Marker: SMarker,
    Cost: SCost,
    Period: CGameTime,
    PeriodDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    RateMultiplier: Real,
    AttackType: EAttackType,
    DamagePoint: CGameTime,
    PreswingBeforeAttack: CGameTime,
    PreswingBetweenAttacks: CGameTime,
    Backswing: CGameTime,
    Effect: CEffectLink,
    PreEffect: CEffectLink,
    CriticalEffect: CEffectLink,
    PreEffectBehavior: SEffectBehavior,
    PostEffectBehavior: SEffectBehavior,
    CriticalChance: Real,
    CursorRangeMode: ECursorRangeMode,
}

const CWeaponLegacy = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    Tip: CStringLink,
    Options: CArray(Bit),
    Icon: CImagePath,
    DisplayEffect: CEffectLink,
    DisplayAttackCount: UInt32,
    DisplayName: CStringLink,
    Level: UInt32,
    TargetFilters: CTargetFilters,
    ChaseFilters: CTargetFilters,
    SupportedFilters: CTargetFilters,
    AcquireFilters: CTargetFilters,
    AcquireCallForHelpFilters: CTargetFilters,
    AcquireProvokeFilters: CTargetFilters,
    AcquireScanFilters: CTargetFilters,
    AcquireTargetSorts: STargetSorts,
    AcquirePrioritization: EWeaponPrioritization,
    AcquireCliffLevelRange: CfRange,
    MinScanRange: Real,
    Range: Real,
    RangeSlop: Real,
    RangeDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    MinimumRange: Real,
    TeleportResetRange: Real,
    Arc: CFangleArc,
    ArcSlop: CFangleArc,
    Marker: SMarker,
    Cost: SCost,
    Period: CGameTime,
    PeriodDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    RateMultiplier: Real,
    AttackType: EAttackType,
    DamagePoint: CGameTime,
    PreswingBeforeAttack: CGameTime,
    PreswingBetweenAttacks: CGameTime,
    Backswing: CGameTime,
    Effect: CEffectLink,
    PreEffect: CEffectLink,
    PreEffectBehavior: SEffectBehavior,
    PostEffectBehavior: SEffectBehavior,
    CriticalChance: Real,
    CriticalEffect: CEffectLink,
    CursorRangeMode: ECursorRangeMode,
    LegacyOptions: CArray(Bit),
    AllowedMovement: EWeaponLegacyMovement,
    PathingAmmoUnit: CUnitLink,
    ReloadDuration: CGameTime,
    RandomDelayMin: CGameTime,
    RandomDelayMax: CGameTime,
    UninterruptibleDelay: CGameTime,
    UninterruptibleDuration: CGameTime,
}

const CWeaponStrafe = {
    Name: CStringLink,
    EditorCategories: TEditorCategories,
    InfoTooltipPriority: UInt32,
    Tip: CStringLink,
    Options: CArray(Bit),
    Icon: CImagePath,
    DisplayEffect: CEffectLink,
    DisplayAttackCount: UInt32,
    DisplayName: CStringLink,
    Level: UInt32,
    TargetFilters: CTargetFilters,
    ChaseFilters: CTargetFilters,
    SupportedFilters: CTargetFilters,
    AcquireFilters: CTargetFilters,
    AcquireCallForHelpFilters: CTargetFilters,
    AcquireProvokeFilters: CTargetFilters,
    AcquireScanFilters: CTargetFilters,
    AcquireTargetSorts: STargetSorts,
    AcquirePrioritization: EWeaponPrioritization,
    AcquireCliffLevelRange: CfRange,
    MinScanRange: Real,
    Range: Real,
    RangeSlop: Real,
    RangeDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    MinimumRange: Real,
    TeleportResetRange: Real,
    Arc: CFangleArc,
    ArcSlop: CFangleArc,
    Marker: SMarker,
    Cost: SCost,
    Period: CGameTime,
    PeriodDisplayFlags: CequipmentDisplayFlagCountFlagArray,
    RateMultiplier: Real,
    AttackType: EAttackType,
    DamagePoint: CGameTime,
    PreswingBeforeAttack: CGameTime,
    PreswingBetweenAttacks: CGameTime,
    Backswing: CGameTime,
    Effect: CEffectLink,
    PreEffect: CEffectLink,
    PreEffectBehavior: SEffectBehavior,
    PostEffectBehavior: SEffectBehavior,
    CriticalChance: Real,
    CriticalEffect: CEffectLink,
    CursorRangeMode: ECursorRangeMode,
    LoiterInnerRadius: Real,
    LoiterRadius: Real,
}




export const StructsClasses = {
    types: {
        Real,
        CAbilSetId,
        TEditorCategories,
        TGalaxyFunction,
        EAbilTechPlayer,
        EAbilAlignment,
        Flags,
        CAbilSharedFlagCountFlagArray,
        CAbilEffectFlagCountFlagArray,
        CabilEffectStageCountFlagArray,
        CUnitLink,
        CTargetFilters,
        CFangleArc,
        CValidatorLink,
        EAcquireLevel,
        CGameTime,
        CAlertLink,
        CEffectLink,
        CButtonLink,
        CCmdResult,
        CImagePath,
        CStringLink,
        CfRange,
        ECursorRangeMode,
        EAbilLastTarget,
        CAbilLink,
        TAbilCmdIndex,
        EAbilArmMagazineLaunch,
        CFangle,
        CAbilCommand,
        EEffectLocationType,
        CBehaviorLinkArray,
        EAbilBehaviorCycleMode,
        CAbilBuildFlagCountFlagArray,
        EAbilBuildType,
        CMoverLink,
        CAbilHarvestFlagCountFlagArray,
        CResourceTypeCountFlagArray,
        UInt32,
        CAbilHarvestStageCountFlagArray,
        CTechRequirementsGraph,
        CDataSoupKey,
        CClassIdCAbilCountFlagArray,
        CGamePoint,
        EAbilReviveVital,
        EDeathType,
        EAbilReviveCmd,
        TCargoSize,
        TCargoCapacity,
        CIdentifier,
        EAbilOrderDisplayType,
        CColor,
        CModelPath,
        real32,
        Int32,
        TCooldownLink,
        ECooldownLocation,
        ECooldownOperation,
        Bit,
        TChargeLink,
        EChargeLocation,
        CTargetSortLink,
        TMarkerCount,
        CMarkerFlags,
        TMarkerLink,
        CCursorLink,
        EAbilArmMagazineManage,
        CAbilCmdFlags,
        EAbilCmdState,
        TPreemptLevel,
        EAbilInventoryAlignment,
        CItemContainerLink,
        CItemClassLink,
        EAbilMorphPhase,
        EAbilMorphSection,
        CUpgradeLink,
        EAbilTrainLocation,
        EAbilTrainRotation,
        EAccumulatorApplicationRule,
        EUnitVital,
        EVitalsAccumulatorModificationType,
        EAccumulatorBehaviorType,
        ECargoSpace,
        EEffectAmount,
        CAccumulatorLink,
        EAccumulatorOperation,
        CScoreValueLink,
        CRewardLink,
        CRaceLink,
        CAchievementTermLink,
        CAchievementLink,
        EAchievementTermEvaluate,
        EValueCompare,
        EAchievementTermPrevious,
        UInt64,
        EAchievementTermCombine,
        CActorKey,
        CActorTerms,
        EActorRequestCreateSharing,
        EActorHostedPropInheritType,
        CActorTransferFlags,
        CActorHostedPropTransferFlags,
        EFogVisibility,
        EActorPlayerIdSource,
        CPreloadLink,
        EActorScopeBearingsTrackingType,
        CCameraLink,
        CModelLink,
        CScaleVector,
        EActorSplatHeight,
        C3Vector,
        CActorCreateKey,
        EActorProximity,
        CActorLabelKey,
        EActorModelMaterialType,
        CQuad,
        CRange,
        EActorForceField,
        CVariatorActorReal32,
        CWeaponLink,
        C2Vector,
        CcliffLevelCompareCountFlagArray,
        CRefKey,
        CSoundLink,
        EActorSoundPlayMode,
        ESplatLayer,
        EActorEffectScope,
        CActorAngle,
        EActorShieldFlashType,
        CAnimNameKey,
        EActorCombatRevealDurationType,
        CAnimProps,
        CBeamLink,
        CCutscenePath,
        CactorDoodadFlagCountFlagArray,
        CeditorFlagCountFlagArray,
        CTerrainLink,
        CFacing,
        CFootprintLink,
        TCliffLevel,
        EMinimapShape,
        EActorForceOrigin,
        CVariatorActorAngle,
        EActorForceDirection,
        CActorLink,
        CColorHDR,
        ESquibType,
        EActorSiteBillboardType,
        EActorSiteOrbiterType,
        CVariatorActorFangle,
        EActorSiteOpActionLocation,
        EActorSiteOpAttachSource,
        EActorSiteOpBasicType,
        EActorEffectLocation,
        EActorHeightSourceType,
        EActorIncomingType,
        EActorSiteOpOrientAttachPointToType,
        EActorRadialDistribution,
        EActorSiteOpPhysicsImpactType,
        EActorCrossbarDistribution,
        EActorSiteOpRotatorType,
        CFangleRate,
        EActorHeightTestType,
        EActorSiteOpTetherEnableType,
        EActorTiltType,
        EActorTextAlignment,
        CActorTableKeys1x3,
        CGameRate,
        CDescPath,
        C2iVector,
        EAttachmentID,
        CString,
        CHerdNodeLink,
        CunitStatusCountFlagArray,
        CunitStatusGroupCountFlagArray,
        CColorRGB,
        EUnitSound,
        EAlertPeripheral,
        EArmyCategoryState,
        CArmyUnitLink,
        CArmyUpgradeLink,
        CUserReference,
        CMoviePath,
        EArmyUnitState,
        CSkinLink,
        EArmyUpgradeState,
        EHeroUniverse,
        CAssetPath,
        CTalentLink,
        EArtifactType,
        THyperlinkId,
        CItemLink,
        CPlayerResponseLink,
        CplayerRelationshipCountFlagArray,
        TBattleProductId,
        CartifactTypeCountFlagArray,
        EAMArcTestType,
        CAttachKeys,
        EAMFilterLogic,
        EAMFilterAttachType,
        EAMFilterType,
        EAMAttachType,
        EAMOccupancyLogic,
        EAMNumericField,
        EAMNumericFieldOp,
        EAMPatternType,
        EAttachKeyword,
        EAMRandomDistribution,
        EAMReductionType,
        EBankConditionCombine,
        CBankConditionLink,
        EBehaviorAlignment,
        CBehaviorCategoryFlags,
        CequipmentDisplayFlagCountFlagArray,
        EBehaviorUnitTrackerAtMaxRule,
        EBehaviorUnitTrackerSnapRule,
        EBehaviorBuffReplace,
        TPowerLevel,
        TPowerLink,
        EAllianceId,
        CbundleFlagCountFlagArray,
        CBoostLink,
        SGameContentCreationData,
        CHotkeyLink,
        CRect,
        UInt8,
        ECameraHeightMap,
        ECharacterGender,
        ECharacterRace,
        ECharacterRelevance,
        CCliffMeshLink,
        CCampaignLink,
        CConsoleSkinLink,
        CDataCollectionLink,
        CCommanderLink,
        SProductReleaseDate,
        EConversationProductionLevel,
        CConversationStateLink,
        CCharacterLink,
        TConversationItemId,
        CconversationStateFlagCountFlagArray,
        CiRange,
        EGameCatalog,
        EImplementionLevel,
        CDataCollectionPatternLink,
        EOscillator,
        CNotifyAreaFlags,
        EEffectHistory,
        CResponseFlags,
        CKineticLink,
        CEffectOffset,
        CeffectRevealFlagCountFlagArray,
        EHeightMap,
        EListWalkMode,
        CunitAttributeCountFlagArray,
        EDamageVisibility,
        CDamageFlags,
        EDamageKind,
        EDamageType,
        EDamageTotal,
        EEffectContainer,
        TTechAlias,
        CCmdFlags,
        EMoverPatternType,
        CselectionTransferFlagCountFlagArray,
        EEffectModifyFacing,
        EClassIdCBehavior,
        EEffectRemoveBehaviorAlignment,
        EBehaviorHeroicState,
        EUpgradeOperation,
        CEmoticonLink,
        CBundleLink,
        CfootprintFlagCountFlagArray,
        TDifficultyLevel,
        TAIBuild,
        CiQuad,
        EAttackType,
        CplayerLeaveFlagCountFlagArray,
        CScoreResultLink,
        UInt16,
        CSoundtrackLink,
        CDSPLink,
        EUIColorRelation,
        CGameSpeed,
        CFourCC,
        CFontStylePath,
        CLayoutPath,
        TPlayerId,
        ETargetModeValidation,
        EQuickCastMode,
        EGlueTheme,
        EHerdClosestTo,
        CheroFlagCountFlagArray,
        EHeroState,
        CHeroStatLink,
        EHeroRole,
        EHeroImageFacing,
        EHeroCutsceneSize,
        CMountLink,
        CTalentProfileLink,
        EHeroDifficulty,
        EHeroGender,
        TMountCategory,
        EPurchaseWarningCondition,
        CMapLink,
        EHeroAbilState,
        CBehaviorLink,
        EKineticFollow,
        CVariatorGameFangle,
        CVariatorGameFixed,
        CTimeOfDay,
        CTexturePath,
        EEffectLocation,
        EEffectPlayer,
        EMapKind,
        CStyleName,
        CArmyCategoryLink,
        CLocationLink,
        CObjectiveLink,
        CAnimsPath,
        CFacialPath,
        CLightLink,
        EOcclusion,
        EPausedParticleSystemBehavior,
        CPhysicsMaterialLink,
        CTextureProps,
        EFoliageLayer,
        CmountFlagCountFlagArray,
        EPathMode,
        EObjectiveType,
        CpingFlagCountFlagArray,
        EDamageLocation,
        EResponseContinueMethod,
        CdamageResponseCategoryCountFlagArray,
        CdeathTypeCountFlagArray,
        CdamageKindCountFlagArray,
        EDamageResponseDamageValue,
        CresponseUnitBirthTypeCountFlagArray,
        EPreloadTiming,
        CConversationLink,
        TProductHyperlinkId,
        CrequirementCountFlagArray,
        CRequirementNodeLink,
        CrewardFlagCountFlagArray,
        CHeroLink,
        TBattleLicenseName,
        CDecalPackLink,
        CTextureLink,
        CSprayLink,
        CPortraitPackLink,
        CTrophyLink,
        CVoicePackLink,
        CRaceBannerPackLink,
        CStimPackLink,
        CscoreResultFlagCountFlagArray,
        CscoreValueFlagCountFlagArray,
        EScoreSort,
        EScoreValueReport,
        EScoreCollapse,
        EScoreValueType,
        EScoreValue,
        EScoreValueOperation,
        CfQuad,
        ESoundCategory,
        ESoundBlend,
        ESoundDupe,
        ESoundDupePriority,
        CSoundExclusivityLink,
        Int16,
        ESoundMode,
        CPitchRange,
        ESoundSelect,
        CVolumeRange,
        CSoundMixSnapshotLink,
        EExclusivityAction,
        EExclusivityQueueAction,
        CVolume,
        CTargetFindLink,
        CTacticalLink,
        CtalentProfileFlagCountFlagArray,
        CtargetFindFlagCountFlagArray,
        EUnitAttribute,
        ETargetFindSet,
        TCatalogFieldPath,
        TAttackTargetPriority,
        CReverbLink,
        CTerrainTexLink,
        CTileLink,
        CCliffLink,
        C2fVector,
        CTextureSlot,
        ETurretIdle,
        EDeathReveal,
        EUnitMob,
        EUnitGender,
        CunitFlagCountFlagArray,
        CunitUserFlagCountFlagArray,
        EResourceState,
        EResourceType,
        CplaneCountFlagArray,
        EUnitResponse,
        EArmorType,
        CGameAcceleration,
        ECostCategory,
        CTurretLink,
        TUnitRadius,
        CSyncModelDataPath,
        EKillDisplay,
        ERankDisplay,
        CLootLink,
        Int8,
        TUserFieldId,
        EUserType,
        CUserLink,
        CuserFieldFlagCountFlagArray,
        EEditorTextType,
        TUserInstanceId,
        ETextTagEdge,
        EValidateCombine,
        EGameTimeEvent,
        CpathingTypeCountFlagArray,
        EGameResult,
        EPlayerType,
        EUnitAIFlag,
        EAlliancePlayer,
        EClassIdCAbil,
        EBehaviorState,
        EUnitTestState,
        EPlayerRelationship,
        EUnitType,
        EPlane,
        EWeaponType,
        ESkillPoint,
        EAbilEffectStage,
        EVitalType,
        C4Vector,
        CString32,
        EWeaponPrioritization,
        EWeaponLegacyMovement,
        EEffectUnit,
        EAchievementTagCheck,
        EActorRequestScope,
        EActorRequestActor,
        CShapeLink,
        CActorMsgPayloadPtr,
        CActorSiteOps,
        EActorModelAspectPerson,
        EActorModelAspectObservingPoV,
        EActorModelAspectRegardsAs,
        EActorModelAspectDuring,
        CLabelExpression,
        EActorModelAspectObservedPlayerType,
        CIdSetPlayers,
        CIdSetTeams,
        EActorModelAspectModelOwnerType,
        EActorModelAspectTest,
        CSubNameKey,
        CAttachMethods,
        EActorPhysicsImpactRangeType,
        EActorQuadDecorationFunction,
        EActorSoundValueSource,
        CPhysicsMaterialLinks,
        CActorClassFilters,
        EActorResponseScope,
        EActorIntersectType,
        CString80,
        EActorAnimTransitionType,
        EActorAnimPropMatchType,
        ESerpentType,
        CActorDeathMembers,
        EActorOverkillTestType,
        ECmdResult,
        TAttachPropIndex,
        CbehaviorModifyCountFlagArray,
        CbehaviorStateCountFlagArray,
        CunitVitalCountFlagArray,
        CclassIdCBehaviorCountFlagArray,
        EEffectTimeScale,
        CattackTypeResponseCountFlagArray,
        CdamageTypeResponseCountFlagArray,
        EDamageResponseHandledValue,
        TCommanderLevel,
        ECommanderTalentType,
        ECommanderMasteryTalentType,
        CconversationProductionLevelFlagCountFlagArray,
        TConversationStateOpId,
        TConversationStateIndexId,
        EConversationConditionOp,
        EConversationActionOp,
        TConversationStateVariation,
        EConversationConditionCheck,
        CGamePoInt3D,
        TConversationTag,
        EConversationSelectionMethod,
        TConversationStateInfoId,
        CCatalogGameLink,
        CTextureSheetLink,
        CCatalogReference,
        TUpgradeEffectValue,
        EEffectModifyTurret,
        CeffectModifyTurretFlagCountFlagArray,
        CString50,
        EFootprintShapeMode,
        TFootprintOffsets,
        TFootprintBorders,
        CString4,
        THandicap,
        TTriggerLibId,
        TCmdResult,
        EDamageCategory,
        ESoundFormat,
        ESoundResampler,
        ESpeakerMode,
        EMuteControl,
        EVolumeControl,
        ESoundMaxMethod,
        ESoundMaxPrioritization,
        EGameCategoryUsage,
        CAssetLink,
        EHeroAbilCategoryState,
        CHeroAbilLink,
        CheroAbilFlagCountFlagArray,
        EHeroAITalentBuildType,
        TDifficulty,
        EHeroStatState,
        EVariationCommands,
        ETonemapRegionTypes,
        EMissionState,
        EModelEvent,
        EModelQuality,
        EPhysicsMaterial,
        CTextureExpression,
        EMotionDriverType,
        CMissileAcceleration,
        CMissileSpeed,
        EMotionTurnType,
        EMotionActorTrackingType,
        EMotionArrivalTestType,
        EMotionBlendType,
        CPhaseOutro,
        EMotionRotationLaunchActorType,
        EMotionRotationActorType,
        EMotionThrowRotationType,
        C3fVector,
        CThrowBand,
        CYawPitchRoll,
        EMotionOverlayType,
        EMotionOverlayPolarity,
        CFangleRateMissile,
        CFangleAccelMissile,
        ERequirementState,
        CSoundPath,
        TSoundWeight,
        TLocaleId,
        CPitch,
        TSoundBalance,
        ETalentModification,
        CCardId,
        ECardButtonType,
        TVoiceOverSkinId,
        EVoiceOverSkinState,
        TVoiceOverGroupId,
        EVoiceOverSoundType,
    },
    structs: {
        SAbilOrderDisplay,
        SEffectBehavior,
        SCost,
        SCooldown,
        SCharge,
        SCostFactor,
        STargetSorts,
        SMarker,
        SAbilTargetCursorInfo,
        SAbilArmMagazineInfo,
        SAbilCmdButton,
        SAbilBuildInfo,
        SAbilInventoryInfo,
        SAbilLearnInfo,
        SAbilMergeInfo,
        SAbilMorphInfo,
        SAbilMorphSection,
        SAbilPawnInfo,
        SAbilRallyInfo,
        SAbilResearchInfo,
        SAbilReviveCmdButton,
        SAbilReviveInfo,
        SAbilReviveInfoMax,
        SAbilSpecializeInfo,
        SAbilTrainInfo,
        SAbilWarpTrainInfo,
        SEffectWhichUnit,
        SEffectWhichLocation,
        SEffectWhichBehavior,
        SAccumulatorSwitchCase,
        SAccumulatedFixed,
        SAccumulatedUInt32,
        SAccumulatedGameRate,
        SAccumulatedGameTime,
        SEffectWhichPlayer,
        SAchievementTag,
        SActorRequest,
        SActorVisibilityShape,
        SActorEvent,
        SActorSiteOpsData,
        SActorModelAspectSet,
        SActorModelAspect,
        SActorHostedAttach,
        SAttachQuery,
        SEventDataFootprint,
        SEventDataSound,
        SActorPhysicsImpactData,
        SActorRangeAbil,
        SActorQuadDecoration,
        SActorSoundLayer,
        SActorAVPair,
        SActorActionTerrainSquib,
        SActorAVCluster,
        SActorPhysicsData,
        SActorQuerySubject,
        SActorQueryResponse,
        SActorQuerySubjectResponse,
        SActorSendBasics,
        SActorDeathBodySquib,
        SActorCloakTransition,
        SActorCloakState,
        SActorCreepHeightClass,
        SActorCreepRate,
        SActorDeathData,
        SActorDeathDataCustom,
        SLookAtTypeInfo,
        SLookAtType,
        SSplatEmitterMaterialInfo,
        SSplatEmitterInitInfo,
        SActorOverrideBlendTime,
        SActorOverrideTransitionBlendTime,
        SActorOverrideModel,
        SActorProgressStage,
        SActorHostedDelta,
        SSerpentAggregate,
        SSerpentSegment,
        SActorStateInfo,
        SActorBaseline,
        SActorDeathDataCustomGroup,
        SActorUnitImpactSoundExtras,
        SDamagePastRemainingHealth,
        SDamageOverInterval,
        STerrainSquib,
        STerrainSquibVisual,
        SUnitAbilSound,
        SErrorOverride,
        SLayerIcon,
        SLayerIconVariation,
        SLayerIconShield,
        SLayerIconShieldVariation,
        SVitalColor,
        SIconVariation,
        SStatusColor,
        SStatusChargeData,
        SStatusHarvesterData,
        STextTagParameters,
        SUnitKillRank,
        SBankPath,
        SArtifactRank,
        SHeroReleaseDate,
        SAttachKey,
        SModification,
        SDeathResponse,
        SAttributeChange,
        SDamageKind,
        SScoreValueUpdate,
        SUnitResourceRatio,
        SUnitWeaponData,
        SVeterancyLevel,
        SBehaviorFraction,
        SEffectWhichTimeScale,
        SBehaviorDuration,
        SDamageResponse,
        SVitalRegenVitalRemain,
        SPowerStage,
        SAbilReplace,
        SAbilAdd,
        SSpawnInfo,
        STooltipBlock,
        STooltipTimeAbilCmd,
        SButtonCardLayout,
        SCameraZoom,
        SCameraParam,
        SCameraSmooth,
        SCampaignData,
        SMovieConfig,
        SCharacterVariation,
        SUIColorEntry,
        SCommanderUnit,
        SCommanderTalentTree,
        SCommanderMasteryTalent,
        SCommanderAbil,
        SCommanderDifficultyLevel,
        SConsoleSkinModel,
        SConversationProductionLevel,
        SConversationConditionSet,
        SConversationCondition,
        SConversationUserValue,
        SConversationActionSet,
        SConversationAction,
        SConversationFacialAnim,
        SConversationLine,
        SConversationRunActions,
        SConversationWait,
        SConversationJump,
        SConversationChoice,
        SConversationGroup,
        SConversationComment,
        SConversationStateIndex,
        SConversationStateInfoText,
        SConversationStateInfoValue,
        SConversationStateInfoModel,
        SConversationStateInfoUpgrade,
        SConversationStateInfoAbilCmd,
        SConversationStateVariation,
        SConversationStateInfoIds,
        SDataCollectionRecord,
        SUpgradeInfoWeapon,
        SDataFieldsPattern,
        SDataTokensPattern,
        STextureSheetEntry,
        SEffectDamageArea,
        SEffectSearchRevealerParams,
        SEffectEnumArea,
        SEffectMover,
        SEffectMissileBounce,
        SUpgradeEffect,
        SEffectUpgrade,
        SEffectModifyPlayerCost,
        SEffectModifyUnitCost,
        SEffectModifyWeapon,
        SEffectModifyVital,
        SEffectModifyTurret,
        SEffectSwitchCase,
        SEmoticonPackCampaign,
        SFootprintLayer,
        SFootprintShape,
        SFootprintBitSet,
        SDifficultyLevel,
        SAIBuild,
        SHandicap,
        SMapSize,
        SAspectMargin,
        STeamColor,
        SAIDescription,
        STriggerLib,
        STargetFilterResult,
        SBeaconInfo,
        SDamageTypeInfo,
        SAttackTypeInfo,
        SResourceConvert,
        SMeleePointThreshold,
        SChallengeCategory,
        SChallenge,
        SSoundQuality,
        SMinimapData,
        SSelectionData,
        SVolumeFade,
        SReverbRolloff,
        SVolumeThreshold,
        SVolumeRolloff,
        SSoundData,
        SMixRoute,
        SGlobalSoundData,
        SPointModel,
        SCameraShakeAmplitude,
        SCameraShakeFrequency,
        SCameraShakeRotation,
        SListenerRolloff,
        SUnitSpeedText,
        SWeaponSpeedText,
        SObjectGroupData,
        SLoadingScreenHelp,
        SLoadingBar,
        SGameCategory,
        SGameModeInfo,
        SDefaultGameVariant,
        STutorialConfig,
        SHotkeyInfo,
        SResourceUI,
        SHelpControlCategoryInfo,
        SHelpControlInfo,
        SHelpGameMechanicInfo,
        SAltSoundtrack,
        SCutsceneAssetPath,
        SHerdLevel,
        SHerdNode,
        SHeroAbilCategory,
        SHeroAbil,
        SHeroHeroicAbility,
        SHeroSpecificVO,
        SHeroTalentTree,
        SHeroTalentTier,
        SHeroSpecificIntroVO,
        SHeroLevelScaling,
        SHeroLevelModification,
        SHeroRatings,
        SHeroAITalentBuild,
        SHeroSpecificUI,
        SHeroStatModifier,
        SItemContainerSlot,
        SFlareInfo,
        STimeEvent,
        SLightInfo,
        SDirectionalLight,
        SVariationConfig,
        SLightRegionInfo,
        SMissionCategory,
        SLootChoice,
        SAnimFile,
        SAnimAlias,
        SAttachProps,
        SModelDataEvent,
        SPhysicsMaterialMapping,
        STextureDeclare,
        STextureNameAdaption,
        STextureInfo,
        STextureExpressionSpec,
        STextureMatchSpec,
        SModelVariation,
        SPathingData,
        SMotionPhase,
        SMotionOverlayPhase,
        SMotionOverlay,
        SStartingUnit,
        SUpkeepTax,
        SRequirementNode,
        SRequirementCount,
        SRewardCategory,
        SRewardSpecificUI,
        SGameReplacement,
        SSkinModelGroup,
        SSkinModelMacroRun,
        SSkinPackEntry,
        SSoundAsset,
        SSyncPointRange,
        SSoundAssetTemplate,
        SSoundLocaleFlags,
        SPitchShift,
        SReverbBalance,
        SSoundtrackCue,
        SSoundtrackMasterLayer,
        SSoundtrackSlaveLayer,
        SSoundtrackSection,
        STacAbilData,
        STalentRank,
        STalentAbilityModification,
        STalentModification,
        STargetFindEnumArea,
        SDSPArray,
        SCreepSettings,
        SFoliageSimulationConfig,
        STerrainDoodad,
        SFidget,
        SUnitArmorFormula,
        SStockCharge,
        SUnitAbilData,
        SUnitBehaviorData,
        SCardLayout,
        SCardLayoutButton,
        SAddedOnData,
        SUnitEquipment,
        SUnitReviveInfo,
        SAttributePointsInfo,
        SUpgradeEffectTemplate,
        SValidatorCondition,
        SValidatorFunction,
        SValidatorEnumArea,
        SVoiceOverSkin,
        SVoiceOverGroup,
        SVoiceOverLine,
        SVoicePackExampleLine,
    },
    classes: {
        CAbil,
        CAbilProgress,
        CAbilEffect,
        CAbilQueueable,
        CAbilRedirect,
        CAbilArmMagazine,
        CAbilAttack,
        CAbilAugment,
        CAbilAttackModifier,
        CAbilBattery,
        CAbilBeacon,
        CAbilBehavior,
        CAbilBuild,
        CAbilBuildable,
        CAbilEffectInstant,
        CAbilEffectTarget,
        CAbilHarvest,
        CAbilInteract,
        CAbilInventory,
        CAbilLearn,
        CAbilMerge,
        CAbilMergeable,
        CAbilMorph,
        CAbilMorphPlacement,
        CAbilMove,
        CAbilPawn,
        CAbilQueue,
        CAbilRally,
        CAbilRedirectInstant,
        CAbilRedirectTarget,
        CAbilResearch,
        CAbilRevive,
        CAbilSpecialize,
        CAbilStop,
        CAbilTrain,
        CAbilTransport,
        CAbilWarpable,
        CAbilWarpTrain,
        CAccumulator,
        CAccumulatorConstant,
        CAccumulatorVitals,
        CAccumulatorDistance,
        CAccumulatorBehavior,
        CAccumulatorAttributePoints,
        CAccumulatorTrackedUnitCount,
        CAccumulatorLevel,
        CAccumulatorAbilLevel,
        CAccumulatorUnitLevel,
        CAccumulatorVeterancyLevel,
        CAccumulatorCargo,
        CAccumulatorEffectAmount,
        CAccumulatorUserData,
        CAccumulatorUnitCustomValue,
        CAccumulatorSwitch,
        CAccumulatorArithmetic,
        CAccumulatorPlayerScoreValue,
        CAchievement,
        CAchievementTerm,
        CAchievementTermAbil,
        CAchievementTermAbilInteract,
        CAchievementTermAbilLoad,
        CAchievementTermAbilUse,
        CAchievementTermAchievement,
        CAchievementTermBehavior,
        CAchievementTermBehaviorAbsorbed,
        CAchievementTermBehaviorCount,
        CAchievementTermBehaviorElapsed,
        CAchievementTermBehaviorState,
        CAchievementTermCombine,
        CAchievementTermEffect,
        CAchievementTermEffectAbsorbed,
        CAchievementTermEffectDamaged,
        CAchievementTermEffectDodged,
        CAchievementTermEffectHealed,
        CAchievementTermEffectKilled,
        CAchievementTermEffectUse,
        CAchievementTermGeneric,
        CAchievementTermReplay,
        CAchievementTermScoreValue,
        CAchievementTermTime,
        CAchievementTermUnit,
        CAchievementTermUnitBirth,
        CAchievementTermUnitDeath,
        CAchievementTermUnitKills,
        CAchievementTermUnitRegen,
        CAchievementTermUnitSupplyLoss,
        CActor,
        CActorBase,
        CActorBearings,
        CActorCamera,
        CActorModel,
        CActorModelMaterial,
        CActorQuad,
        CActorForce,
        CActorForceLineSegment,
        CActorBeam,
        CActorRange,
        CActorRegion,
        CActorSite,
        CActorSiteOp,
        CActorSiteOpBase,
        CActorSound,
        CActorSplat,
        CActorAction,
        CActorActionOverride,
        CActorArc,
        CActorBeamSimple,
        CActorBeamStandard,
        CActorBlob,
        CActorCameraModel,
        CActorCreep,
        CActorCutscene,
        CActorDoodad,
        CActorDoodadPreserver,
        CActorFoliageFXSpawner,
        CActorEditorCamera,
        CActorEditorPoint,
        CActorEventMacro,
        CActorEventMacroRunnable,
        CActorForceBox,
        CActorForceConeRoundedEnd,
        CActorForceCylinder,
        CActorForceSphere,
        CActorGlobalConfig,
        CActorOverrides,
        CActorLight,
        CActorLightOmni,
        CActorLightSpot,
        CActorLightModel,
        CActorLightOmniModel,
        CActorLightSpotModel,
        CActorLookAt,
        CActorList,
        CActorListPerPlayer,
        CActorPortrait,
        CActorPower,
        CActorProgress,
        CActorPropertyCurveSet,
        CActorQueryResponse,
        CActorRegionArc,
        CActorRegionCircle,
        CActorRegionCombine,
        CActorRegionGame,
        CActorRegionPolygon,
        CActorRegionQuad,
        CActorRegionWater,
        CActorScene,
        CActorSelection,
        CActorSetQueried,
        CActorShadow,
        CActorShield,
        CActorShieldImpact,
        CActorSimple,
        CActorSiteBillboard,
        CActorSiteMover,
        CActorSiteOrbiter,
        CActorSiteRocker,
        CActorSiteOp2DRotation,
        CActorSiteOpAction,
        CActorSiteOpAttach,
        CActorSiteOpAttachVolume,
        CActorSiteOpBanker,
        CActorSiteOpBankerUnit,
        CActorSiteOpBasic,
        CActorSiteOpGameCameraFollow,
        CActorSiteOpDeathMotion,
        CActorSiteOpDeltaSum,
        CActorSiteOpEffect,
        CActorSiteOpForward,
        CActorSiteOpHeight,
        CActorSiteOpHigherOfTerrainAndWater,
        CActorSiteOpHostBearings,
        CActorSiteOpHostedOffset,
        CActorSiteOpIncoming,
        CActorSiteOpLocalOffset,
        CActorSiteOpOrientAttachPointTo,
        CActorSiteOpPatch,
        CActorSiteOpPersistentOffset,
        CActorSiteOpOrbiter,
        CActorSiteOpPhysicsImpact,
        CActorSiteOpRandomPointInCircle,
        CActorSiteOpRandomPointInCrossbar,
        CActorSiteOpRandomPointInSphere,
        CActorSiteOpRotationExplicit,
        CActorSiteOpRotationRandom,
        CActorSiteOpRotationVariancer,
        CActorSiteOpRotator,
        CActorSiteOpRotationSmooth,
        CActorSiteOpSelectionOffset,
        CActorSiteOpSerpentHead,
        CActorSiteOpSerpentSegment,
        CActorSiteOpShadow,
        CActorSiteOpTether,
        CActorSiteOpTipability,
        CActorSiteOpTilter,
        CActorSiteOpUp,
        CActorSiteOpZ,
        CActorSiteOpCursor,
        CActorSiteOpYawLimiter,
        CActorSiteOpPitchLimiter,
        CActorSnapshot,
        CActorStateMonitor,
        CActorSquib,
        CActorBatch,
        CActorTerrain,
        CActorTerrainDeformer,
        CActorText,
        CActorTurret,
        CActorUnit,
        CActorUnitRing,
        CActorMissile,
        CActorMinimap,
        CAlert,
        CArmyCategory,
        CArmyUnit,
        CArmyUpgrade,
        CArtifact,
        CArtifactSlot,
        CAttachMethod,
        CAttachMethodArcTest,
        CAttachMethodBestMatch,
        CAttachMethodFilter,
        CAttachMethodAttachType,
        CAttachMethodIncoming,
        CAttachMethodLeastDeflection,
        CAttachMethodNodeOccupancy,
        CAttachMethodNodeOccupancy2,
        CAttachMethodNumericField,
        CAttachMethodPattern,
        CAttachMethodPortAllocator,
        CAttachMethodProximity,
        CAttachMethodRandom,
        CAttachMethodReduction,
        CAttachMethodVolumesRequery,
        CAttachMethodVolumesTargets,
        CAttachMethodVolumesWeightedPick,
        CBankCondition,
        CBankConditionCompare,
        CBankConditionCompareValueCount,
        CBankConditionCompareValueInteger,
        CBankConditionCompareValueString,
        CBankConditionCompareValueSum,
        CBankConditionCombine,
        CBankConditionCurrentMap,
        CBeam,
        CBeamSync,
        CBeamSyncSweeper,
        CBeamAsync,
        CBeamAsyncLinear,
        CBeamAsyncShadow,
        CBehavior,
        CBehaviorAttackModifier,
        CBehaviorAttribute,
        CBehaviorUnitTracker,
        CBehaviorBuff,
        CBehaviorClickResponse,
        CBehaviorConjoined,
        CBehaviorCreepSource,
        CBehaviorJump,
        CBehaviorPowerSource,
        CBehaviorPowerUser,
        CBehaviorResource,
        CBehaviorReveal,
        CBehaviorSpawn,
        CBehaviorVeterancy,
        CBehaviorWander,
        CBoost,
        CBundle,
        CButton,
        CCamera,
        CCampaign,
        CCharacter,
        CCliff,
        CCliffMesh,
        CColorStyle,
        CCommander,
        CConfig,
        CConsoleSkin,
        CConversation,
        CConversationState,
        CCursor,
        CDataCollection,
        CDataCollectionUnit,
        CDataCollectionUpgrade,
        CDataCollectionAbil,
        CDataCollectionPattern,
        CDecalPack,
        CDSP,
        CDSPChorus,
        CDSPCompressor,
        CDSPCustomCompressor,
        CDSPDistortion,
        CDSPEcho,
        CDSPFlange,
        CDSPHighPass,
        CDSPLimiter,
        CDSPLowPass,
        CDSPLowPassSimple,
        CDSPNormalize,
        CDSPOscillator,
        CDSPParamEQ,
        CDSPPitchShift,
        CDSPReverb,
        CEffect,
        CEffectResponse,
        CEffectAddTrackedUnit,
        CEffectClearTrackedUnits,
        CEffectAddTrackedUnits,
        CEffectRemoveTrackedUnit,
        CEffectApplyBehavior,
        CEffectApplyForce,
        CEffectApplyKinetic,
        CEffectCancelOrder,
        CEffectCreateHealer,
        CEffectCreep,
        CEffectCreatePersistent,
        CEffectRandomPointInCircle,
        CEffectCreateUnit,
        CEffectDamage,
        CEffectDestroyHealer,
        CEffectDestroyPersistent,
        CEffectEnumArea,
        CEffectEnumTrackedUnits,
        CEffectEnumMagazine,
        CEffectEnumTransport,
        CEffectEnumInventory,
        CEffectLastTarget,
        CEffectLoadContainer,
        CEffectIssueOrder,
        CEffectLaunchMissile,
        CEffectModifyPlayer,
        CEffectModifyUnit,
        CEffectMorph,
        CEffectRedirectMissile,
        CEffectReleaseMagazine,
        CEffectRemoveBehavior,
        CEffectRemoveKinetic,
        CEffectReturnMagazine,
        CEffectSet,
        CEffectSwitch,
        CEffectTeleport,
        CEffectTransferBehavior,
        CEffectUseCalldown,
        CEffectUseMagazine,
        CEffectUserData,
        CEmoticon,
        CEmoticonPack,
        CFootprint,
        CFoW,
        CGame,
        CGameUI,
        CHerd,
        CHerdNode,
        CHero,
        CHeroAbil,
        CHeroStat,
        CItem,
        CItemAbil,
        CItemAbilPowerUp,
        CItemEffect,
        CItemEffectInstant,
        CItemEffectTarget,
        CItemClass,
        CItemContainer,
        CKinetic,
        CKineticFollow,
        CKineticRotate,
        CKineticSequence,
        CKineticSet,
        CKineticTranslate,
        CKineticDistance,
        CLensFlareSet,
        CLight,
        CLocation,
        CLoot,
        CLootSpawn,
        CLootEffect,
        CLootItem,
        CLootSet,
        CLootUnit,
        CMap,
        CModel,
        CModelFoliage,
        CMount,
        CMover,
        CMoverAvoid,
        CMoverFlock,
        CMoverMissile,
        CMoverNull,
        CObjective,
        CPhysicsMaterial,
        CPing,
        CPlayerResponse,
        CPlayerResponseUnit,
        CPlayerResponseUnitDamage,
        CPlayerResponseUnitDeath,
        CPlayerResponseUnitBirth,
        CPortraitPack,
        CPreload,
        CPreloadAsset,
        CPreloadScene,
        CPreloadActor,
        CPreloadConversation,
        CPreloadModel,
        CPreloadSound,
        CPreloadUnit,
        CPremiumMap,
        CRace,
        CRaceBannerPack,
        CRequirement,
        CRequirementNode,
        CRequirementGT,
        CRequirementLT,
        CRequirementGTE,
        CRequirementLTE,
        CRequirementEq,
        CRequirementNE,
        CRequirementAnd,
        CRequirementOr,
        CRequirementXor,
        CRequirementNot,
        CRequirementOdd,
        CRequirementDiv,
        CRequirementMod,
        CRequirementMul,
        CRequirementSum,
        CRequirementConst,
        CRequirementAllowAbil,
        CRequirementAllowBehavior,
        CRequirementAllowUnit,
        CRequirementAllowUpgrade,
        CRequirementCountAbil,
        CRequirementCountBehavior,
        CRequirementCountEffect,
        CRequirementCountUnit,
        CRequirementCountUpgrade,
        CReverb,
        CReward,
        CRewardDecal,
        CRewardIcon,
        CRewardModel,
        CRewardPortrait,
        CRewardBadge,
        CRewardPoints,
        CRewardTrophy,
        CRewardEmoticon,
        CRewardVoicePack,
        CRewardPortraitInGame,
        CRewardConsoleSkin,
        CRewardSpray,
        CRewardSprayUseDecal,
        CRewardRaceBanner,
        CRewardStim,
        CScoreResult,
        CScoreResultRoot,
        CScoreResultScore,
        CScoreResultGraph,
        CScoreResultPane,
        CScoreResultBuildOrder,
        CScoreResultCallouts,
        CScoreResultExperience,
        CScoreResultPerformance,
        CScoreValue,
        CScoreValueCustom,
        CScoreValueStandard,
        CScoreValueConstant,
        CScoreValueCombine,
        CShape,
        CShapeArc,
        CShapeQuad,
        CSkin,
        CSkinPack,
        CSound,
        CSoundExclusivity,
        CSoundMixSnapshot,
        CSoundtrack,
        CSpray,
        CSprayPack,
        CStimPack,
        CTacCooldown,
        CTactical,
        CTacticalOrder,
        CTacticalSet,
        CTalent,
        CTalentProfile,
        CTargetFind,
        CTargetFindBestPoint,
        CTargetFindWorkerRallyPoint,
        CTargetFindRallyPoint,
        CTargetFindEnumArea,
        CTargetFindEffect,
        CTargetFindLastAttacker,
        CTargetFindOffset,
        CTargetFindOrder,
        CTargetFindSet,
        CTargetSort,
        CTargetSortAlliance,
        CTargetSortAngle,
        CTargetSortBehaviorCount,
        CTargetSortBehaviorDuration,
        CTargetSortChargeCount,
        CTargetSortChargeRegen,
        CTargetSortCooldown,
        CTargetSortDistance,
        CTargetSortField,
        CTargetSortInterruptible,
        CTargetSortMarker,
        CTargetSortPowerSourceLevel,
        CTargetSortPowerUserLevel,
        CTargetSortPriority,
        CTargetSortRandom,
        CTargetSortValidator,
        CTargetSortVeterancy,
        CTargetSortVital,
        CTargetSortVitalFraction,
        CTerrain,
        CTerrainObject,
        CCliffDoodad,
        CTerrainTex,
        CTexture,
        CTextureSheet,
        CTile,
        CTrophy,
        CTurret,
        CUnit,
        CUnitHero,
        CUpgrade,
        CUser,
        SUserField,
        SUserInstance,
        SUserInstanceField,
        SUserInstanceAbilCmd,
        SUserInstanceActor,
        SUserInstanceColor,
        SUserInstanceCompare,
        SUserInstanceFixed,
        SUserInstanceGameLink,
        SUserInstanceImage,
        SUserInstanceInt,
        SUserInstanceModel,
        SUserInstanceMovie,
        SUserInstanceSound,
        SUserInstanceString,
        SUserInstanceText,
        SUserInstanceUnit,
        SUserInstanceUpgrade,
        SUserInstanceUser,
        CValidator,
        CValidatorCombine,
        CValidatorCondition,
        CValidatorFunction,
        CValidatorEffect,
        CValidatorEffectCompare,
        CValidatorEffectCompareDodged,
        CValidatorEffectCompareEvaded,
        CValidatorEffectTreeUserData,
        CValidatorGameCompareTimeEvent,
        CValidatorGameCompareTimeOfDay,
        CValidatorGameCompareTerrain,
        CValidatorGameCommanderActive,
        CValidatorLocation,
        CValidatorLocationCompareCliffLevel,
        CValidatorLocationComparePower,
        CValidatorLocationCompareRange,
        CValidatorLocationArc,
        CValidatorLocationCreep,
        CValidatorLocationCrossChasm,
        CValidatorLocationCrossCliff,
        CValidatorLocationEnumArea,
        CValidatorLocationPathable,
        CValidatorLocationInPlayableMapArea,
        CValidatorLocationPlacement,
        CValidatorLocationShrub,
        CValidatorLocationType,
        CValidatorLocationVision,
        CValidatorPlayer,
        CValidatorPlayerAlliance,
        CValidatorPlayerRequirement,
        CValidatorPlayerTalent,
        CValidatorPlayerFood,
        CValidatorPlayerCompare,
        CValidatorPlayerCompareDifficulty,
        CValidatorPlayerCompareFoodAvailable,
        CValidatorPlayerCompareFoodMade,
        CValidatorPlayerCompareFoodUsed,
        CValidatorPlayerCompareRace,
        CValidatorPlayerCompareResource,
        CValidatorPlayerCompareResult,
        CValidatorPlayerCompareType,
        CValidatorUnit,
        CValidatorUnitInWeaponRange,
        CValidatorUnitAI,
        CValidatorUnitCombatAI,
        CValidatorUnitAlliance,
        CValidatorUnitAbil,
        CValidatorUnitBehaviorStackAlias,
        CValidatorUnitBehaviorState,
        CValidatorUnitState,
        CValidatorUnitDetected,
        CValidatorUnitArmor,
        CValidatorUnitFilters,
        CValidatorUnitFlying,
        CValidatorUnitInventory,
        CValidatorUnitInventoryIsFull,
        CValidatorUnitInventoryContainsItem,
        CValidatorUnitLastDamagePlayer,
        CValidatorUnitKinetic,
        CValidatorUnitMissileNullified,
        CValidatorUnitMover,
        CValidatorUnitOrder,
        CValidatorUnitOrderQueue,
        CValidatorUnitOrderTargetPathable,
        CValidatorUnitOrderTargetType,
        CValidatorUnitPathable,
        CValidatorUnitPathing,
        CValidatorUnitScanning,
        CValidatorUnitType,
        CValidatorUnitWeaponAnimating,
        CValidatorUnitWeaponFiring,
        CValidatorUnitWeaponPlane,
        CValidatorUnitTestWeaponType,
        CValidatorUnitCompare,
        CValidatorUnitCompareAIAreaEvalRatio,
        CValidatorUnitCompareAbilLevel,
        CValidatorUnitCompareAbilSkillPoint,
        CValidatorUnitCompareAbilStage,
        CValidatorUnitCompareAttackPriority,
        CValidatorUnitCompareBehaviorCount,
        CValidatorUnitCompareCargo,
        CValidatorUnitCompareChargeUsed,
        CValidatorUnitCompareCooldown,
        CValidatorUnitCompareDamageDealtTime,
        CValidatorUnitCompareDamageTakenTime,
        CValidatorUnitCompareDeath,
        CValidatorUnitCompareDetectRange,
        CValidatorUnitCompareField,
        CValidatorUnitCompareKillCount,
        CValidatorUnitCompareMarkerCount,
        CValidatorUnitCompareMoverPhase,
        CValidatorUnitCompareOrderCount,
        CValidatorUnitCompareOrderTargetRange,
        CValidatorUnitComparePowerSourceLevel,
        CValidatorUnitComparePowerUserLevel,
        CValidatorUnitCompareRallyPointCount,
        CValidatorUnitCompareResourceContents,
        CValidatorUnitCompareResourceHarvesters,
        CValidatorUnitCompareSpeed,
        CValidatorUnitCompareVeterancyLevel,
        CValidatorUnitCompareVital,
        CValidatorUnitCompareVitality,
        CValidatorUnitCompareHeight,
        CValidatorCompareTrackedUnitsCount,
        CValidatorIsUnitTracked,
        CVoiceOver,
        CVoicePack,
        CWarChest,
        CWarChestSeason,
        CWater,
        SWaterStateDesc,
        SWaterDoodad,
        CWeapon,
        CWeaponLegacy,
        CWeaponStrafe
    }
}